* COMMENT =ox-publish=

** Helper publisher function
#+begin_src emacs-lisp
(defun garid/publish-to-epnet-via-rsync (tmp)
  ""
  (interactive)
  (call-process-shell-command "notify-send \"ox-phd-publish\" \"HTML export finished\"")
  (f-write (concat "AuthType Basic\n"
                   "AuthName The-T-Directory\n"
                   "AuthUserFile /home/zgarid/.users\n"
                   "<Limit GET POST >\n"
                   "require user zgarid\n"
                   "</Limit>\n")
           'utf-8
           "~/BrainDump/denote/phd/website/.htaccess")

  (call-process-shell-command
   "rsync --recursive --delete  --copy-links --verbose ~/BrainDump/denote/phd/website/ zgarid@www.ep.sci.hokudai.ac.jp:public_html/phd"
   )

  (call-process-shell-command "notify-send \"ox-phd-publish\" \"Published-on-epnet\"")
  )
#+end_src

** Helper to create stork db
I publish first from org to md in the local dir. Then using that local dir to create stork db.

#+begin_src emacs-lisp
(defun garid/get-title-of-denote-filepath-trimmed-org (x)
  (string-trim
   (string-trim-left
    (denote-retrieve-front-matter-title-line x 'org)
    (regexp-quote "#+title:"))))


(defun garid/get-md-converted-path-from-org-path (path)
  ""
  (replace-regexp-in-string
   (regexp-quote ".org")                    ;; replace the extension
   ".md"
   (replace-regexp-in-string
    (regexp-quote "/home/garid/BrainDump/denote/phd/") ;; replace the dir
    "/home/garid/BrainDump/denote/phd/website-md/"
    path nil 'literal)
   nil 'literal))

(defun garid/get-html-url-from-org-path (path)
  ""
  (replace-regexp-in-string
   (regexp-quote ".org")                    ;; replace the extension
   ".html"
   (replace-regexp-in-string
    (regexp-quote "/home/garid/BrainDump/denote/phd/") ;; replace the dir
    ""
    path nil 'literal)
   nil 'literal))

(defun garid/prepare-stork-toml ()
  ""
  (concat
   ;; pre header
   "[input]\n"
   ;;"base_directory = \"/home/garid/BrainDump/denote/phd/website-md/\"\n"
   "base_directory = \"\"\n"
   "url_prefix = \"https://www.ep.sci.hokudai.ac.jp/~zgarid/phd/\"\n"
   "files = [\n"

   ;; main contents
   (mapconcat
    (lambda (x)
      (format
       "{path=\"%s\", url = \"%s\", title = \"%s\"},\n"
       (garid/get-md-converted-path-from-org-path      x)
       (garid/get-html-url-from-org-path               x)
       (garid/get-title-of-denote-filepath-trimmed-org x)
       )
      )

    (directory-files-recursively "/home/garid/BrainDump/denote/phd/"           ;; 0.list of files
                                 ".*.org$")
    )

   ;; ending
   "]\n"))

(defun garid/re-create-stork-db-from-md-exports (x) ;; completion-function requires arguemtns, so a x arguemtns that won't used
  (interactive)
  (f-write (garid/prepare-stork-toml)
           'utf-8
           "/tmp/stork-from-emacs.toml")

  (call-process-shell-command "notify-send \"stork\" \"toml created /tmp/stork-from-emacs.toml\"")
  (call-process-shell-command "stork build --input /tmp/stork-from-emacs.toml --output /home/garid/BrainDump/denote/phd/website/stork-db.st")
  (call-process-shell-command "notify-send \"stork\" \"stork-db.st re-created\n/home/garid/BrainDump/denote/phd/website/stork-db.st\"")
  )



#+end_src

** Helper to create better navbar
#+begin_src emacs-lisp
(garid/get-html-url-from-org-path (denote-get-path-by-id "20240814T122254"))
#+end_src

#+RESULTS:
: 20240814T122254--70-acknowledgements__future.html

** Actual conf
#+begin_src emacs-lisp :exports code :results verbatim
(use-package ox-publish
  :ensure nil
  :after org
  :custom
  (org-publish-project-alist
   `(("denote: org -> html"
      :base-directory ,(denote-directory)
      :recursive t
      :publishing-function   org-html-publish-to-html
      :publishing-directory ,(concat (denote-directory) "website")
      :exclude ".*daily/.*org"  ;;; for excluding -daily
      ;; :section-numbers nil
      :section-numbers  org-export-with-section-numbers
      :with-toc         t
      :html_link_home  "index.html"
      ;;                                 :html-preamble "<div id=\"navbar\"> <ul>
      ;;   <div class=\"stork-wrapper\">
      ;;     <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
      ;;     <a href=\"..\">Up/Back</a>                           &nbsp;
      ;;     <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
      ;;     <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
      ;;     <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
      ;;     <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
      ;;     <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
      ;;     <input data-stork=\"federalist\" class=\"stork-input\" />
      ;;     <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
      ;;   </div>
      ;; </ul>
      ;; <hr>
      ;; </div>
      ;; <script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
      ;; <script>
      ;; stork.register(
      ;;     'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
      ;; )
      ;; </script>
      ;; "
      )
     ("phd-website"
      :base-directory ,(concat (denote-directory) "phd")
      :recursive t
      :publishing-function   org-html-publish-to-html
      :publishing-directory ,(concat (denote-directory) "phd" "/website")
      :exclude ".*daily/.*org"
      :completion-function garid/publish-to-epnet-via-rsync
      :section-numbers     org-export-with-section-numbers
      :with-toc         t
      :html_link_home  "index.html"
      :html-preamble ,(concat
                       "<div id=\"navbar\"> <ul>"
                       "<div class=\"stork-wrapper\">"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T014358")) "\"> Info </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20240814T113502")) "\"> Home </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T130751")) "\"> 1.Introduction </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133612")) "\"> 2.Developments </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133644")) "\"> 3.Methods </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133718")) "\"> 4.Results </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133803")) "\"> 5.Discussion </a> &nbsp;"
                       "<a href=\"/~zgarid/search.html\">Search</a>          &nbsp;"
                       "<input data-stork=\"federalist\" class=\"stork-input\" />"
                       "<div data-stork=\"federalist-output\" class=\"stork-output\"></div>"
                       "</div>"
                       "</ul>"
                       "<hr>"
                       "</div>"
                       "<script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>"
                       "<script>"
                       "stork.register('federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/phd/stork-db.st')"
                       "</script>"
                       "<link"
                       "  rel=\"stylesheet\""
                       "  href=\"https://files.stork-search.net/releases/v1.6.0/basic.css\""
                       "/>"
                       )
      )

     ("phd-2-md"
      :base-directory ,(concat (denote-directory) "phd")
      :recursive t
      :publishing-function  org-md-publish-to-md
      :publishing-directory ,(concat (denote-directory) "phd" "/website-md")
      :exclude ".*daily/.*org"
      :section-numbers     org-export-with-section-numbers
      :completion-function garid/re-create-stork-db-from-md-exports
      )


     ;; good but doesn't expot caption
     ;; ("phd-2-text"
     ;;  :base-directory ,(concat (denote-directory) "phd")
     ;;  :recursive t
     ;;  :publishing-function  org-ascii-publish-to-ascii
     ;;  :publishing-directory ,(concat (denote-directory) "phd" "/website-text")
     ;;  :exclude ".*daily/.*org"
     ;;  :section-numbers     org-export-with-section-numbers
     ;;  )


     )))
#+end_src



* COMMENT citar-org-roam
#+begin_src emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir                      "g_papers")
  (citar-org-roam-note-title-template (concat "=${=key=}= - ${title}\n"
                                              ;;"#+subtitle: Garid's notes on this article\n"
                                              "#+author: paper authors: ${author}\n"
                                              "#+filetags: :paper:\n\n"
                                              "* Ideas\n\n* Notes\n\n"))
  :config
  (citar-org-roam-mode))

#+end_src

* COMMENT org-gtd
#+begin_src emacs-lisp
(use-package org-gtd
  :ensure t
  :after org

  :custom
  (org-gtd-directory    (concat garids-brain-dumping-directory "gtd"))
  ;; (org-gtd-update-ack "3.0.0")

  :bind (
         :map org-agenda-mode-map ("C-<f8>"   . org-gtd-clarify-agenda-item )
         :map org-mode-map        ("C-<f8>"   . org-gtd-clarify-item        )
         :map org-gtd-clarify-map ("<f8>"     . org-gtd-organize            ))
  :init
  (setq org-gtd-update-ack "3.0.0")
  (setq org-agenda-skip-additional-timestamps-same-entry t)

  :config
  (org-gtd-mode 1)
  )
#+end_src

* keybindings
** COMMENT removed
| <f9>   | org-gtd-capture                                             | capture                          |      |        |
| C-<f8> | org-gtd-clarify-item                                        | gtd org                          |      |        |
| C-<f9> | org-gtd-process-inbox                                       | process inbox                    |      |        |
| <f7>   | org-gtd-engage                                              | gtd engage                       |      |        |
| Oa     | (find-file (concat org-gtd-directory "/gtd_archive_2024") ) | O.a.rchive                       | -    | y      |
| Ot     | (find-file (concat org-gtd-directory "/org-gtd-tasks.org")) | O.t.asks                         | -    | y      |
| Oi     | (find-file (concat org-gtd-directory "/inbox.org")        ) | O.i.nbox                         | -    | y      |
| Y      | gry-copy-to-x-clip                                          | (Y)ank to xclip                  | -    |        |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| key(s) | function                                                    | short description                | mode | lambda |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| b      | :ignore t                                                   | (b)ookmark...................... | -    |        |
| bm     | consult-bookmark                                            | b-(m)ark-consult                 | -    |        |
| bs     | bookmark-set                                                | b-(s)et                          | -    |        |
| bd     | bookmark-delete                                             | b-(d)elete                       | -    |        |
| br     | bookmark-rename                                             | b-(r)ename                       | -    |        |
| hd     | devdocs-lookup                                              | h-(d)evdocs lookup               | -    |        |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| y      | :ignore t                                                   | (y)assnippet.................    | -    |        |
| yn     | yas-new-snippet                                             | y-(n)ew                          | -    |        |
| yt     | yas-describe-tables                                         | y-(t)able description table      | -    |        |
| yv     | yas-visit-snippet-file                                      | y-(v)isit                        | -    |        |
| yi     | consult-yasnippet                                           | y-(i)nsert                       | -    |        |
| ya     | yas-activate-extra-mode                                     | y-(a)ctivate extra mode          | -    |        |
| yd     | yas-activate-extra-mode                                     | y-(de)activate extra mode        | -    |        |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| C      | :ignore t                                                   | (C)alc related.................. | -    |        |
| Ca     | calc                                                        | C-(a) calc                       | -    |        |
| Ce     | calc-embedded                                               | C-(e) embedded                   | -    |        |
| =otn=    | =(org-todo "NEXT" )=                                          | n.ext                            | org  | y      |
| =ott=    | =(org-todo "TODO" )=                                          | t.odo                            | org  | y      |
| =otw=    | =(org-todo "WAIT" )=                                          | w.ait                            | org  | y      |
| =otd=    | =(org-todo "DONE" )=                                          | d.one                            | org  | y      |
| =otc=    | =(org-todo "CNCL" )=                                          | c.ancel                          | org  | y      |
| =otr=    | =(org-todo "" )=                                              | r.emove                          | org  | y      |
| =otT=    | =org-todo=                                                    | T.odo                            | org  |        |


 Cf     | full-calc                                                   | C-(f) full                       | -    |        |

o     | org-insert-structure-template                               | y-(o)rg templates                | -    |        |

* COMMENT Yassnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :custom
  (yas/triggers-in-field t) ;; Do I need this?
  ;; (setq yas-key-syntaxes (append yas-key-syntaxes '(yas-try-key-from-dot)))
  ;;(yas-snippet-dirs (list (concat user-emacs-directory "snippet" "snippets")))
  :config
  (yas-global-mode 1)

  (defcustom yas-new-snippet-default "\
  # -*- mode: snippet -*-
  # contributor: Garid Zorigoo <garidzorigoo@gmail.com>
  # name: $1
  # key: ${2:${1:$(yas--key-from-desc yas-text)}}
  # --
  $0`(yas-escape-text yas-selected-text)`"
    "Default snippet to use when creating a new snippet.
  If nil, don't use any snippet."
    :type 'string)
  )

(use-package consult-yasnippet)
#+end_src

* COMMENT devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :config ;; taken initially from  https://alhassy.com/emacs.d/#devdocs
  (when nil ;; need to toggle nil->t and the first time installign
    (cl-loop
     for lang in '("python~3.11" "numpy~1.21" "matplotlib~3.6" "pandas~1"
                   c "r" "nim" "gnu_make" "bash" "fish~3.6" "qt~6.1")
     do (devdocs-install (list (cons 'slug (format "%s" lang)))))))
#+end_src

* COMMENT mu4e
#+begin_src emacs-lisp
;; (delete 'mu4e evil-collection-mode-list)
;; (delete 'mu4e-conversation evil-collection-mode-list)

(require 'mu4e)

;; default
(setq mu4e-maildir
      "/home/garid/.local/share/mail/garidzorigoo@gmail.com")

(setq mu4e-get-mail-command "mailsync")
(setq mu4e-drafts-folder "/[Gmail]/Drafts")
(setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
(setq mu4e-trash-folder  "/[Gmail]/Trash")

;; dont save message to Sent msg, GMail/IMAP will take care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
(setq mu4e-maildir-shortcuts
      '(("/INBOX"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; something about ourselves
;; I don't use a signature...
(setq
 user-mail-address "garidzorigoo@gmail.com"
 user-full-name    "Garid Z."
 message-signature "Garid Z."
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type  'ssl)
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
* COMMENT notmuch
#+begin_src emacs-lisp
(use-package notmuch)
#+end_src
* COMMENT eww web browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url               ; Use eww as the default browser
      shr-use-fonts                nil                          ; No special fonts
      shr-use-colors               nil                          ; No colours
      shr-indentation              2                            ; Left-side margin
      shr-width                    85                           ; Fold text to 85 columns
      eww-search-prefix "https://lite.duckduckgo.com/lite/?q=") ; Use another engine for searching
#+end_src

* COMMENT emacs-everywhere
#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src

* COMMENT habitica
#+begin_src emacs-lisp
(use-package habitica
  :ensure t
  :config
  (defhydra habitica-hydra-control ()
    "
^task^                         ^checklist^                          ^movement^
^^^^^^^^---------------------------------------------------------------------------------------
_g_: refresh                   _c a_: checklist add                  _j_: vi.down
_n_: new task                  _c t_: checklist toggle               _k_: vi.up
_+_: + task/habit              _c d_: checklist delete               _<tab>_: org cycle
_-_: - task/habit              _c r_: checklist rename               _h_: vi.left
_t_: toggle todo state                                               _l_: vi.right
_d_: deadline set                                                    _C-j_: org-forward-heading-same-level
_i_: intensity set                                                   _C-k_: org-backard-heading-same-level
_q_: add a tag to task                                               _M-S-<return>_: habitica-new-task
_Q_: delete a tag to task
"

    ("g"            habitica-tasks                      )
    ("n"            habitica-new-task                   )
    ("+"            habitica-up-task                    )
    ("-"            habitica-down-task                  )
    ("t"            habitica-todo-task                  )
    ("d"            habitica-set-deadline               )
    ("i"            habitica-set-difficulty             )
    ("q"            habitica-add-tag-to-task            )
    ("Q"            habitica-remove-tag-to-task         )

    ("c a"          habitica-add-item-to-checklist      )
    ("c t"          habitica-score-checklist-item       )
    ("c d"          habitica-delete-item-from-checklist )
    ("c r"          habitica-rename-item-on-checklist   )

    ("j"            next-line                           )
    ("k"            previous-line                       )
    ("h"            backward-char                       )
    ("l"            forward-char                        )
    ("C-j"          org-forward-heading-same-level      )
    ("C-k"          org-backward-heading-same-level     )
    ("M-S-<return>" habitica-new-task                   )
    ("<tab>"        org-cycle                           )
    ("/"            org-sparse-tree                     )
    ("D E L" habitica-delete-task "delete task"         ))
  )
#+end_src

* COMMENT buffer move
#+begin_src emacs-lisp
(use-package buffer-move)
#+end_src

* COMMENT ox-hugo 
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t 
  :after ox)
#+end_src
* COMMENT copy to xclip without turning on the xclip mode
#+begin_src emacs-lisp
(defun gry-copy-to-x-clip()
  (interactive)
  (if (and (boundp 'xclip-mode) xclip-mode);; check if the xclip has turned on
      (clipboard-kill-ring-save ( mark ) ( point ) )
    (progn
      (xclip-mode +1)
      (clipboard-kill-ring-save ( mark ) ( point ) )
      (xclip-mode -1)
      )
    )
  )
#+end_src

* COMMENT Org inline transparent image background                  :customFunc:
#+begin_src emacs-lisp
(defcustom org-inline-image-background nil
  "The color used as the default background for inline images.
When nil, use the default face background."
  :group 'org
  :type '(choice color (const nil)))

(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; Get this return result style from `create-image'.
    (append (list file type data-p)
            (list :background (or org-inline-image-background (face-background 'default)))
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)

(setq org-inline-image-background "white")
#+end_src

* COMMENT org capturing related
#+begin_src emacs-lisp :results none
(require 'org-protocol)
(setq org-agenda-start-with-log-mode t
      org-default-notes-file (concat (file-name-as-directory denote-directory)
                                     "20230926T010607--todo__todo.org"))
#+end_src

* roam related
** COMMENT =org-roam=: roam
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :ensure t
  :custom
  (org-roam-node-display-template (concat "${title:*} "
                                          (propertize "${tags:30}"
                                                      'face 'org-tag)))

  (org-roam-v2-ack                                                 t)
  (org-roam-directory (concat garids-brain-dumping-directory "roam")) ;; (org-roam-directory "~/Pensieve/")
  (org-roam-completion-everywhere                                  t) ;;  do I need this?
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org"
                         ,(concat
                           "#+filetags: :nohtmlexport:\n"
                           "#+title: %<%Y-%m-%d>\n"
                           "#+auto_tangle: nil\n"
                           "#+startup: show2levels\n"
                           "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                           )))))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("r" "Research" plain "* %?"
      :if-new (file+head "g_research/%<%Y%m%d%H%M%S>-${slug}__rsch.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :rsch:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "g_kanji/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("M" "Math" plain "* %?"
      :if-new (file+head "g_math/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :math:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org"
                                  ))
      :unnarrowed t)

     ("p" "Programming language" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :plang:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("g" "Golang Notes" plain "* %?"
      :if-new (file+head "g_go/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat ;;"#+title: ${title}\n"
                                  "#+filetags: :go:\n"
                                  ;;"#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("m" "Meta (meaning access nodes)" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}__meta.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :meta:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("P" "Project" plain
      "* Goals\n\n%?* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "g_project/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :Project:\n"
                                  "#+auto_tangle: nil"))
      :unnarrowed t)

     ))

  :config
  (require 'org-roam-dailies)
  (org-roam-setup)
  (org-roam-db-autosync-mode))
#+end_src

** COMMENT =org-roam-ui=: graphing of org-roam in web browser
#+begin_src emacs-lisp
(use-package org-roam-ui :ensure t)
#+end_src
** COMMENT =consult-org-roam=
#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize consult-org-roam-forward-links :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search)
   )
#+end_src
** COMMENT org-roam (custom) function for inserting node                             :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates
	 (list (append (car org-roam-capture-templates)
		       '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)
    ))
#+end_src
** COMMENT org-roam (custom) functions for tag searching                             :customFunc:
#+begin_src emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-exclude-by-tag (tag-name)
  (lambda (node)
    (null (member tag-name (org-roam-node-tags node)) )
    ))

(defun my/org-roam-find-node-exclude-kanji ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find nil nil (lambda (node)
                                (null (member "kanji" (org-roam-node-tags node)) )
                                ))
  )

(defun my/org-roam-find-node-by-focus-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             ;;(null (member "kanji" (org-roam-node-tags node)) )
             (member garids-focus-tag (org-roam-node-tags node)) 
             ))
  )


(defun my/org-roam-find-node-using-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             (member
                    (completing-read "Select tag to search: " (org-roam-tag-completions) nil t "")
                    (org-roam-node-tags node)) 
             ))
  )
#+end_src

()
* COMMENT auto capitalizing
#+begin_src emacs-lisp
(load "~/.config/emacs/auto-capitalize.el")

(add-hook 'text-mode-hook 'turn-on-auto-capitalize-mode)
#+end_src

Now I use the captain mode

* COMMENT =org-timeline=
#+begin_src emacs-lisp
(use-package org-timeline
  :init
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))
#+end_src

* COMMENT XeLaTeX equation preview fix                                                :customFunc:
#+begin_src emacs-lisp
;; (with-eval-after-load 'org
;;   (setq org-preview-latex-default-process 'imagemagick)
;;   (setf (plist-get (cdr (assq 'imagemagick org-preview-latex-process-alist)) :latex-compiler)
;;         '("xelatex -interaction nonstopmode -output-directory %o %f"))
;;   )
#+end_src

* COMMENT Org hooked function                                                         :customFunc:
#+begin_src emacs-lisp
;; (defun garid-custom/org-mode-hooked-func ()
;;   ;; (org-indent-mode)
;;   ;; (org-num-mode)
;;   (setq org-download-heading-lvl nil)                                                                            ;;
;;   ;;(message (denote-directory))
;;   ;; (when buffer-file-name                                        ;; 0. need to check buffer has file associated with
;;   ;;   (when (= 0                                                  ;; 4. checking substring should be 0 means it's a denote file
;;   ;;            (string-match-p                                    ;; 3. substring check
;;   ;;             (regexp-quote (file-truename (denote-directory))) ;; 2.  /home/garid/BrainDump/denote/
;;   ;;             (file-truename (buffer-file-name))))              ;; 1.  /home/garid/BrainDump/denote/20241002T182854--denote-image-directory__elisp_org.org
;;   ;;     (setq org-download-image-dir
;;   ;;           (file-relative-name
;;   ;;            (concat                                       ;; 8. /home/garid/BrainDump/denote/00-img/20241002T182854/
;;   ;;             (file-name-as-directory (denote-directory))  ;; 7. /home/garid/BrainDump/denote to /home/garid/BrainDump/denote/
;;   ;;             "00-img/"                                    ;; 6. "00-img/"
;;   ;;             (file-name-as-directory                      ;; 5. "20241002T190027/"
;;   ;;              (car                                        ;; 4. "20241002T190027"
;;   ;;               (split-string                              ;; 3. ( "20241002T190027"  "denote-getting-id-of-current-file__elisp_org" )
;;   ;;                (file-name-base                           ;; 2. "20241002T190027--denote-getting-id-of-current-file__elisp_org.org"
;;   ;;                 (buffer-file-name))                      ;; 1. "/home/garid/BrainDump/denote/20241002T190027--denote-getting-id-of-current-file__elisp_org.org"
;;   ;;                "--"))                                    ;; 3. splitting separator
;;   ;;              ))))))
;;   )
#+end_src

* COMMENT exporting
#+begin_src emacs-lisp :exports code :results verbatim
(setq
 org-publish-project-alist
 `(("Pensieve: org -> html"
    :base-directory ,org-roam-directory
    ;; :base-directory "~/Pensieve/"
    :recursive t
    :publishing-function org-html-publish-to-html
    :publishing-directory ,(concat org-roam-directory "website")
    :exclude ".*daily/.*org"  ;;; for excluding -daily
    ;; :publishing-directory "/tmp/asdf"
    ;;:publishing-directory (concat org-roam-directory "website")
    ;; :section-numbers nil
    :section-numbers  org-export-with-section-numbers
    :with-toc         t
    :html_link_home  "index.html"
    ;; :html-preamble "This is just a test"
    :html-preamble "<div id=\"navbar\"> <ul>
  <div class=\"stork-wrapper\">
    <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
    <a href=\"..\">Up/Back</a>                           &nbsp;
    <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
    <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
    <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
    <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
    <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
    <input data-stork=\"federalist\" class=\"stork-input\" />
    <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
  </div>
</ul>
<hr>
</div>
<script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
<script>
stork.register(
    'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
)
</script>
"
    ;; 
    ;; 'https://github.com/garid3000/testy/raw/master/garid_stork.st'
    ;; :html-divs ((preamble "header"  "preamble")
    ;;             (content   "main"   "content")
    ;;             (postamble "footer" "postamble"))

    )
   ;;:html_head "<link rel=\"stylesheet\" href=\"/home/garid/org.css\">"
   ;; not sure why above line doesn't change css of thml output
   ;; that's why I copied from
   ;;https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/
   ;; above


   ("Pensieve: od-imgs change position"
    :base-directory ,(concat org-roam-directory "od-imgs/")
    :base-extension "jpg\\|gif\\|png\\|svg"
    :recursive t
    ;;:publishing-directory "/ssh:user@host:~/html/images/"
    :publishing-directory ,(concat org-roam-directory "website/od-imgs")
    ;; :publishing-directory "/tmp/asdf/img"
    :publishing-function org-publish-attachment)

   ;; ("Pensieve: org -> txt"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  ;; :with-toc         t
   ;;  )

   ;; ("Pensieve: org -> txt 2"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  :with-toc         nil
   ;;  ;;:html_link_home  "index.html"
   ;;  )

   )
 )
#+end_src

* COMMENT Website from org-roam directory
[[id:e7ee081e-a02b-4ab9-bccc-327a92bf2b09][create website from org-roam]]
#+begin_src emacs-lisp
;; (setq org-html-validation-link            nil ;; Don't show validation link
;;       org-html-head-include-scripts       nil ;; Use our own scripts
;;       org-html-head-include-default-style nil ;; Use our own styles
;;       ;;org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
;;       org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg.css\"/>"
;;       )
#** TODO COMMENT garids working states                                                 :customFunc:
#+begin_src emacs-lisp
(setq garids-focus-tag "rsch")
(setq garids-focus-tag-list '("bps" "hkdn" "rsch" "yak"))
;; (setq garids-focus-tag (gry/choose-from-list-and-return-it garids-focus-tag-list))

(defun garid/focus-change-tag ()
  "this changes the tag of my work focus"
  (interactive)
  (setq garids-focus-tag (gry/choose-from-list-and-return-it garids-focus-tag-list))
  (message (concat "focus tag changed to " garids-focus-tag)))
#+end_src
+end_src

* COMMENT put empty svg file at point                                         :customFunc:
#+begin_src emacs-lisp
(defun garid/put-emtpy-svg-img-at-point ()
  (interactive)
  ;;Part 1: creates org-image if non existense
  (unless (file-directory-p org-download-image-dir);; when not
    (make-directory org-download-image-dir))

  ;;Part 2: copy the template
  (copy-file;; "~/.config/emacs/org-templates/template.svg"
   (concat (file-name-directory user-init-file) "org-templates/template.svg")
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg")))

  ;;Part 3: insert the link to the buffer
  (insert
   "[[file:"
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg"))
   "]]"))
#+end_src

* COMMENT Make long file faster
[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][this article]]

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right )
(setq         bidi-inhibit-bpa          t             )
#+end_src


* COMMENT annotate
#+begin_src emacs-lisp
(use-package annotate
  :ensure t)
#+end_src



* COMMENT =org-transclusion=
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :after org
  :bind (:map org-mode-map
              ("<f12>"   . org-transclusion-add     )
              ("M-<f12>" . org-transclusion-add-all )
              ("<f11>"   . org-transclusion-mode    )))
#+end_src


* COMMENT org-download editing shell script                                 :shell_script:
#+begin_src shell :tangle garid/edit_img.sh :shebang "#!/bin/sh"
file=$(readlink -f "$1")
ext="${file##*.}"

# create empty file if the file doesn't exist
if [ ! -f "$file" ]; then
    convert -size 480x320 xc:white "$file";
    echo "created new $file"
fi

# open image-editor based on the file's extension
case "$ext" in
	jpeg) gimp      "$file" ;;
	jpg)  gimp      "$file" ;;
	png)  gimp      "$file" ;;
	svg)  inkscape  "$file" ;;
	xopp) xournalpp "$file" ;;
esac
#+end_src




* COMMENT =org-node= helper with org-id
#+begin_src emacs-lisp
(use-package org-node)
#+end_src


* COMMENT =citar-denote=: citation in denote
#+begin_src emacs-lisp
(use-package citar-denote
 :ensure t
 :demand t ;; Ensure minor mode loads
 :after (:any citar denote)
 :custom
 ;; Package defaults
 (citar-denote-file-type             'org                )
 (citar-denote-keyword               "bib"               )
 (citar-denote-signature             nil                 )
 ;;(citar-denote-subdir              nil                 )
 (citar-denote-subdir                "litnotes"          )  ;; usefull
 (citar-denote-template              'biblio             )  ;; 'biblio is defined at denote
 (citar-denote-title-format          "author-year-title" )
 (citar-denote-title-format-andstr   "and"               )
 (citar-denote-title-format-authors  1                   )
 (citar-denote-use-bib-keywords      nil                 )
 :preface
 (bind-key "C-c w n" #'citar-denote-open-note)
 :init
 (citar-denote-mode)
 ;; Bind all available commands
 :bind (("C-c w d" . citar-denote-dwim                 )
        ("C-c w e" . citar-denote-open-reference-entry )
        ("C-c w a" . citar-denote-add-citekey          )
        ("C-c w k" . citar-denote-remove-citekey       )
        ("C-c w r" . citar-denote-find-reference       )
        ("C-c w l" . citar-denote-link-reference       )
        ("C-c w f" . citar-denote-find-citation        )
        ("C-c w x" . citar-denote-nocite               )
        ("C-c w y" . citar-denote-cite-nocite          )
        ("C-c w z" . citar-denote-nobib                )))
#+end_src



* COMMENT =undo-tree=
undo-tree is Emacs's undo & redo helper with built-in tree graph of versions.

#+begin_src emacs-lisp
(use-package undo-tree
  :delight " udt"
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src

* COMMENT =evil-terminal-cursor-changer=:
#+begin_src emacs-lisp :results none
(use-package evil-terminal-cursor-changer
  :ensure t
  :config (evil-terminal-cursor-changer-activate))
#+end_src



* COMMENT =org-bullet=: changing bullets in org file
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :after  org
  :hook   (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list
           '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ")))
#+end_src

* COMMENT =org-tidy=: hiding the properties
#+begin_src emacs-lisp
(use-package org-tidy
  :ensure t
  :hook   (org-mode . org-tidy-mode))
#+end_src
* COMMENT =ob-sagemath=
#+begin_src emacs-lisp
(use-package ob-sagemath
  :after org
  :config
  (setq org-babel-default-header-args:sage '((:session . t)
                                             (:results . "output")))
  )
#+end_src

* COMMENT completion preview mode
#+begin_src emacs-lisp
(use-package completion-preview
  :bind (:map
         completion-preview-active-mode-map
         ("C-i" . completion-preview-insert    )  ;; default bind
         ("M-n" . completion-preview-next-candidate)
         ("M-p" . completion-preview-prev-candidate)
         ("M-i" . completion-preview-complete  )  ;; default bind
         ("M-h" . completion-preview-insert    )) ;; my preferred bind
  ;;:config (global-completion-preview-mode)
  :hook (prog-mode . completion-preview-mode)
  )
#+end_src



* COMMENT =spray=: spraying texts
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode))
    :hook ((spray-mode . garid/distraction-free-on))
)
#+end_src
* COMMENT =vertico-posframe=
#+begin_src emacs-lisp
(use-package vertico-posframe
  :custom
  (vertico-posframe-width        180)
  (vertico-posframe-border-width 2)
  (vertico-posframe-height       16)
  :config
  (vertico-posframe-mode 1)
  )
#+end_src

* COMMENT theme
#+begin_src emacs-lisp :results none
(use-package uwu-theme
  :ensure t
  :config
  (enable-theme 'uwu)

  ;; not related with this theme itself but generally relates to generally
  (scroll-bar-mode       -1)        ; Disable visible scrollbar
  (tool-bar-mode         -1)        ; Disable the toolbar
  (tooltip-mode          -1)        ; Disable tooltips
  (menu-bar-mode         -1)        ; Disable the menu bar
  (setq-default tab-width 4)
  (set-fringe-mode       10)        ; Give some breathing room
  (column-number-mode      )

  (setq-default indent-tabs-mode nil)
  ;; Align with spaces only
  ;;(define-advice align-regexp (around align-regexp-with-spaces)
  ;; (defadvice align-regexp (around align-regexp-with-spaces)
  ;;   "Never use tabs for alignment."
  ;;   (let ((indent-tabs-mode nil)) ad-do-it))
  ;; (ad-activate 'align-regexp)
  )
#+end_src

* COMMENT =org-timeblock=: agenda to SVG
#+begin_src emacs-lisp
(use-package org-timeblock
  :after compat-macs)
#+end_src


* COMMENT Package Repositories
I'm pulling packages from following 3 places (not sure that I need all three):

1. [[https://melpa.org/packages/]]
2. [[https://elpa.gnu.org/packages/]]
3. [[https://elpa.nongnu.org/nongnu/]]

#+begin_src emacs-lisp
;; Package repos
(require 'package)
(setq package-archives
      '(("melpa"   . "https://melpa.org/packages/"     )
        ("elpa"    . "https://elpa.gnu.org/packages/"  )
        ("nongnu"  . "https://elpa.nongnu.org/nongnu/" )))
#+end_src

* COMMENT Initialize use-package manager
#+begin_src emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)
#+end_src

* COMMENT =org-tidy=: hiding the properties
#+begin_src emacs-lisp
(use-package org-tidy
  :straight t
  :hook   (org-mode . org-tidy-mode))
#+end_src


* COMMENT =org-modern=
#+begin_src emacs-lisp
(use-package org-modern
  :after org
  :config
  (global-org-modern-mode 1))
#+end_src


* COMMENT =org-roam=
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :straight t
  :custom
  (org-roam-node-display-template (concat "${title:100} "
                                          (propertize "${tags:50}"
                                                      'face 'org-tag)))

  (org-roam-v2-ack                   t                 )
  (org-roam-directory                "~/BrainDump/roam_research")
  (org-roam-db-location              "~/BrainDump/roam_research/0000_database.db")

  (org-roam-completion-everywhere    nil               ) ;;  do I need this?
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "g_journal/%<%Y%m%dT%H%M%S>--${slug}.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title: %<%Y-%m-%d>\n"
                                  "#+auto_tangle: nil\n"
                                  "#+startup: show2levels\n"
                                  "#+filetags: :nohtmlexport:\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n")))
     ))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%dT%H%M%S>--${slug}.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title:    ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+date:     %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n"))
      :unnarrowed t)
     ("r" "Research" plain "* %?"
      :if-new (file+head "g_research/%<%Y%m%dT%H%M%S>--${slug}__rsch.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title:    ${title}\n"
                                  "#+filetags: :rsch:\n"
                                  "#+date:     %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "g_kanji/%<%Y%m%dT%H%M%S>--${slug}.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title:     ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+date:      %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n"
                                  ))
      :unnarrowed t)
     ))

  :config
  (org-roam-db-autosync-enable)

  ;; Change the slug (aka filename to be same format as from denote)
  ;; https://github.com/org-roam/org-roam/pull/1544#issuecomment-2211801343
  (cl-defmethod org-roam-node-slug :around ((node org-roam-node))
    (string-replace "_" "-" (cl-call-next-method)))


  (defun garid/org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates
	       (list (append (car org-roam-capture-templates)
		                 '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))


  (defun garid/choose-roam-directory ()
    (interactive)
    (setq org-roam-directory
          (completing-read "Choose: "
                           (mapcar
                            (lambda (xx) (f-join "~/BrainDump/" xx)) ;; re-apply root dir
                            (seq-filter
                             (lambda (x) (string-match "roam.*" x))         ;; filter only starting with roam
                             (directory-files "~/BrainDump/")))   ;; list sub dirs
                           ))

    (setq org-roam-db-location
          (f-join org-roam-directory "0000_database.db" ))

    (message "Now org-roam-directory = %s" org-roam-directory)
    (if (string= "yes"
                 (completing-read "Update DB: " '("no" "yes")))
        (org-roam-db-sync)))

  )
#+end_src

* COMMENT =org-roam-ui=: graphing of org-roam in web browser
#+begin_src emacs-lisp
(use-package org-roam-ui :straight t)
#+end_src

* COMMENT =consult-org-roam=
#+begin_src emacs-lisp
(use-package consult-org-roam
   :straight t
   :after org-roam
   :delight ""
   :init (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize consult-org-roam-forward-links :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))
#+end_src

* COMMENT =citar-org-roam=
#+begin_src emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :delight "" ; " cor"
  :custom
  (citar-org-roam-subdir                      "g_paper")
  (citar-org-roam-note-title-template (concat "${=key=}\n"
                                              "#+subtitle: ${=type=}: ${title}\n"
                                              "#+author:   author(s): ${author}\n"
                                              "#+filetags: :paper:\n\n"
                                              "[cite:@${=key=}]\n\n"
                                              "* Notes\n\n"
                                              ))
  :config
  (citar-org-roam-mode))

#+end_src

* COMMENT =ox-reveal=
Slighty different version.
#+begin_src emacs-lisp
(use-package ox-reveal
  :after org
  :straight t)
#+end_src

* COMMENT org drawio
#+begin_src emacs-lisp
(defun garid/drawio-edit-open  (path &optional _)
  (interactive)
  (let ((outdir       (file-name-directory      path))
        (path_no_ext  (file-name-sans-extension path)))
    (async-shell-command
     (format
       "drawio %s.drawio  && drawio %s.drawio -x -f svg -o %s.svg --svg-theme light"
       ;;"libreoffice --headless --convert-to %s --outdir %s %s.odg"
      path_no_ext path_no_ext path_no_ext)
     nil nil)
    
    ))

(add-to-list 'org-file-apps '("\\.drawio.svg\\'" . garid/drawio-edit-open))
#+end_src


* COMMENT =indent-bars=
#+begin_src emacs-lisp
(use-package indent-bars
  ;;:load-path "~/code/emacs/indent-bars"
  :straight t
  :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :custom
  (indent-bars-treesit-support   t)
  (indent-bars-no-descend-string nil)
  (indent-bars-prefer-character  "|")
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
				      list list_comprehension
				      dictionary dictionary_comprehension
				      parenthesized_expression subscript)))
  ;;:hook ((python-base-mode yaml-mode) . indent-bars-mode)
  ;;:hook ((python-base-mode yaml-mode) . indent-bars--ts-mode)
  )
#+end_src

* COMMENT Custom Aligner function (with untabify)                                      :customFunc:
#+begin_src emacs-lisp
(defun garid/align-regexp-and-untabify (beg end)
  (interactive "r")
  (align-regexp beg end
                (concat "\\(\\s-*\\)" (read-string "Align regexp: ")))
  (untabify beg end))
#+end_src

* removing org tempo
#+begin_src emacs-lisp

;; (require 'org-tempo)

;; (org-structure-template-alist
;;  '(("ba"    . "abstract")
;;    ("mk"    . "src makefile :tangle no")
;;    ("sq"    . "sqlite")
;;    ("py2"   . "src python :session pySess2 :results output :exports both :eval no-export")
;;    ("py1"   . "src python :session pySess1 :results output :exports both :eval no-export")
;;    ("py"    . "src python")
;;    ("do1"   . "src src dot :file (concat org-download-image-dir \"/tmp.svg\") :exports results :eval no-export")
;;    ("do"    . "src dot")
;;    ("te"    . "src text")
;;    ("sh"    . "src sh :eval no-export :shebang \"#!/bin/sh\"")
;;    ("go1"   . "src go :exports both :eval never-export")
;;    ("go"    . "src go")
;;    ("el"    . "src emacs-lisp")
;;    ("a"     . "export ascii")
;;    ("c"     . "center")
;;    ("C"     . "comment")
;;    ("e"     . "example")
;;    ("E"     . "export")
;;    ("h"     . "export html")
;;    ("l"     . "export latex")
;;    ("q"     . "quote")
;;    ("s"     . "src")
;;    ("sage"  . "src sage")
;;    ("sage1" . "src sage :session foo :results drawer :exports both :post equation_wrapper_equation_aligned(data=*this*)  :eval never-export")
;;    ("v"     . "verse")
;;    ("ju"    . "src jupyter-python :session juSess1 :async yes :eval never-export :exports both")
;;    ))
#+end_src
* COMMENT =ox-latex=
#+begin_src emacs-lisp
(use-package ox-latex
  :straight nil
  :after org
  :custom
  (org-latex-src-block-backend              'listings                                             )
  (org-latex-format-headline-function       'garid/latex-formattig-headings                )
  (org-latex-active-timestamp-format         "\\textcolor{Brown}{%s}"                             )
  (org-latex-inactive-timestamp-format       "\\textcolor{Brown}{%s}"                             )
  (org-latex-pdf-process
   '("latexmk -shell-escape -f -xelatex -%latex -interaction=nonstopmode -output-directory=%o %f" ))
  ;; -output-driver=\"xdvipdfmx -z 0\"
  ;;'("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f" ))
  ;; (org-highlight-latex-and-related     '(latex script entities))
  ;; (org-highlight-latex-and-related      nil)
  :config
  (add-to-list 'org-latex-classes '("extarticle" "\\documentclass{extarticle}"
                                    ("\\section{%s}"       . "\\section*{%s}")
                                    ("\\subsection{%s}"    . "\\subsection*{%s}")
                                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                    ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                                    ("\\subparagraph{%s}"  . "\\subparagraph*{%s}")))

  ;; function -------------------------------------------------------------------------------------
  (defun garid/latex-formattig-headings
      (todo todo-type priority text tags _info)
    "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
    (concat
     (and todo
          (format "{\\framebox{\\bfseries\\color{%s} %s}} "
                  (pcase todo-type
                    ('todo "olive") ('done "teal")
                    ;;('todo "Black") ('done "Brown")
                    )
                  todo))
     (and priority (format "\\framebox{\\#%c} " priority)) text
     (and tags
          (format "\\hfill{}\\textsc{%s}"
                  (mapconcat #'org-latex--protect-text tags ":")))))
  )
#+end_src
