* COMMENT citar-org-roam
#+begin_src emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir                      "citar-notes")
  (citar-org-roam-note-title-template (concat "=${=key=}= - ${title}\n"
                                              "#+subtitle: Garid's notes on this article\n"
                                              "#+author: paper authors: ${author}\n"
                                              "#+filetags: :lit:\n\n"
                                              "* Ideas\n\n* Notes\n\n"))
  :config
  (citar-org-roam-mode))

#+end_src

* COMMENT org-gtd
#+begin_src emacs-lisp
(use-package org-gtd
  :ensure t
  :after org

  :custom
  (org-gtd-directory    (concat garids-brain-dumping-directory "gtd"))
  ;; (org-gtd-update-ack "3.0.0")

  :bind (
         :map org-agenda-mode-map ("C-<f8>"   . org-gtd-clarify-agenda-item )
         :map org-mode-map        ("C-<f8>"   . org-gtd-clarify-item        )
         :map org-gtd-clarify-map ("<f8>"     . org-gtd-organize            ))
  :init
  (setq org-gtd-update-ack "3.0.0")
  (setq org-agenda-skip-additional-timestamps-same-entry t)

  :config
  (org-gtd-mode 1)
  )
#+end_src

* keybindings
** COMMENT removed
| <f9>   | org-gtd-capture                                             | capture                          |      |        |
| C-<f8> | org-gtd-clarify-item                                        | gtd org                          |      |        |
| C-<f9> | org-gtd-process-inbox                                       | process inbox                    |      |        |
| <f7>   | org-gtd-engage                                              | gtd engage                       |      |        |
| Oa     | (find-file (concat org-gtd-directory "/gtd_archive_2024") ) | O.a.rchive                       | -    | y      |
| Ot     | (find-file (concat org-gtd-directory "/org-gtd-tasks.org")) | O.t.asks                         | -    | y      |
| Oi     | (find-file (concat org-gtd-directory "/inbox.org")        ) | O.i.nbox                         | -    | y      |
| Y      | gry-copy-to-x-clip                                          | (Y)ank to xclip                  | -    |        |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| key(s) | function                                                    | short description                | mode | lambda |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| b      | :ignore t                                                   | (b)ookmark...................... | -    |        |
| bm     | consult-bookmark                                            | b-(m)ark-consult                 | -    |        |
| bs     | bookmark-set                                                | b-(s)et                          | -    |        |
| bd     | bookmark-delete                                             | b-(d)elete                       | -    |        |
| br     | bookmark-rename                                             | b-(r)ename                       | -    |        |
| hd     | devdocs-lookup                                              | h-(d)evdocs lookup               | -    |        |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| y      | :ignore t                                                   | (y)assnippet.................    | -    |        |
| yn     | yas-new-snippet                                             | y-(n)ew                          | -    |        |
| yt     | yas-describe-tables                                         | y-(t)able description table      | -    |        |
| yv     | yas-visit-snippet-file                                      | y-(v)isit                        | -    |        |
| yi     | consult-yasnippet                                           | y-(i)nsert                       | -    |        |
| ya     | yas-activate-extra-mode                                     | y-(a)ctivate extra mode          | -    |        |
| yd     | yas-activate-extra-mode                                     | y-(de)activate extra mode        | -    |        |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| C      | :ignore t                                                   | (C)alc related.................. | -    |        |
| Ca     | calc                                                        | C-(a) calc                       | -    |        |
| Ce     | calc-embedded                                               | C-(e) embedded                   | -    |        |
| =otn=    | =(org-todo "NEXT" )=                                          | n.ext                            | org  | y      |
| =ott=    | =(org-todo "TODO" )=                                          | t.odo                            | org  | y      |
| =otw=    | =(org-todo "WAIT" )=                                          | w.ait                            | org  | y      |
| =otd=    | =(org-todo "DONE" )=                                          | d.one                            | org  | y      |
| =otc=    | =(org-todo "CNCL" )=                                          | c.ancel                          | org  | y      |
| =otr=    | =(org-todo "" )=                                              | r.emove                          | org  | y      |
| =otT=    | =org-todo=                                                    | T.odo                            | org  |        |


 Cf     | full-calc                                                   | C-(f) full                       | -    |        |

o     | org-insert-structure-template                               | y-(o)rg templates                | -    |        |

* COMMENT Yassnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :custom
  (yas/triggers-in-field t) ;; Do I need this?
  ;; (setq yas-key-syntaxes (append yas-key-syntaxes '(yas-try-key-from-dot)))
  ;;(yas-snippet-dirs (list (concat user-emacs-directory "snippet" "snippets")))
  :config
  (yas-global-mode 1)

  (defcustom yas-new-snippet-default "\
  # -*- mode: snippet -*-
  # contributor: Garid Zorigoo <garidzorigoo@gmail.com>
  # name: $1
  # key: ${2:${1:$(yas--key-from-desc yas-text)}}
  # --
  $0`(yas-escape-text yas-selected-text)`"
    "Default snippet to use when creating a new snippet.
  If nil, don't use any snippet."
    :type 'string)
  )

(use-package consult-yasnippet)
#+end_src

* COMMENT devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :config ;; taken initially from  https://alhassy.com/emacs.d/#devdocs
  (when nil ;; need to toggle nil->t and the first time installign
    (cl-loop
     for lang in '("python~3.11" "numpy~1.21" "matplotlib~3.6" "pandas~1"
                   c "r" "nim" "gnu_make" "bash" "fish~3.6" "qt~6.1")
     do (devdocs-install (list (cons 'slug (format "%s" lang)))))))
#+end_src

* COMMENT mu4e
#+begin_src emacs-lisp
;; (delete 'mu4e evil-collection-mode-list)
;; (delete 'mu4e-conversation evil-collection-mode-list)

(require 'mu4e)

;; default
(setq mu4e-maildir
      "/home/garid/.local/share/mail/garidzorigoo@gmail.com")

(setq mu4e-get-mail-command "mailsync")
(setq mu4e-drafts-folder "/[Gmail]/Drafts")
(setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
(setq mu4e-trash-folder  "/[Gmail]/Trash")

;; dont save message to Sent msg, GMail/IMAP will take care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
(setq mu4e-maildir-shortcuts
      '(("/INBOX"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; something about ourselves
;; I don't use a signature...
(setq
 user-mail-address "garidzorigoo@gmail.com"
 user-full-name    "Garid Z."
 message-signature "Garid Z."
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type  'ssl)
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
* COMMENT notmuch
#+begin_src emacs-lisp
(use-package notmuch)
#+end_src
* COMMENT eww web browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url               ; Use eww as the default browser
      shr-use-fonts                nil                          ; No special fonts
      shr-use-colors               nil                          ; No colours
      shr-indentation              2                            ; Left-side margin
      shr-width                    85                           ; Fold text to 85 columns
      eww-search-prefix "https://lite.duckduckgo.com/lite/?q=") ; Use another engine for searching
#+end_src

* COMMENT emacs-everywhere
#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src

* COMMENT habitica
#+begin_src emacs-lisp
(use-package habitica
  :ensure t
  :config
  (defhydra habitica-hydra-control ()
    "
^task^                         ^checklist^                          ^movement^
^^^^^^^^---------------------------------------------------------------------------------------
_g_: refresh                   _c a_: checklist add                  _j_: vi.down
_n_: new task                  _c t_: checklist toggle               _k_: vi.up
_+_: + task/habit              _c d_: checklist delete               _<tab>_: org cycle
_-_: - task/habit              _c r_: checklist rename               _h_: vi.left
_t_: toggle todo state                                               _l_: vi.right
_d_: deadline set                                                    _C-j_: org-forward-heading-same-level
_i_: intensity set                                                   _C-k_: org-backard-heading-same-level
_q_: add a tag to task                                               _M-S-<return>_: habitica-new-task
_Q_: delete a tag to task
"

    ("g"            habitica-tasks                      )
    ("n"            habitica-new-task                   )
    ("+"            habitica-up-task                    )
    ("-"            habitica-down-task                  )
    ("t"            habitica-todo-task                  )
    ("d"            habitica-set-deadline               )
    ("i"            habitica-set-difficulty             )
    ("q"            habitica-add-tag-to-task            )
    ("Q"            habitica-remove-tag-to-task         )

    ("c a"          habitica-add-item-to-checklist      )
    ("c t"          habitica-score-checklist-item       )
    ("c d"          habitica-delete-item-from-checklist )
    ("c r"          habitica-rename-item-on-checklist   )

    ("j"            next-line                           )
    ("k"            previous-line                       )
    ("h"            backward-char                       )
    ("l"            forward-char                        )
    ("C-j"          org-forward-heading-same-level      )
    ("C-k"          org-backward-heading-same-level     )
    ("M-S-<return>" habitica-new-task                   )
    ("<tab>"        org-cycle                           )
    ("/"            org-sparse-tree                     )
    ("D E L" habitica-delete-task "delete task"         ))
  )
#+end_src

* COMMENT buffer move
#+begin_src emacs-lisp
(use-package buffer-move)
#+end_src

* COMMENT ox-hugo 
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t 
  :after ox)
#+end_src
* COMMENT copy to xclip without turning on the xclip mode
#+begin_src emacs-lisp
(defun gry-copy-to-x-clip()
  (interactive)
  (if (and (boundp 'xclip-mode) xclip-mode);; check if the xclip has turned on
      (clipboard-kill-ring-save ( mark ) ( point ) )
    (progn
      (xclip-mode +1)
      (clipboard-kill-ring-save ( mark ) ( point ) )
      (xclip-mode -1)
      )
    )
  )
#+end_src

* COMMENT Org inline transparent image background                  :customFunc:
#+begin_src emacs-lisp
(defcustom org-inline-image-background nil
  "The color used as the default background for inline images.
When nil, use the default face background."
  :group 'org
  :type '(choice color (const nil)))

(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; Get this return result style from `create-image'.
    (append (list file type data-p)
            (list :background (or org-inline-image-background (face-background 'default)))
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)

(setq org-inline-image-background "white")
#+end_src

* COMMENT org capturing related
#+begin_src emacs-lisp :results none
(require 'org-protocol)
(setq org-agenda-start-with-log-mode t
      org-default-notes-file (concat (file-name-as-directory denote-directory)
                                     "20230926T010607--todo__todo.org"))
#+end_src


* roam related
** COMMENT =org-roam=: roam
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :ensure t
  :custom
  (org-roam-node-display-template (concat "${title:*} "
                                          (propertize "${tags:30}"
                                                      'face 'org-tag)))

  (org-roam-v2-ack                                                 t)
  (org-roam-directory (concat garids-brain-dumping-directory "roam")) ;; (org-roam-directory "~/Pensieve/")
  (org-roam-completion-everywhere                                  t) ;;  do I need this?
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org"
                         ,(concat
                           "#+filetags: :nohtmlexport:\n"
                           "#+title: %<%Y-%m-%d>\n"
                           "#+auto_tangle: nil\n"
                           "#+startup: show2levels\n"
                           "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                           )))))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("r" "Research" plain "* %?"
      :if-new (file+head "g_research/%<%Y%m%d%H%M%S>-${slug}__rsch.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :rsch:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "g_kanji/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("M" "Math" plain "* %?"
      :if-new (file+head "g_math/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :math:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org"
                                  ))
      :unnarrowed t)

     ("p" "Programming language" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :plang:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("g" "Golang Notes" plain "* %?"
      :if-new (file+head "g_go/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat ;;"#+title: ${title}\n"
                                  "#+filetags: :go:\n"
                                  ;;"#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("m" "Meta (meaning access nodes)" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}__meta.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :meta:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("P" "Project" plain
      "* Goals\n\n%?* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "g_project/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :Project:\n"
                                  "#+auto_tangle: nil"))
      :unnarrowed t)

     ))

  :config
  (require 'org-roam-dailies)
  (org-roam-setup)
  (org-roam-db-autosync-mode))
#+end_src

** COMMENT =org-roam-ui=: graphing of org-roam in web browser
#+begin_src emacs-lisp
(use-package org-roam-ui :ensure t)
#+end_src
** COMMENT =consult-org-roam=
#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize consult-org-roam-forward-links :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search)
   )
#+end_src
** COMMENT org-roam (custom) function for inserting node                             :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates
	 (list (append (car org-roam-capture-templates)
		       '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)
    ))
#+end_src
** COMMENT org-roam (custom) functions for tag searching                             :customFunc:
#+begin_src emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-exclude-by-tag (tag-name)
  (lambda (node)
    (null (member tag-name (org-roam-node-tags node)) )
    ))

(defun my/org-roam-find-node-exclude-kanji ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find nil nil (lambda (node)
                                (null (member "kanji" (org-roam-node-tags node)) )
                                ))
  )

(defun my/org-roam-find-node-by-focus-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             ;;(null (member "kanji" (org-roam-node-tags node)) )
             (member garids-focus-tag (org-roam-node-tags node)) 
             ))
  )


(defun my/org-roam-find-node-using-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             (member
                    (completing-read "Select tag to search: " (org-roam-tag-completions) nil t "")
                    (org-roam-node-tags node)) 
             ))
  )
#+end_src

()
* COMMENT auto capitalizing
#+begin_src emacs-lisp
(load "~/.config/emacs/auto-capitalize.el")

(add-hook 'text-mode-hook 'turn-on-auto-capitalize-mode)
#+end_src

Now I use the captain mode


* COMMENT =org-timeline=
#+begin_src emacs-lisp
(use-package org-timeline
  :init
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))
#+end_src
