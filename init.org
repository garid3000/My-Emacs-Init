#+startup:      show2levels
#+title:        My Emacs Configuration
#+author:       Garid Z.
#+creator:      Garid Z.
#+email:        garidzorigoo@gmail.com
#+auto_tangle:  t
#+property:     header-args :tangle init.el
#+setupfile:    ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org
#+options:      toc:t tags:nil  todo:t  tasks:t
#+html_head:    <link rel="stylesheet" type="text/css" href="https://unpkg.com/chota"/>

#+begin_export html
<style>
  body.dark {
    --bg-color: #000;
    --bg-secondary-color: #131316;
    --font-color: #f5f5f5;
    --color-grey: #ccc;
    --color-darkGrey: #777;
  }
</style>
<script>
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    document.body.classList.add('dark');
  }
</script>
#+end_export

* From shell you can run make run:
#+begin_src makefile :eval no :tangle Makefile
# make run to extract init.el from init.org from shell
run:
	emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "init.org")'
	chmod +x 'garid/edit_img.sh'
	chmod +x 'garid/open_external_term.sh'
	git submodule foreach git pull origin master

refresh-packages:
	emacs --batch --eval "(setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\") (\"elpa\" . \"https://elpa.gnu.org/packages/\") (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")))" --eval "(package-refresh-contents)"
#+end_src

* Package manager:
** Package Repositories
I'm pulling packages from following 3 places (not sure that I need all three):

1. [[https://melpa.org/packages/]]
2. [[https://elpa.gnu.org/packages/]]
3. [[https://elpa.nongnu.org/nongnu/]]

#+begin_src emacs-lisp
;; Package repos
(setq package-archives
      '(("melpa"   . "https://melpa.org/packages/"     )
        ("elpa"    . "https://elpa.gnu.org/packages/"  )
        ("nongnu"  . "https://elpa.nongnu.org/nongnu/" )))
#+end_src

** Initialize use-package manager
#+begin_src emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)
#+end_src

** Straight.el initialization
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;;(straight-use-package 'org)
#+end_src

* Vi-movement and its friends
** =undo-tree=
undo-tree is Emacs's undo & redo helper with built-in tree graph of versions.

#+begin_src emacs-lisp
(use-package undo-tree
  :delight " udt"
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src

** =evil=: vi-movements
#+begin_src emacs-lisp
;; Vim Bindings
(use-package evil
  :ensure t
  ;; :bind (;; ("<escape>" . keyboard-escape-quit  )  commented on nov21
  ;;        ;; ("M-j"      . evil-scroll-line-down )  C-e
  ;;        ;; ("M-k"      . evil-scroll-line-up   )  C-y
  ;;        ;; ("M-d"      . evil-scroll-page-down )  G
  ;;        ;; ("M-u"      . evil-scroll-page-up   )  g g
  ;;        )
  :init
  (setq evil-want-keybinding     nil) ;;; should I put it in :init?

  :custom
  (evil-undo-system         'undo-tree)
  (evil-want-C-i-jump       t)
  ;; evil-want-C-i-jump     nil       ;; test I may need jumpy back and forth

  ;; not much related with evil but related to movement
  (scroll-step           1)
  (scroll-margin         7)
  (scroll-conservatively 9999)

  :config
  ;;(evil-define-key 'normal  org-mode-map   (kbd "TAB") #'org-cycle) ;; for org-cycle (tab) working for terminal
  (evil-define-key 'normal 'prog-mode-map  (kbd "K")   'eldoc)      ;; or 'eldoc-box-help-at-point
  (evil-mode 1))
#+end_src
** =evil-collection=: vi-movements everywhere
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src
** =evil-surround=: easily surround selected region
I sometimes use. It can wrap (visually) selected region with quotation mark or parenthesis.

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :hook
  (LaTeX-mode . (lambda ()  ;; adds to latex-mode-hook
                  (push '(40  . ("\\left("       . "\\right)"  )) evil-surround-pairs-alist)
                  (push '(123 . ("\\left\\{"     . "\\right\\}")) evil-surround-pairs-alist)
                  (push '(91  . ("\\left["       . "\\right]"  )) evil-surround-pairs-alist)
                  (push '(47  . ("\\frac{"       . "}{ }"      )) evil-surround-pairs-alist)
                  (push '(63  . ("\\frac{ }{"    . " }"        )) evil-surround-pairs-alist)
                  (push '(94  . ("{"             . "}^{ }"     )) evil-surround-pairs-alist)
                  (push '(98  . ("\\boxed{"      . "}"         )) evil-surround-pairs-alist)
                  (push '(95  . ("\\underbrace{" . "}_{ }"     )) evil-surround-pairs-alist)
                  (push '(45  . ("\\overbrace{"  . "}_{ }"     )) evil-surround-pairs-alist)
                  ))

  (org-mode . (lambda ()
                (push '(83  . ("#+begin_src"      . "#+end_src"     )) evil-surround-pairs-alist)
                (push '(69  . ("#+begin_example"  . "#+end_example" )) evil-surround-pairs-alist)
                (push '(101 . ("\\("              . "\\)"           )) evil-surround-pairs-alist)
                (push '(100 . (":drawername:"     . ":end:"         )) evil-surround-pairs-alist)
                ))
  :config
  (global-evil-surround-mode)
  )
#+end_src

** =evil-textobj-tree-sitter=: tree-sitter based visual selection:
#+begin_src emacs-lisp
(use-package evil-textobj-tree-sitter
  :ensure t
  :after evil
  :config
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer" ))
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner" ))
  (define-key evil-inner-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"    ))
  (define-key evil-outer-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"    ))
  (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))
#+end_src

* Theme & colors
** Fonts
#+begin_src emacs-lisp
(when (member "Iosevka" (font-family-list))
  (set-face-attribute 'default        nil :font "Iosevka" :height 120)
  (set-face-attribute 'fixed-pitch    nil :family "Iosevka"))

(when (member "Iosevka Term SS06" (font-family-list))
  (set-face-attribute 'default        nil :font "Iosevka Term SS06" :height 120)
  (set-face-attribute 'fixed-pitch    nil :family "Iosevka Term SS06"))

(when (member "Iosevka Aile" (font-family-list))
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile" :height 1.18))
#+end_src

** Theme
#+begin_src emacs-lisp :results none
(use-package uwu-theme
  :ensure t
  :config
  (enable-theme 'uwu)

  ;; not related with this theme itself but generally relates to generally
  (set-face-background   'mode-line          "#2B3260")
  (set-face-background   'mode-line-inactive "#2B3244")
  (scroll-bar-mode       -1)        ; Disable visible scrollbar
  (tool-bar-mode         -1)        ; Disable the toolbar
  (tooltip-mode          -1)        ; Disable tooltips
  (menu-bar-mode         -1)        ; Disable the menu bar
  (setq-default tab-width 4)
  ;; (set-fringe-mode 15)         ; Give some breathing room

  (setq-default indent-tabs-mode nil)
  ;; Align with spaces only
  (defadvice align-regexp (around align-regexp-with-spaces)
    "Never use tabs for alignment."
    (let ((indent-tabs-mode nil)) ad-do-it))
  (ad-activate 'align-regexp)
  )
#+end_src
** =delight=
#+begin_src emacs-lisp
(use-package delight
  :ensure t)
#+end_src

** =evil-terminal-cursor-changer=:
#+begin_src emacs-lisp :results none
(use-package evil-terminal-cursor-changer
  :ensure t
  :config (evil-terminal-cursor-changer-activate))
#+end_src

** =display-line-numbers=: displaying number
#+begin_src emacs-lisp
;; setting line
(use-package display-line-numbers
  :ensure t
  :custom
  (display-line-numbers-type 'relative)
  (visible-bell               nil) ;; too much distracting
  (ring-bell-function        'ignore)
  ;;(setq display-line-numbers-type 'relative)
  ;; (setq visible-bell t)
  :config
  (global-display-line-numbers-mode -1)
  (global-hl-line-mode               1)
  )
#+end_src

* Mini-buffer completion, selection, suggestion
** =vertico=
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ;; ("C-j" . vertico-next          ) ("M-j" . vertico-next        )
              ;; ("C-k" . vertico-previous      ) ("M-k" . vertico-previous    )
              ;; ("C-f" . vertico-exit          ) ("M-f" . vertico-exit        )
              ;; ("C-u" . vertico-scroll-up     ) ("M-u" . vertico-scroll-up   )
              ;; ("C-d" . vertico-scroll-down   ) ("M-d" . vertico-scroll-down )
              ("M-p" . vertico-previous      ) ("M-n" . vertico-next        )
              ("M-h" . vertico-exit          )
              ("M-q" . vertico-quick-insert  ) ("C-q" . vertico-quick-exit  ))
  :init
  (require 'vertico-quick)
  :custom
  (vertico-cycle     t  )
  (vertico-count     15 )
  (vertico-resize    nil)
  :config
  (vertico-mode))
#+end_src
** =marginalia=
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy
                           marginalia-annotators-light nil))
  :init (marginalia-mode))
#+end_src
** =consult=: consulting
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :custom
  (consult-preview-key nil)
  ;; (consult-preview-key 'any)
  ;;(consult-preview-key (list :debounce 0.5 'any))
  :config
  (defun garid/consult-preview-change ()
    (interactive)
    (setq consult-preview-key 'any)
    (let ((tmp-chose (completing-read "choose" '("nil" "any" "0.5sec"))))
      (when (string= "nil" tmp-chose)    (setq consult-preview-key nil))
      (when (string= "any" tmp-chose)    (setq consult-preview-key 'any))
      (when (string= "0.5sec" tmp-chose) (setq consult-preview-key (list :debounce 0.5 'any)))
      )

    )
  )
#+end_src
** =orderless=: orderless completion
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless flex))
  '((file (styles basic partial-completion))))

;;(completion-styles '(orderless basic))
;; (completion-category-overrides
#+end_src
** =embark=: interacting with completion entries
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind (("C-."    . embark-act                                     )
         ("M-."    . embark-dwim                                    )
         ("C-h B"  . embark-bindings                                )

         :map embark-general-map
         ("G"      . my/embark-google-search                        )
         ("t"      . garid/embark-org-insert-ref-of-tbl-fig-src-eq  )
         ("e"      . garid/embark-org-insert-ref-to-label-inside-eq ))

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config

  (defun garid/embark-org-insert-ref-of-tbl-fig-src-eq (x)
    (interactive "sSearch Term: ")
    (insert
     (format "[[%s]]"
             (nth 1 (split-string
                     (replace-regexp-in-string "[^[:alnum:-]]" "" x)
                     )))))

  (defun garid/embark-org-insert-ref-to-label-inside-eq (input-string)
    (interactive "sSearch Term: ")
    (insert
     (format "\\ref{%s}"
             (if (string-match "\\\\label{\\([^}]+\\)}" input-string)
                 (match-string 1 input-string)
               nil
               ))))
  )
#+end_src

** =savehist=:
#+begin_src emacs-lisp
(use-package savehist
  :ensure t
  :config (savehist-mode))
#+end_src
* Org
** =org=: org-mode configuration
#+caption: org config
#+name: lst_org
#+begin_src emacs-lisp :eval no
(use-package org
  ;;:straight (org
  ;;           :type git
  ;;           :brach "release_9.6.30"
  ;;           :repo "https://git.savannah.gnu.org/git/emacs/org-mode.git";;            :repo "misohena/el-easydraw"
  ;;          )
  ;;:demand
  :delight " org"
  :bind (:map
         org-mode-map
         ("C-S-j" . org-next-visible-heading     )
         ("C-S-k" . org-previous-visible-heading ))

  ;; :hook (org-mode . garid-custom/org-mode-hooked-func)
  :custom
  ;;(org-src-window-setup         'other-frame) ;; for new window (better for the the tiling window manager
  ;; theme/styling ...............................................................................
  (org-ellipsis                     " ▼"    )
  (org-hide-emphasis-markers         t      )
  (org-image-actual-width            '(800) )
  (org-startup-folded         "show2levels" ) ;; fold
  (org-src-fontify-natively          t      )
  (org-highlight-latex-and-related          '(latex entities native)       )

  ;; org-src
  (org-src-tab-acts-natively         t      )  ;; org-src
  (org-src-preserve-indentation      nil    )  ;; org-src
  (org-edit-src-content-indentation  0      )  ;; org-src

  ;; openning file links ..........................................................................
  (org-file-apps '((auto-mode                  . emacs                       )
                   ;; ("\\.html\\'"            . "brave   \"%s\""            )
                   ;; ("\\.html\\'"            . "thorium-browser   \"%s\""  )
                   ("\\.gif\\'"                . "mpv     \"%s\""            )
                   ("\\.mp4\\'"                . "mpv     \"%s\""            )
                   ("\\.png\\'"                . "sxiv    \"%s\""            )
                   ("\\.svg\\'"                . "inkview \"%s\""            )
                   ("\\.jpeg\\'"               . "sxiv    \"%s\""            )
                   ("\\.jpg\\'"                . "sxiv    \"%s\""            )
                   ("\\.pdf\\'"                . "sioyek  \"%s\""            )
                   ("\\.pdf::\\([0-9]+\\)?\\'" . "sioyek  \"%s\" --page %1"  )
                   ("\\.mkv\\'"                . "mpv     \"%s\""            )
                   ("\\.xopp\\'"               . "xournalpp \"%s\""          )))

  ;; todo and calendar like ....................................................................
  (org-todo-keywords      '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "PRJT(p)" "VAGUE(v)"
                                      "|"       "DONE(d)" "CNCL(c)")))

  (org-todo-keyword-faces '(("TODO"  . org-warning      )
                            ("PRJT"  . "tomato"         )
                            ("NEXT"  . "orange"         )
                            ("WAIT"  . "gold"           )
                            ("DONE"  . "dim gray"       )
                            ("VAGUE" . "medium purple"  )
                            ("CNCL"  . (:foreground "gray30" :weight bold))))

  (org-log-done              t)
  (org-tags-column         -90)   ;; how many spaces left padding for tags
  (org-tag-alist           '((:startgroup . nil)
                             ("@rsch" . ?r) ("@bps" . ?w) ("@home" . ?h)
                             (:endgroup . nil)
                             ("psm"  . ?p) ("4bc"   . ?4) ("idea"     . ?i)
                             ("lit"  . ?l) ("yak"   . ?y) ("tool"     . ?T)
                             ("tdbt" . ?t) ("rndm"  . ?R) ("meet"     . ?m)
                             ("qstn" . ??) ("prjt"  . ?P) ("msg/mail" . ?M)
                             ("Life" . ?L) ("write" . ?W) ("errand"   . ?e)
                             ("hkdn" . ?H) ("read" . ?R)
                             ))

  (org-structure-template-alist
   '(("ba" . "abstract")
     ("mk" . "src makefile :tangle no")
     ("sq" . "sqlite")
     ("py2" . "src python :session pySess2 :results output :exports both :eval no-export")
     ("py1" . "src python :session pySess1 :results output :exports both :eval no-export")
     ("py" . "src python")
     ("do1" . "src src dot :file (concat org-download-image-dir \"/tmp.svg\") :exports results :eval no-export")
     ("do" . "src dot")
     ("te" . "src text")
     ("sh" . "src sh :eval no-export :shebang \"#!/bin/sh\"")
     ("go1" . "src go :exports both :eval never-export")
     ("go" . "src go")
     ("el" . "src emacs-lisp")
     ("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("e" . "example")
     ("E" . "export")
     ("h" . "export html")
     ("l" . "export latex")
     ("q" . "quote")
     ("s" . "src")
     ("sage" . "src sage")
     ("sage1" . "src sage :session foo :results drawer :exports both :post equation_wrapper_equation_aligned(data=*this*)  :eval never-export")
     ("v" . "verse")
     ("ju" . "src jupyter-python :session juSess1 :async yes :eval never-export :exports both")
     ))
  :config
  (require 'org-tempo)
  (plist-put    org-format-latex-options   :scale 1.7      )    ;; latex equation previewing
  (add-to-list 'org-latex-packages-alist   '("" "listings" ))
  (add-to-list 'org-latex-packages-alist   '("" "color"    ))

  (org-babel-do-load-languages
   'org-babel-load-languages '((python     . t) (emacs-lisp . t)
                               (latex      . t) (shell      . t)
                               (dot        . t) (makefile   . t)
                               (sqlite     . t) (gnuplot    . t)
                               (nim        . t) (plantuml   . t)
                               (maxima     . t) (calc       . t)
                               (awk        . t) (go         . t)
                               (asymptote  . t) (ditaa      . t)
                               (nix        . t) (lua        . t)
                               (jupyter    . t)
                               ;; (asymptote  . t)
                               ))

  (font-lock-add-keywords 'org-mode
                          '(("\\(\\(?:\\\\\\(?:label\\|ref\\|eqref\\)\\)\\){\\(.+?\\)}"
                             (1 font-lock-keyword-face)
                             (2 font-lock-constant-face))))
  ;; image backgroud for transparent images
  (defcustom org-inline-image-background nil
    "The color used as the default background for inline images. When nil, use the default face background."
    :group 'org
    :type '(choice color (const nil)))

  (defun create-image-with-background-color (args)
    "Specify background color of Org-mode inline image through modify `ARGS'."
    (let* ((file (car args))
           (type (cadr args))
           (data-p (caddr args))
           (props (cdddr args)))
      ;; Get this return result style from `create-image'.
      (append (list file type data-p)
              (list :background (or org-inline-image-background (face-background 'default)))
              props)))

  (advice-add 'create-image :filter-args
              #'create-image-with-background-color)

  (setq org-inline-image-background "white")


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; setting latex preview
  (setq org-preview-latex-default-process 'imagemagick)
  (setf (plist-get (cdr (assq 'imagemagick org-preview-latex-process-alist)) :latex-compiler)
        '("xelatex -interaction nonstopmode -output-directory %o %f"))
  )
#+end_src
** =org-attach=
#+begin_src emacs-lisp
(use-package org-attach
  :after org
  :ensure nil
  :custom
  (org-id-method                       'ts)
  (org-attach-id-to-path-function-list '(my/org-attach-dir-calculator
                                          org-attach-id-ts-folder-format
                                          org-attach-id-uuid-folder-format))
  :config
  (defun my/org-attach-dir-calculator (id)
    "id"
    (and (< 9 (length id))
         (buffer-file-name)
         (format "%s/subtree_id_%s"
                 (car                     ;; 4. "20241002T190027"
                  (split-string           ;; 3. ( "20241002T190027"  "denote-getting-id-of-current-file__elisp_org" )
                   (file-name-base        ;; 2. "20241002T190027--denote-getting-id-of-current-file__elisp_org.org"
                    (buffer-file-name))   ;; 1. "/home/garid/BrainDump/denote/20241002T190027--denote-getting-id-of-current-file__elisp_org.org"
                   "--"))                 ;;     3. split-string related
                 id)))


  (defun my/org-attach-dir (input-fname)
    ""
    (concat
     "data/"
     (file-name-as-directory
      (my/org-attach-dir-calculator (org-id-get-create)))
     input-fname))

  ;; (setq org-id-method 'ts)
  ;; (setq org-attach-id-to-path-function-list
  ;;       '(my/org-attach-dir-calculator
  ;;         org-attach-id-ts-folder-format
  ;;         org-attach-id-uuid-folder-format))
  )
#+end_src

** org-babel languages related
#+begin_src emacs-lisp
(use-package plantuml-mode)
(use-package ob-plantuml
  :ensure nil
  :after (org plantuml-mode)
  :config
  ;;(org-plantuml-jar-path        "/home/garid/.config/emacs/plantuml.jar" )
  (setq org-plantuml-executable-path "plantuml")
  (setq org-plantuml-exec-mode 'plantuml))

(use-package ob-nim       :after org)
(use-package ob-go        :after org)
(use-package ob-asymptote :after org)
(use-package ob-nix       :after org)
(use-package jupyter ;; which contains org-babel jupyter
  :config
  ;; following is from  https://github.com/emacs-jupyter/jupyter/issues/366
  ;; the key issue was that, org-bullets or org-superstar
  ;; conflicting with the result of the jupyter output making
  ;; the jupyter output's rendering unreadable hex codes instead of colored text
  (defun display-ansi-colors ()
    (ansi-color-apply-on-region (point-min) (point-max)))
  (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

  )
#+end_src

** =ob-sagemath=
#+begin_src emacs-lisp
(use-package ob-sagemath
  :ensure t
  :after org
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages '((python     . t) (emacs-lisp . t)
                               (latex      . t) (shell      . t)
                               (dot        . t) (makefile   . t)
                               (sqlite     . t) (gnuplot    . t)
                               (nim        . t) (plantuml   . t)
                               (maxima     . t) (calc       . t)
                               (awk        . t) (go         . t)
                               (asymptote  . t) (ditaa      . t)
                               (nix        . t) (lua        . t)
                               (sagemath  . t)))


  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
                                             (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  ;;(with-eval-after-load "org"
  ;;  (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))
  ;;
  ;; Do not confirm before evaluation
  ;;(setq org-confirm-babel-evaluate nil)

  ;; Do not evaluate code blocks when exporting.
  ;;(setq org-export-babel-evaluate nil)

  ;; Show images when opening a file.
  ;;(setq org-startup-with-inline-images t)

  ;; Show images after evaluating code blocks.
  ;;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  )
#+end_src

** =org-bullet=: changing bullets in org file
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :after  org
  :hook   (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list
           '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ")))
#+end_src

** org-tidy
#+begin_src emacs-lisp
(use-package org-tidy :ensure t)
#+end_src
* Org zettelkasten notes
** =denote=: Note taking package
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :custom
  (denote-journal-extras-title-format 'day)
  (denote-excluded-directories-regexp  ".*export_.*\\|.*website.*")
  (denote-directory                    "~/BrainDump/denote")
  (denote-known-keywords               '("phd"  "code"  "python"))
  (denote-templates                    '((biblio . "* Abstract\n\n* Review")
                                         (plain  . nil)))

  :config
  (defun garid-custom/denote-node-insert-immediate(start end)
    ;; create emtpy denote note on the regions
    (interactive "r")
    (let* ((tmp-str-marked              (string-trim (buffer-substring start end) ))
           (tmp-cur-time-of-this-note  (current-time)))
      (delete-region start end)
      (denote tmp-str-marked '("future") nil "tmp"
              (format-time-string "%Y-%m-%d %H:%M:%S" tmp-cur-time-of-this-note))

      (save-buffer)
      (kill-buffer)

      (insert (format "[[denote:%s][%s]]"
                      (format-time-string "%Y%m%dT%H%M%S" tmp-cur-time-of-this-note)
                      tmp-str-marked
                      ))
      ))

  )
#+end_src

** =consult-denote=: consulting with denote
#+begin_src emacs-lisp
(use-package consult-denote
  :ensure t
  ;; :custom
  ;; (consult-denote-silo-source '("/home/garid/BrainDump/denote"
  ;;                               "/home/garid/BrainDump/silo-linguistic"
  ;;                               "/home/garid/BrainDump/silo-research"
  ;;                               "/home/garid/BrainDump/silo-work"))
  :config
  (consult-denote-mode 1))
#+end_src
** =citar=: citation
#+begin_src emacs-lisp
(use-package citar
  :after org
  :no-require
  :custom
  (org-cite-global-bibliography (list (concat (file-name-as-directory denote-directory)
                                              "20220101T010101--references__study.bib")))
  (org-cite-insert-processor    'citar                        )
  (org-cite-follow-processor    'citar                        )
  (org-cite-activate-processor  'citar                        )
  (citar-bibliography            org-cite-global-bibliography )
  (bibtex-dialect               'biblatex                     )
  (citar-library-paths           (list (concat (file-name-as-directory denote-directory) "lit/")) )
  (citar-file-open-functions '(("html" . citar-file-open-external)
                               ("pdf" . garid/ask-pdf-openner)
                               (t . find-file)))
  :hook
  (org-mode   . citar-capf-setup)
  (LaTeX-mode . citar-capf-setup)
  :config
  (defun garid/ask-pdf-openner (file)
    (interactive)
    (call-process (completing-read "Application"
                                   '("sioyek" "okular" "xournalpp"))
                  nil 0 nil
                  file)
    ))
#+end_src
** COMMENT =citar-denote=: citation in denote
#+begin_src emacs-lisp
;;(use-package citar-denote
;;  :ensure t
;;  :demand t ;; Ensure minor mode loads
;;  :after (:any citar denote)
;;  :custom
;;  ;; Package defaults
;;  (citar-denote-file-type             'org                )
;;  (citar-denote-keyword               "bib"               )
;;  (citar-denote-signature             nil                 )
;;  ;;(citar-denote-subdir              nil                 )
;;  (citar-denote-subdir                "litnotes"          )  ;; usefull
;;  (citar-denote-template              'biblio             )  ;; 'biblio is defined at denote
;;  (citar-denote-title-format          "author-year-title" )
;;  (citar-denote-title-format-andstr   "and"               )
;;  (citar-denote-title-format-authors  1                   )
;;  (citar-denote-use-bib-keywords      nil                 )
;;  :preface
;;  (bind-key "C-c w n" #'citar-denote-open-note)
;;  :init
;;  (citar-denote-mode)
;;  ;; Bind all available commands
;;  :bind (("C-c w d" . citar-denote-dwim                 )
;;         ("C-c w e" . citar-denote-open-reference-entry )
;;         ("C-c w a" . citar-denote-add-citekey          )
;;         ("C-c w k" . citar-denote-remove-citekey       )
;;         ("C-c w r" . citar-denote-find-reference       )
;;         ("C-c w l" . citar-denote-link-reference       )
;;         ("C-c w f" . citar-denote-find-citation        )
;;         ("C-c w x" . citar-denote-nocite               )
;;         ("C-c w y" . citar-denote-cite-nocite          )
;;         ("C-c w z" . citar-denote-nobib                )))
#+end_src
** =org-roam=
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :ensure t
  :custom
  (org-roam-node-display-template (concat "${title:100} "
                                          (propertize "${tags:50}"
                                                      'face 'org-tag)))

  (org-roam-v2-ack                   t                 )
  (org-roam-directory                "~/BrainDump/roam_research")
  (org-roam-db-location              "~/BrainDump/roam_research/0000_database.db")

  (org-roam-completion-everywhere    nil               ) ;;  do I need this?
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "g_journal/%<%Y%m%dT%H%M%S>--${slug}.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title: %<%Y-%m-%d>\n"
                                  "#+auto_tangle: nil\n"
                                  "#+startup: show2levels\n"
                                  "#+filetags: :nohtmlexport:\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n")))
     ))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%dT%H%M%S>--${slug}.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title:    ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+date:     %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n"))
      :unnarrowed t)
     ("r" "Research" plain "* %?"
      :if-new (file+head "g_research/%<%Y%m%dT%H%M%S>--${slug}__rsch.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title:    ${title}\n"
                                  "#+filetags: :rsch:\n"
                                  "#+date:     %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "g_kanji/%<%Y%m%dT%H%M%S>--${slug}.org"
                         ,(concat ":PROPERTIES:\n"
                                  ":ID: %<%Y%m%dT%H%M%S>\n"
                                  ":END:\n"
                                  "#+title:     ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+date:      %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-html-export-template.org\n"
                                  ))
      :unnarrowed t)
     ))

  :config
  ;;(org-roam-setup)
  ;;(org-roam-db-autosync-mode)
  (org-roam-db-autosync-enable) ;;(require 'org-roam-dailies)


  ;; Change the slug (aka filename to be same format as from denote)
  ;; https://github.com/org-roam/org-roam/pull/1544#issuecomment-2211801343
  (cl-defmethod org-roam-node-slug :around ((node org-roam-node))
    (string-replace "_" "-" (cl-call-next-method)))


  (defun garid-custom/org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates
	       (list (append (car org-roam-capture-templates)
		                 '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)
      ))


  )
#+end_src

** =org-roam-ui=: graphing of org-roam in web browser
#+begin_src emacs-lisp
(use-package org-roam-ui :ensure t)
#+end_src

** =consult-org-roam=
#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize consult-org-roam-forward-links :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search)
   )
#+end_src

** =citar-org-roam=
#+begin_src emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir                      "g_paper")
  (citar-org-roam-note-title-template (concat "${=key=}\n"
                                              "#+subtitle: ${=type=}: ${title}\n"
                                              "#+author:   author(s): ${author}\n"
                                              "#+filetags: :paper:\n\n"
                                              "[cite:@${=key=}]\n\n"
                                              "* Notes\n\n"
                                              ))
  :config
  (citar-org-roam-mode))

#+end_src

** =org-node= helper with org-id
#+begin_src emacs-lisp
(use-package org-node)
#+end_src

** Choosing roam directory                                                    :customFunc:
#+begin_src emacs-lisp 
(defun garid/choose-roam-directory ()
  ""
  (interactive)
  (setq org-roam-directory
        (completing-read "Choose: "
                         (mapcar
                          (lambda (xx) (f-join "/home/garid/BrainDump/" xx)) ;; re-apply root dir
                          (seq-filter                                               
                           (lambda (x) (string-match "roam.*" x))         ;; filter only starting with roam
                           (directory-files "/home/garid/BrainDump/")))   ;; list sub dirs
                         ))

  (setq org-roam-db-location
        (f-join org-roam-directory "0000_database.db" ))

  (message "Now org-roam-directory = %s" org-roam-directory)
  (if (string= "yes"
               (completing-read "Update DB: " '("no" "yes")))
      (org-roam-db-sync)
    ))
#+end_src

* Org Time managements
** =calendar=
#+begin_src emacs-lisp
(use-package calendar
  :ensure nil
  :custom
  (calendar-week-start-day 1))
#+end_src
** =org-agenda=: the agenda
#+begin_src emacs-lisp :results none
(use-package org-agenda
  :after    org
  :ensure   nil
  :custom
  (org-agenda-files '("~/BrainDump/gtd/main.org"))
  (org-agenda-span   90)
  (org-agenda-custom-commands
   '(("i" "Inbox"                tags-todo "+TODO=\"VAGUE\"" ((org-agenda-files (file-expand-wildcards "~/BrainDump/gtd/inbox.org"))))
     ("n" "Next actions"         tags-todo "+TODO=\"TODO\"")
     ("p" "Projects"             tags-todo "+TODO=\"PRJT\"")
     ("w" "Waiting"              tags-todo "+TODO=\"WAIT\"")
     ("s" "Someday"              tags-todo "+TODO=\"TODO\"|TODO=\"PRJT\"" ((org-agenda-files (file-expand-wildcards "~/BrainDump/gtd/someday.org"))))
     ("o" "Actions and Projects" tags-todo "+TODO=\"TODO\"|TODO=\"PRJT\"")))

  (org-agenda-prefix-format '((agenda   . "  %-25:c%?-12t% s" )
                              (timeline . "  % s"             )
                              (todo     . "  %-12:c"          )
                              (tags     . "  %-25:c"          )
                              (search   . "  %-12:c"          )))

  ;;(org-agenda-tags-column -120)
  ;;(org-agenda-tags-column -90)
  (org-agenda-tags-column 'auto)
  (org-agenda-sorting-strategy '((agenda habit-down time-up priority-down category-keep)
                                 (todo priority-down todo-state-up category-keep)
                                 (tags priority-down todo-state-up category-keep)
                                 (search category-keep)))

  ;; M-x org-agenda # to show the stuck projects
  (org-stuck-projects '("+TODO=\"PRJT\"" ("TODO") nil "") )

  (org-refile-use-outline-path             'file)
  (org-outline-path-complete-in-steps      'nil)

  ;; (refile-targets                          (file-expand-wildcards "~/BrainDump/gtd/*.org"))
  ;; (org-refile-targets '(( refile-targets :todo . "PRJT" )))
  (org-refile-targets '( (nil :maxlevel . 6) ;; aka the current file
                         ("~/BrainDump/gtd/main.org"      :maxlevel . 3)
                         ("~/BrainDump/gtd/someday.org"   :level    . 1)
                         ("~/BrainDump/gtd/reference.org" :maxlevel . 1)))


  (org-capture-templates
   '(("i" "Inbox"      entry (file          "~/BrainDump/gtd/inbox.org"           )  "* VAGUE %?\nAdded: %U\n"                                          :empty-lines 1 :prepend t)
     ("I" "Inbox from" entry (file          "~/BrainDump/gtd/inbox.org"           )  "* VAGUE %?\nAdded: %U\nFrom: %a"                                  :empty-lines 1 :prepend t)
     ("n" "Next"       entry (file+headline "~/BrainDump/gtd/main.org"    "Single")  "** NEXT  %?\nAdded: %U\n"                                         :empty-lines 1 :prepend t)
     ("p" "Project"    entry (file+headline "~/BrainDump/gtd/main.org"    "Project")  "* PRJT  %?\n:PROPERTIES:\n:CATEGORY: %^{Id}\n:END:\nAdded: %U\n" :empty-lines 1 :prepend t)
     ("s" "Someday"    entry (file+headline "~/BrainDump/gtd/someday.org" "Someday")  "* TODO  %?\nAdded: %U\n"                                         :empty-lines 1 :prepend t)
     ))

  :config
  (add-hook 'org-agenda-finalize-hook (lambda () (org-agenda-write "/tmp/current-agenda-text")))
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
  )
#+end_src
** =casual-agenda=: casual agenda based on transient
#+begin_src emacs-lisp
(use-package casual-suite
  :ensure t
  :after org-agenda
  :bind (:map org-agenda-mode-map
         ("<f7>" . casual-agenda-tmenu))
  )
#+end_src
** =org-timeblock=: agenda to SVG
#+begin_src emacs-lisp
(use-package org-timeblock :after org)
#+end_src
* Org Exporting related
** =ox=
ref: [[https://emacs.stackexchange.com/a/7989/38482][this answer on emacs-stackexchange]]

#+begin_src emacs-lisp
(use-package ox
  :ensure nil
  :after org
  :config
  (defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

  (defadvice org-export-output-file-name (before org-add-export-dir activate)
    "Modifies org-export to place exported files in a different directory"
    (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
        (progn
          (make-directory pub-dir)
          (make-symbolic-link "../data" (concat (file-name-as-directory pub-dir) "data")))
        )))
  )
#+end_src

** =latex=
#+begin_src emacs-lisp
(use-package latex
  :ensure nil
  ;; :config
  ;;(add-hook 'LaTeX-mode-hook (function (lambda() (set-input-method "TeQ-Math"))))
  ;;(add-hook 'latex-mode-hook (function (lambda() (set-input-method "TeQ-Math"))))
  )
#+end_src

** Latex related
#+begin_src emacs-lisp
(use-package auctex)
(use-package cdlatex)
#+end_src
** =ox-latex=
#+begin_src emacs-lisp
(use-package ox-latex
  :ensure nil
  :after org
  :custom
  (org-latex-src-block-backend              'listings                                             )
  (org-latex-format-headline-function       'garid-custom/latex-formattig-headings                )
  (org-latex-active-timestamp-format         "\\textcolor{Brown}{%s}"                             )
  (org-latex-inactive-timestamp-format       "\\textcolor{Brown}{%s}"                             )
  (org-latex-pdf-process
   '("latexmk -shell-escape -f -xelatex -%latex -interaction=nonstopmode -output-directory=%o %f" ))
  ;; -output-driver=\"xdvipdfmx -z 0\"
  ;;'("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f" ))
  ;; (org-highlight-latex-and-related     '(latex script entities))
  ;; (org-highlight-latex-and-related      nil)
  :config
  (add-to-list 'org-latex-classes '("extarticle" "\\documentclass{extarticle}"
                                    ("\\section{%s}"       . "\\section*{%s}")
                                    ("\\subsection{%s}"    . "\\subsection*{%s}")
                                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                    ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                                    ("\\subparagraph{%s}"  . "\\subparagraph*{%s}")))

  ;; function -------------------------------------------------------------------------------------
  (defun garid-custom/latex-formattig-headings
      (todo todo-type priority text tags _info)
    "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
    (concat
     (and todo
          (format "{\\framebox{\\bfseries\\color{%s} %s}} "
                  (pcase todo-type
                    ('todo "olive") ('done "teal")
                    ;;('todo "Black") ('done "Brown")
                    )
                  todo))
     (and priority (format "\\framebox{\\#%c} " priority)) text
     (and tags
          (format "\\hfill{}\\textsc{%s}"
                  (mapconcat #'org-latex--protect-text tags ":")))))
  )
#+end_src

** =ox-html=
#+begin_src emacs-lisp
(use-package ox-html
  :ensure nil
  :after org
  :custom
  ;; (org-html-validation-link              nil) ;; Don't show validation link
  ;; (org-html-head-include-scripts         nil) ;; Use our own scripts
  ;; (org-html-head-include-default-style   nil) ;; Use our own styles
  ;; (org-html-head  "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/chota\"/>")
  ;; (org-html-head  "<link rel=\"stylesheet\" type=\"text/css\" href=\"/tmp/chota.css\"/>")
  ;; org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
  (org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg.css\"/>" )
  )
#+end_src

** =ox-publish=

*** Helper publisher function
#+begin_src emacs-lisp
(defun garid/publish-to-epnet-via-rsync (tmp)
  ""
  (interactive)
  (call-process-shell-command "notify-send \"ox-phd-publish\" \"HTML export finished\"")
  (f-write (concat "AuthType Basic\n"
                   "AuthName The-T-Directory\n"
                   "AuthUserFile /home/zgarid/.users\n"
                   "<Limit GET POST >\n"
                   "require user zgarid\n"
                   "</Limit>\n")
           'utf-8
           "~/BrainDump/denote/phd/website/.htaccess")

  (call-process-shell-command
   "rsync --recursive --delete  --copy-links --verbose ~/BrainDump/denote/phd/website/ zgarid@www.ep.sci.hokudai.ac.jp:public_html/phd"
   )

  (call-process-shell-command "notify-send \"ox-phd-publish\" \"Published-on-epnet\"")
  )
#+end_src

*** Helper to create stork db
I publish first from org to md in the local dir. Then using that local dir to create stork db.

#+begin_src emacs-lisp
(defun garid/get-title-of-denote-filepath-trimmed-org (x)
  (string-trim
   (string-trim-left
    (denote-retrieve-front-matter-title-line x 'org)
    (regexp-quote "#+title:"))))


(defun garid/get-md-converted-path-from-org-path (path)
  ""
  (replace-regexp-in-string
   (regexp-quote ".org")                    ;; replace the extension
   ".md"
   (replace-regexp-in-string
    (regexp-quote "/home/garid/BrainDump/denote/phd/") ;; replace the dir
    "/home/garid/BrainDump/denote/phd/website-md/"
    path nil 'literal)
   nil 'literal))

(defun garid/get-html-url-from-org-path (path)
  ""
  (replace-regexp-in-string
   (regexp-quote ".org")                    ;; replace the extension
   ".html"
   (replace-regexp-in-string
    (regexp-quote "/home/garid/BrainDump/denote/phd/") ;; replace the dir
    ""
    path nil 'literal)
   nil 'literal))

(defun garid/prepare-stork-toml ()
  ""
  (concat
   ;; pre header
   "[input]\n"
   ;;"base_directory = \"/home/garid/BrainDump/denote/phd/website-md/\"\n"
   "base_directory = \"\"\n"
   "url_prefix = \"https://www.ep.sci.hokudai.ac.jp/~zgarid/phd/\"\n"
   "files = [\n"

   ;; main contents
   (mapconcat
    (lambda (x)
      (format
       "{path=\"%s\", url = \"%s\", title = \"%s\"},\n"
       (garid/get-md-converted-path-from-org-path      x)
       (garid/get-html-url-from-org-path               x)
       (garid/get-title-of-denote-filepath-trimmed-org x)
       )
      )

    (directory-files-recursively "/home/garid/BrainDump/denote/phd/"           ;; 0.list of files
                                 ".*.org$")
    )

   ;; ending
   "]\n"))

(defun garid/re-create-stork-db-from-md-exports (x) ;; completion-function requires arguemtns, so a x arguemtns that won't used
  (interactive)
  (f-write (garid/prepare-stork-toml)
           'utf-8
           "/tmp/stork-from-emacs.toml")

  (call-process-shell-command "notify-send \"stork\" \"toml created /tmp/stork-from-emacs.toml\"")
  (call-process-shell-command "stork build --input /tmp/stork-from-emacs.toml --output /home/garid/BrainDump/denote/phd/website/stork-db.st")
  (call-process-shell-command "notify-send \"stork\" \"stork-db.st re-created\n/home/garid/BrainDump/denote/phd/website/stork-db.st\"")
  )



#+end_src

*** Helper to create better navbar
#+begin_src emacs-lisp
(garid/get-html-url-from-org-path (denote-get-path-by-id "20240814T122254"))
#+end_src

#+RESULTS:
: 20240814T122254--70-acknowledgements__future.html

*** Actual conf
#+begin_src emacs-lisp :exports code :results verbatim
(use-package ox-publish
  :ensure nil
  :after org
  :custom
  (org-publish-project-alist
   `(("denote: org -> html"
      :base-directory ,(denote-directory)
      :recursive t
      :publishing-function   org-html-publish-to-html
      :publishing-directory ,(concat (denote-directory) "website")
      :exclude ".*daily/.*org"  ;;; for excluding -daily
      ;; :section-numbers nil
      :section-numbers  org-export-with-section-numbers
      :with-toc         t
      :html_link_home  "index.html"
      ;;                                 :html-preamble "<div id=\"navbar\"> <ul>
      ;;   <div class=\"stork-wrapper\">
      ;;     <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
      ;;     <a href=\"..\">Up/Back</a>                           &nbsp;
      ;;     <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
      ;;     <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
      ;;     <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
      ;;     <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
      ;;     <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
      ;;     <input data-stork=\"federalist\" class=\"stork-input\" />
      ;;     <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
      ;;   </div>
      ;; </ul>
      ;; <hr>
      ;; </div>
      ;; <script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
      ;; <script>
      ;; stork.register(
      ;;     'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
      ;; )
      ;; </script>
      ;; "
      )
     ("phd-website"
      :base-directory ,(concat (denote-directory) "phd")
      :recursive t
      :publishing-function   org-html-publish-to-html
      :publishing-directory ,(concat (denote-directory) "phd" "/website")
      :exclude ".*daily/.*org"
      :completion-function garid/publish-to-epnet-via-rsync
      :section-numbers     org-export-with-section-numbers
      :with-toc         t
      :html_link_home  "index.html"
      :html-preamble ,(concat
                       "<div id=\"navbar\"> <ul>"
                       "<div class=\"stork-wrapper\">"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T014358")) "\"> Info </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20240814T113502")) "\"> Home </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T130751")) "\"> 1.Introduction </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133612")) "\"> 2.Developments </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133644")) "\"> 3.Methods </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133718")) "\"> 4.Results </a> &nbsp;"
                       "<a href=\"/~zgarid/phd/" (garid/get-html-url-from-org-path (denote-get-path-by-id "20241109T133803")) "\"> 5.Discussion </a> &nbsp;"
                       "<a href=\"/~zgarid/search.html\">Search</a>          &nbsp;"
                       "<input data-stork=\"federalist\" class=\"stork-input\" />"
                       "<div data-stork=\"federalist-output\" class=\"stork-output\"></div>"
                       "</div>"
                       "</ul>"
                       "<hr>"
                       "</div>"
                       "<script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>"
                       "<script>"
                       "stork.register('federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/phd/stork-db.st')"
                       "</script>"
                       "<link"
                       "  rel=\"stylesheet\""
                       "  href=\"https://files.stork-search.net/releases/v1.6.0/basic.css\""
                       "/>"
                       )
      )

     ("phd-2-md"
      :base-directory ,(concat (denote-directory) "phd")
      :recursive t
      :publishing-function  org-md-publish-to-md
      :publishing-directory ,(concat (denote-directory) "phd" "/website-md")
      :exclude ".*daily/.*org"
      :section-numbers     org-export-with-section-numbers
      :completion-function garid/re-create-stork-db-from-md-exports
      )


     ;; good but doesn't expot caption
     ;; ("phd-2-text"
     ;;  :base-directory ,(concat (denote-directory) "phd")
     ;;  :recursive t
     ;;  :publishing-function  org-ascii-publish-to-ascii
     ;;  :publishing-directory ,(concat (denote-directory) "phd" "/website-text")
     ;;  :exclude ".*daily/.*org"
     ;;  :section-numbers     org-export-with-section-numbers
     ;;  )


     )))
#+end_src

** =htmlize= - source code syntax in html export
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t
  :config
  (add-hook 'htmlize-before-hook (lambda () (indent-bars-mode -1))))
#+end_src
** =ox-reveal=
#+begin_src emacs-lisp
(use-package ox-reveal
  :after org
  :ensure t)
#+end_src
* Org Misc:
** =org-download= package itself
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :after org
  :custom
  (org-download-display-inline-images  nil)
  (org-download-edit-cmd (concat user-emacs-directory "garid/edit_img.sh %s"))
  (org-download-heading-lvl nil)                                                                            ;;
  ;;:hook ((org-mode . my-org-download-set-dir))

  :config
  (org-download-enable))
#+end_src

** org-download editing shell script                                        :shell_script:
#+begin_src shell :tangle garid/edit_img.sh :shebang "#!/bin/sh"
file=$(readlink -f "$1")
ext="${file##*.}"

# create empty file if the file doesn't exist
if [ ! -f "$file" ]; then
    convert -size 480x320 xc:white "$file";
    echo "created new $file"
fi

# open image-editor based on the file's extension
case "$ext" in
	jpeg) gimp      "$file" ;;
	jpg)  gimp      "$file" ;;
	png)  gimp      "$file" ;;
	svg)  inkscape  "$file" ;;
	xopp) xournalpp "$file" ;;
esac
#+end_src

** =org-ipe=
#+begin_src emacs-lisp
(use-package org-ipe
  :straight (org-ipe
             :type git
             :host github
             :brach "master"
             :repo "Stefanomarton/org-ipe"))
#+end_src

** =org-auto-tangle=
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :defer  t
  :after org
  :delight " oat"
  :custom (org-auto-tangle-default    nil)
  :hook (org-mode . org-auto-tangle-mode)
  )
#+end_src

** =org-transclusion=
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :after org
  :bind (:map org-mode-map
              ("<f12>"   . org-transclusion-add     )
              ("M-<f12>" . org-transclusion-add-all )
              ("<f11>"   . org-transclusion-mode    )))
#+end_src

** =org-contacts=
#+begin_src emacs-lisp
(use-package org-contacts
  :ensure t
  :after (org denote)
  :custom
  (org-contacts-files '("~/BrainDump/denote/20240802T185223--contacts__info.org")))
#+end_src
* Programming languages
** =python=
#+begin_src emacs-lisp
(use-package python
  :ensure nil
  :config
  (defun garid/nix-shel-python-path-reload ()
    ""
    (interactive)
    (if (file-exists-p "/tmp/current-nix-shell-python-path")
        (progn
          (setq python-shell-exec-path
                (list (string-trim (f-read "/tmp/current-nix-shell-python-path"))))
          (message "python-path: updated to %s" (car python-shell-exec-path)))

      (message "/tmp/current-nix-shell-python-path doesn't exist."))))
#+end_src
** =graphviz-dot-mode=
#+begin_src emacs-lisp
(use-package graphviz-dot-mode :ensure t)
#+end_src

** =scad-mode=
#+begin_src emacs-lisp
(use-package scad-mode :ensure t)
#+end_src

** =lua-mode=
#+begin_src emacs-lisp
(use-package lua-mode :ensure t)
#+end_src

** =json-mode=
#+begin_src emacs-lisp
(use-package json-mode :ensure t)
#+end_src
** =nix-ts-mode=
#+begin_src emacs-lisp
(use-package nix-ts-mode :ensure t)
#+end_src
* Coding input
** =tempel=: snippet system
#+begin_src emacs-lisp
(use-package tempel
  :ensure t
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")
  :bind (("M-8" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))

  :init
  (setq tempel-path "~/.config/emacs/tempel/templates.eld")

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)
  )
#+end_src

#+begin_src emacs-lisp
(defun gry/choose-from-list-and-insert-it (asdf)
  (interactive)
  (insert (let ((choices asdf))
    (completing-read "Choose: " choices))))


(defun gry/choose-from-list-and-return-it (asdf)
  (interactive)
  (let ((choices asdf))
    (completing-read "Choose: " choices)))
#+end_src

** =elec-pair=: auto parenthesis pair
#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :custom
  (electric-pair-inhibit-predicate
   (lambda (c)
     (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))

  :config
  (electric-pair-mode 1))
#+end_src

* Coding output
** Tree-sitter
from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][mastering emacs article]].
#+begin_src emacs-lisp
(setq major-mode-remap-alist
      '((bash-mode   . bash-ts-mode)
        (python-mode . python-ts-mode)))

(setf (alist-get "python" org-src-lang-modes nil nil #'equal) 'python-ts)
#+end_src
** =indent-bars=
#+begin_src emacs-lisp
(use-package indent-bars
  ;;:load-path "~/code/emacs/indent-bars"
  :ensure t
  :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :custom
  (indent-bars-treesit-support   t)
  (indent-bars-no-descend-string nil)
  (indent-bars-prefer-character  "|")
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
				      list list_comprehension
				      dictionary dictionary_comprehension
				      parenthesized_expression subscript)))
  ;;:hook ((python-base-mode yaml-mode) . indent-bars-mode)
  ;;:hook ((python-base-mode yaml-mode) . indent-bars--ts-mode)
  )
#+end_src
* Coding lsp & jumping around
** =eglot=: lsp
#+begin_src emacs-lisp
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs '(nix-ts-mode . ("nil"))))
#+end_src
** =consult-eglot=: consulting with lsp
#+begin_src emacs-lisp
(use-package consult-eglot :ensure t)
#+end_src
** =eglot-booster=: faster eglot
#+begin_src emacs-lisp
(use-package eglot-booster
  :ensure t
  :straight (eglot-booster
             :type git
             :host github
             :repo "jdtsmith/eglot-booster")
  :config
  (eglot-booster-mode +1)
  )
#+end_src

** =corfu=: completion
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :ensure t
  :custom
  (corfu-cycle            t          ) ;; Allows cycling through candidates
  ;; (corfu-auto             t          ) ;; Enable auto completion nov23 C-M-i?
  ;; (corfu-auto-prefix      2          )
  ;; (corfu-auto-delay       0.1        )
  (corfu-popupinfo-delay '(0.8 . 0.2))
  (corfu-preview-current   nil       )
  (corfu-on-exact-match    nil       ) ;; Don't auto expand tempel snippets

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator )
              ("TAB"        . corfu-insert           )
              ([tab]        . corfu-insert           )
              ;;("S-TAB"     . corfu-previous        )
              ;; ("M-k"        . corfu-previous      )
              ;; ("M-j"        . corfu-next          )
              ("S-<return>" . corfu-insert           )
              ("M-h"        . corfu-insert           )
              ("RET"        . nil                    ))

  :init
  (setq tab-always-indent 'complete)
  ;;:config
  (global-corfu-mode    )
  (corfu-history-mode   )
  (corfu-popupinfo-mode )

  :hook
  (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t
        			             corfu-quit-no-match t
        			             corfu-auto nil)
                        (corfu-mode)))
  )
#+end_src
** =cape=: completion at point extensions
#+begin_src emacs-lisp
(use-package cape
  ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
  ;; Press C-c p ? to for help.
  :ensure t
  :bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
  ;; Alternatively bind Cape commands individually.
  ;; :bind (("C-c p d" . cape-dabbrev)
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ...)
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  ;; (add-hook 'completion-at-point-functions #'cape-elisp-block)
  (add-hook 'completion-at-point-functions #'cape-history)
)
#+end_src

** =abbrev=
#+begin_src emacs-lisp
(use-package abbrev
  :delight " abb"
  :defer 1
  :ensure nil
  ;;:custom
  ;;(abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))

  ;;(abbrev-mode 1)
  (setq-default abbrev-mode t)
  )
#+end_src
** =fancy-dabbrev=
#+begin_src emacs-lisp
(use-package fancy-dabbrev
  :delight " fda"
  :ensure t
  :config (global-fancy-dabbrev-mode))
#+end_src

* Coding convenient
** =rg=: ripgrep in Emacs
Probably requires external =rg= command.

#+begin_src emacs-lisp
(use-package rg
  :ensure t)
#+end_src

** =magit=: git control
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

** =git-gutter=: git diff shows on the side
Similar to vim-signify.
#+begin_src emacs-lisp
(use-package git-gutter
  :delight  " git"
  :ensure t
  :config (global-git-gutter-mode))
#+end_src

** =harpoon=
#+begin_src emacs-lisp
(use-package harpoon
  :ensure t)
#+end_src

* Bunch of functions
** Open PDF/HMTL exported by LaTeX externally                                 :customFunc:
#+begin_src emacs-lisp
(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

(defun gry/org-open-pdf ()
  (interactive)
  (call-process-shell-command
   (concat "xdg-open "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file/buffer
           "/export_tex/"                               ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".pdf &"                                     ;; adds extension
           )))

(defun gry/org-open-html ()
  (interactive)
  (call-process-shell-command
   ;; (concat "xdg-open "                               ;; try to open default PDF viewer
   (concat "$BROWSER "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file/buffer
           "/export_html/"                              ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".html &"                                    ;; adds extension
           )))
#+end_src

** My Custom LaTeX writing system (aka TeQ)                                   :customFunc:
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.config/emacs/Emacs-TeQ"))
(register-input-method "TeQ-Math" "Emacs-Teq-Latex" 'quail-use-package
                       "TeQ-"     "TeQ-Math input"
                       "Emacs-TeQ.el")
(fset 'gry-calc-horizontal-concat
      (kmacro-lambda-form [?v ?t tab ?v ?t ?| ?v ?t] 0 "%d"))
#+end_src

** Custom Aligner function (with untabify)                                    :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/align-regexp-and-untabify (beg end)
  (interactive "r")
  (align-regexp beg end
                (concat "\\(\\s-*\\)" (read-string "Align regexp: ")))
  (untabify beg end))
#+end_src
** Toggling between 3 inputs (eng, mon, teq)                                  :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/toggle-eng-mon-teq-input-methods ()
  (interactive)
  (if (string= default-input-method nil )
      (set-input-method "cyrillic-mongolian")
    (if (string= default-input-method "TeQ-Math")
	(set-input-method "cyrillic-mongolian")
      (if (string= default-input-method "cyrillic-mongolian")
	  (set-input-method "TeQ-Math")))))
#+end_src
** copy link in org at point                                                  :customFunc:
#+begin_src emacs-lisp
(defun code-from-internet/org-link-open-parent-with-dired-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         ;;(url (concat type ":" url))
         )
    ;; (kill-new url)
    (message (concat "Copied URL: " url))
    (dired-jump t (file-name-directory url))
    )
  )


(defun code-from-internet/org-link-copy-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url)))
  )
#+end_src
** put empty svg file at point                                                :customFunc:
#+begin_src emacs-lisp
(defun garid/put-emtpy-svg-img-at-point ()
  (interactive)
  ;;Part 1: creates org-image if non existense
  (unless (file-directory-p org-download-image-dir);; when not
    (make-directory org-download-image-dir))

  ;;Part 2: copy the template
  (copy-file;; "~/.config/emacs/org-templates/template.svg"
   (concat (file-name-directory user-init-file) "org-templates/template.svg")
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg")))

  ;;Part 3: insert the link to the buffer
  (insert
   "[[file:"
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg"))
   "]]"))
#+end_src
** Jumping ref-label in org or latex                                          :customFunc:
#+begin_src emacs-lisp
(defun garid/jump-label-def-of-ref-at-point-word ()
  ""
  (interactive)
  ;; jump to closing } part of:  \ref{...}
  (progn
    (search-forward "}")
    (backward-char 1))

  ;; copy and consult-line with thing inside of {} parenthesis of \ref{...}
  (let ((start (search-backward "{" nil t))
        (end (search-forward "}" nil t)))
    (if (and start end)
        (let ((content (buffer-substring-no-properties (1+ start) (1- end))))
          (consult-line (format "\\label{%s}" content))
          )
      (message "No matching braces found."))))
#+end_src
** Org toggle hide/shot hyperlink                                             :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-link-n-emphasis ()
  (interactive)
  (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
  (setq org-link-descriptive           org-hide-emphasis-markers) ;;(org-toggle-link-display) more in below
  ;;(org-link-descriptive-ensure) ;; strange isseu need to check later
  (org-restart-font-lock)
  (font-lock-update))
#+end_src

** Custom opening external terminal at current buffer                         :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/open-external-term-here ()
  (interactive)
  (call-process-shell-command
   (concat
    user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
;;(shell-command (concat user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
#+end_src

** Org toggle hide/shot display images                                        :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-display-images-n-edraw ()
  (interactive)
  (org-toggle-inline-images)
  (if org-inline-image-overlays
      (edraw-org-link-image-mode +1)
    (edraw-org-link-image-mode -1)
    ))
#+end_src

** Org structure in the denote dire
#+begin_src emacs-lisp
(defun garid/org-ql-function-on-each-heading (INCLUDE_PROGRESS)
  ""
  (format "%s_ %s %s"
          (make-string (+ 1 (nth 0 (org-heading-components)) ) ?*) ;; recreate the *
          (nth 4 (org-heading-components))
          (if (and INCLUDE_PROGRESS (seq-find
                                     (lambda (elt) (string= "PROGRESS" (car elt) ))
                                     (org-entry-properties)))
              (let ((tmp-progress (string-to-number
                                   (cdr (car (seq-filter (lambda (elt) (string= "PROGRESS" (car elt) )) (org-entry-properties)))))
                                  ))

                ;;(format "<font:monospaced>[<back:black>☐☐☐☐☐</back><back:lightgray>☐☐☐☐☐</back> 10%]</font>")
                (format "\\n<font:monospaced>[<back:black>%s</back><back:lightgray>%s</back> %d%s]</font>"
                        (make-string (/ tmp-progress 10) ?☐)
                        (make-string (- 10 (/ tmp-progress 10) ) ?☐)
                        tmp-progress
                        "%"
                        ) ;;(format "| shit %d" (+ tmp-progress 1))
                )

            ""
            )
          )
  ;;(org-heading-components)
  ;;(nth 0 (org-heading-components)) ;; depth - int
  ;;(nth 4 (org-heading-components)) ;; title - str

  ;;(seq-find
  ;;  (lambda (elt) (string= "PROGRESS" (car elt) ))
  ;;  (org-entry-properties))

  )

(defun garid/org-ql-plantuml-body-prepper-on-current-buffer ()
  (concat
   ;;"@startwbs\n"
   "@startmindmap\n"
   "* Thesis"
   ;;(org-get-title) ;;(buffer-name)
   ;;(org-get-title) ;;(buffer-name)
   "\n"
   (mapconcat 'identity
              (org-ql-select
                (current-buffer) ;; BUFFERS-OR-FILES, i.e. Can be path of file
                '(level 1 3) ;; QUERY 1-to-3 inclusive
                ;;:action 'garid/org-ql-function-on-each-heading
                :action (lambda ()
                          (garid/org-ql-function-on-each-heading t)
                          )
                )
              "\n")
   ;;"\n@endwbs\n"
   "\n@endmindmap\n"
   )
  )

;;(garid/org-ql-plantuml-body-prepper-on-current-buffer)
(defun garid/create-plantuml-using-temp-file (outFname)
  ""
  (let ((tmp-basename (concat "/tmp/" (file-name-base outFname) ".puml"))
        (tmp-extension (file-name-extension outFname))
        (tmp-outputdir (concat (file-name-directory buffer-file-name) (my/org-attach-dir "")))
        )

    (f-write (garid/org-ql-plantuml-body-prepper-on-current-buffer)
             'utf-8
             tmp-basename)

    (message (format "plantuml %s %s -o %s "
                     (concat "-t" tmp-extension)
                     tmp-basename
                     tmp-outputdir))

    (call-process-shell-command (format "plantuml %s %s -o %s "
                                        (concat "-t" tmp-extension)
                                        tmp-basename
                                        tmp-outputdir
                                        ));;outDir

    (my/org-attach-dir outFname)
    )
  )
#+end_src

** Remove equal sign from both sides in string
#+begin_src emacs-lisp
(defun remove-equal-from-both-sides (str)
  "Remove the tilde (~) character from the beginning and end of STR."
  (if (string-match "\\`=\\(.*?\\)=\\'" str)  ;;
      ;; \\`~ front
      ;; \\(.*?\\) capture group
      ;; ~\\'  end?
      (match-string 1 str)
    str))
#+end_src

** Kill ring and garbage collect
#+begin_src emacs-lisp
(defun garid/clear-kill-ring-and-garbage-collect ()
  (interactive)
  (setq kill-ring nil)
  (garbage-collect))
#+end_src

* Writing & Reading
** Writing packages
#+begin_src emacs-lisp
(use-package selectric-mode       :ensure t)
(use-package typewriter-roll-mode :ensure t)
;;(use-package writeroom-mode       :ensure t)
(use-package darkroom             :ensure t)
(use-package focus                :ensure t)
#+end_src

** Writing Distraction free                                                   :customFunc:
#+begin_src emacs-lisp
(defun gry/distraction-free-on ()
  (interactive)
  ;;(turn-off-evil-mode)
  (global-set-key (kbd "M-f") 'forward-word) ;; this is kind a stupid, just use the evil settings int he future
  (evil-mode -1)
  (darkroom-mode             +1)
  (typewriter-roll-mode      +1)
  ;;(evil-insert)
  ;;(selectric-mode            1)
  (display-line-numbers-mode  -1)
  ;; (global-corfu-mode       -1)
  ;; (cua-mode                +1)
  (which-key-mode             -1)
  ;;(vertico-mode               -1)
  (focus-mode                 +1)

  (cond
   ;((member "xkcd Script"     (font-family-list)) (set-face-attribute 'default nil :font "xkcd Script"     :height 160))
   ((member "Iosevka Comfy Duo"   (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Comfy Duo"   :height 120))
   ;;((member "Iosevka Aile"    (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Aile"    :height 200))
   ((member "Libre Baskerville" (font-family-list)) (set-face-attribute 'default nil :font "Libre Baskerville" :height 120))
   ((member "Liberation Sans" (font-family-list)) (set-face-attribute 'default nil :font "Liberation Sans" :height 120))
   ((member "Courier New"     (font-family-list)) (set-face-attribute 'default nil :font "Courier New"     :height 140))
   ((member "Terminus"        (font-family-list)) (set-face-attribute 'default nil :font "Terminus"        :height 140))
   ((member "M+ 1p medium"    (font-family-list)) (set-face-attribute 'default nil :font "M+ 1p medium"    :height 140))
   ))

(defun gry/distraction-free-off ()
  (interactive)

  (global-set-key (kbd "M-f") 'consult-line) ;; this is kind a stupid, just use the evil settings int he future
  (darkroom-mode         -1)
  (evil-mode +1)
  (typewriter-roll-mode  -1)
  ;; (selectric-mode     -1)
  (global-corfu-mode     +1)
  ;;(turn-on-evil-mode)
  (which-key-mode        +1)
  ;;(vertico-mode          +1)
  (focus-mode            -1)

  (cond
   ;;((member "Iosevka Comfy"   (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Comfy"   :height 140))
   ((member "Iosevka Term SS06" (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Term SS06" :height 120))
   ((member "Iosevka"           (font-family-list)) (set-face-attribute 'default nil :font "Iosevka"           :height 150))
   ))

(setq gry-toggle-distraction-free-writing-state t)

(defun gry/toggle-distraction-free-writing ()
  (interactive)
  (setq gry-toggle-distraction-free-writing-state
        (not gry-toggle-distraction-free-writing-state))
  (if gry-toggle-distraction-free-writing-state
      (gry/distraction-free-on)
    (gry/distraction-free-off)))
#+end_src

#+RESULTS:
: gry/toggle-distraction-free-writing

** =pdf-tools=: reading pdf in Emacs
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :bind (:map pdf-view-mode-map
              ("t" . pdf-outline))
  :mode  ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install))
#+end_src

** =tmr=: timer may ring
#+begin_src emacs-lisp
(use-package tmr :ensure t)
#+end_src
** =spray=: spraying texts
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode))
    :hook ((spray-mode . gry/distraction-free-on))
)
#+end_src
** =edraw= svg drawing inline in org
#+begin_src emacs-lisp
(use-package edraw-mode
  :straight (edraw-mode
             :type git
             :host github
             ;;:brach "garidslatex"
             :brach "master"
             :repo "misohena/el-easydraw")


  :after (org ox ox-latex ox-html)
  :custom
  (edraw-editor-default-grid-interval 10)
  (edraw-default-shape-properties '((rect (fill            . #1="#f8f8f8")
                                          (stroke          . #2="#101010")
                                          (stroke-width    . 2))
                                    (ellipse (fill         . #1#)
                                             (stroke       . #2#)
                                             (stroke-width . 2))
                                    (path (fill            . "none")
                                          (stroke          . #2#)
                                          (stroke-width    . 2) ;;(marker-end . "arrow")   p > or p <
                                          )
                                    (text (fill            . #2#)
                                          (font-size       . 20)
                                          ;;(font-family     . "sans-serif")
                                          (font-family     . "Linux Libertine")
                                          ;;(font-family     . "xkcd Script")
                                          (text-anchor     . "middle"))
                                    (image)))
  (edraw-default-document-properties '((width .  900)
                                       (height . 400)
                                       (background . "#fff")))
  :config
  ;;(edraw-org-setup-default)
  ;;(edraw-org-setup-exporter)

  (with-eval-after-load 'org
    (require 'edraw-org)
    (edraw-org-setup-default)
    )
  ;; When using the org-export-in-background option (when using the
  ;; asynchronous export function), the following settings are
  ;; required. This is because Emacs started in a separate process does
  ;; not load org.el but only ox.el.
  (with-eval-after-load "ox"
    (require 'edraw-org)
    (edraw-org-setup-exporter))
  )
#+end_src
** checking (could be useful)
#+begin_src emacs-lisp
;; (use-package langtool   :ensure t) it required external jar / java  someday i will try
;; (use-package jinx          :ensure t)
(use-package mw-thesaurus  :ensure t :after org)
(use-package org-wc        :ensure t :after org)
#+end_src

** =captain=
#+begin_src emacs-lisp
(use-package captain
  :delight " cap"
  :after org
  :custom
  (sentence-end-double-space nil)

  :config ;; from https://emacs.stackexchange.com/q/54326/38482
  ;; don't capitalize in programming modes.
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq captain-predicate
                    (lambda () (nth 8 (syntax-ppss (point)))))))
  ;; Or for text modes, work all the time:
  (add-hook 'text-mode-hook
            (lambda ()
              (setq captain-predicate (lambda () t))))

  ;; Or don't work in source blocks in Org-mode:
  (add-hook 'org-mode-hook
            (lambda ()
              (setq captain-predicate
                    (lambda () (not (org-in-src-block-p))))))


  (add-hook 'latex-mode-hook (lambda () (captain-mode -1)))
  (global-captain-mode t)
  )
#+end_src

** annotate
#+begin_src emacs-lisp
(use-package annotate
  :ensure t)
#+end_src

* Keybinding
** =which-key=: keybinding shower
#+begin_src emacs-lisp
(use-package which-key
  :delight
  :ensure t
  :custom
  (which-key-popup-type              'side-window               )
  (which-key-side-window-location    'right                     )
  (which-key-idle-delay               0.5                       )
  (which-key-idle-secondary-delay     0.01                      )
  (which-key-side-window-max-width    0.5                       )
  (which-key-sort-order              'which-key-key-order-alpha )
  :config (which-key-mode))
#+end_src

** Non sequential keybindings
*** Global keybinding table
#+caption: Global (aka from anywhere) non-sequential keybinding
#+name: tbl-global-keybindings
| key     | function                                      | description                         | state                 |
|---------+-----------------------------------------------+-------------------------------------+-----------------------|
| =M-q=     | =delete-window=                                 | delete window                       | =evil-normal-state-map= |
| =M-Q=     | =kill-current-buffer=                           | delete buffer                       | =evil-normal-state-map= |
| =M-J=     | =other-window=                                  | jump to other window                | =evil-normal-state-map= |
| =M-W=     | =evil-window-vnew=                              | divide window vertically (on right) | =evil-normal-state-map= |
| =M-E=     | =evil-window-vsplit=                            | divide window vertically (on left)  | =evil-normal-state-map= |
| =M-]=     | =comint-dynamic-complete-filename=              | complete file path                  | =evil-normal-state-map= |
| =M-f=     | =consult-line=                                  | search line in buffer               | =evil-normal-state-map= |
| =M-F=     | =zoom-window-zoom=                              | zoom window mode                    | =evil-normal-state-map= |
| =M-y=     | =consult-yank-from-kill-ring=                   | consult yank from kill ring         | =evil-normal-state-map= |
| =C-/=     | =comment-line=                                  | set selected lines comment          | =evil-normal-state-map= |
| =C-\vert= | =garid-custom/toggle-eng-mon-teq-input-methods= | change toggle input (Eng-Mon-Teq)   | =evil-normal-state-map= |
| =M-1=     | =harpoon-go-to-1=                               | harpoon-go-to-1                     | =evil-normal-state-map= |
| =M-2=     | =harpoon-go-to-2=                               | harpoon-go-to-2                     | =evil-normal-state-map= |
| =M-3=     | =harpoon-go-to-3=                               | harpoon-go-to-3                     | =evil-normal-state-map= |
| =M-4=     | =harpoon-go-to-4=                               | harpoon-go-to-4                     | =evil-normal-state-map= |
| =M-5=     | =harpoon-go-to-5=                               | harpoon-go-to-5                     | =evil-normal-state-map= |
| =M-6=     | =harpoon-go-to-6=                               | harpoon-go-to-6                     | =evil-normal-state-map= |
| =<f9>=    | =harpoon-quick-menu-hydra=                      | harpoon                             | =evil-normal-state-map= |
| =M-<f9>=  | =gry/toggle-distraction-free-writing=           | toggle distraction free writing     | =evil-normal-state-map= |

Note to myself: after changing Table-[[tbl-global-keybindings]], I need to update [[convert-global-keybindings]]
*** Convert global keybinding table into elisp
#+caption: adsf
#+name: convert-global-keybindings
#+begin_src elisp :var tab=tbl-global-keybindings :wrap src emacs-lisp :tangle no
(concat
 (mapconcat
  (lambda (row)
    (format
     "(global-set-key (kbd \"%s\") '%s)"
     ;; needed to use regexp cuz | (as \vert) used in the table
     (replace-regexp-in-string (regexp-quote "\\vert") "|"
                               (remove-equal-from-both-sides (nth 0 row))
                               nil 'literal)
     (remove-equal-from-both-sides (nth 1 row))
     ;;(nth 1 row)
     ))
  tab "\n"))
#+end_src
*** The result
#+RESULTS: convert-global-keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-q") 'delete-window)
(global-set-key (kbd "M-Q") 'kill-current-buffer)
(global-set-key (kbd "M-J") 'other-window)
(global-set-key (kbd "M-W") 'evil-window-vnew)
(global-set-key (kbd "M-E") 'evil-window-vsplit)
(global-set-key (kbd "M-]") 'comint-dynamic-complete-filename)
(global-set-key (kbd "M-f") 'consult-line)
(global-set-key (kbd "M-F") 'zoom-window-zoom)
(global-set-key (kbd "M-y") 'consult-yank-from-kill-ring)
(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-|") 'garid-custom/toggle-eng-mon-teq-input-methods)
(global-set-key (kbd "M-1") 'harpoon-go-to-1)
(global-set-key (kbd "M-2") 'harpoon-go-to-2)
(global-set-key (kbd "M-3") 'harpoon-go-to-3)
(global-set-key (kbd "M-4") 'harpoon-go-to-4)
(global-set-key (kbd "M-5") 'harpoon-go-to-5)
(global-set-key (kbd "M-6") 'harpoon-go-to-6)
(global-set-key (kbd "<f9>") 'harpoon-quick-menu-hydra)
(global-set-key (kbd "M-<f9>") 'gry/toggle-distraction-free-writing)
#+end_src

** Sequential keybindings (General.el keybinding configuration)
*** Sequential global keybindings
**** File and directory surfing
#+attr_latex: :placement [H]
#+caption: File and directory related commands
#+name: tbl-kbinding-file-n-dired
| key(s) | function                       | short description   | mode | lambda |
|--------+--------------------------------+---------------------+------+--------|
| =SPC=  | =execute-extended-command=     | M-x                 | -    |        |
| =f=    | =find-file=                    | find-file           | -    |        |
| =d=    | =dired-jump=                   | directory           | -    |        |
| =D=    | =:ignore t=                    | Dired.............. | -    |        |
| =Ds=   | =dired=                        | simple              | -    |        |
| =Dp=   | =dired-preview-mode=           | preview             | -    |        |
| =Dw=   | =wdired-change-to-wdired-mode= | wdired              | -    |        |

**** Buffer and operations on buffer
#+attr_latex: :placement [H]
#+caption: buffer related commands
#+name: tbl-kbind-buffer-related
| key(s) | function                    | short description           | mode | lambda |
|--------+-----------------------------+-----------------------------+------+--------|
| =l=      | =consult-buffer=              | list-buffer                 | -    |        |
| =L=      | =:ignore t=                   | buffer..................... | -    |        |
| =Lr=     | =revert-buffer-quick=         | revert (reload)             | -    |        |
| =Le=     | =eval-buffer=                 | evaluate buffer             | -    |        |
| =Li=     | =ibuffer=                     | ibuffer                     | -    |        |
| =Ln=     | =rename-buffer=               | rename                      | -    |        |
| =L<=     | =switch-to-prev-buffer=       | <prev                       | -    |        |
| =L>=     | =switch-to-next-buffer=       | >next                       | -    |        |
| =Ld=     | =crux-delete-file-and-buffer= | delete                      | -    |        |
| =Lc=     | =clone-indirect-buffer=       | clone                       | -    |        |
| =Ls=     | =crux-create-scratch-buffer=  | scratch-buffer              | -    |        |
| =Lh=     | =buf-move-left=               | move left                   | -    |        |
| =Lj=     | =buf-move-down=               | move down                   | -    |        |
| =Lk=     | =buf-move-up=                 | move up                     | -    |        |
| =Ll=     | =buf-move-right=              | move right                  | -    |        |
| =LL=     | =tear-off-window=             | tear window to frame        | -    |        |

**** Convenient
#+attr_latex: :placement [H]
#+caption: Convenient commands
#+name: tbl-kbind-zconvenients
| key(s) | function                               | short description                 | mode | lambda |
|--------+----------------------------------------+-----------------------------------+------+--------|
| =z=      | =:ignore t=                              | conveniences....................  | -    |        |
| =za=     | =garid-custom/align-regexp-and-untabify= | align                             | -    |        |
| =zr=     | =replace-regexp=                         | replace                           | -    |        |
| =zh=     | =highlight-symbol-at-point=              | highlight-on                      | -    |        |
| =zH=     | =unhighlight-regexp=                     | highlight-off                     | -    |        |
|--------+----------------------------------------+-----------------------------------+------+--------|
| =zs=     | =:ignore t=                              | spell............................ | -    |        |
| =zsw=    | =ispell-word=                            | word                              | -    |        |
| =zsr=    | =ispell-region=                          | region                            | -    |        |
| =zsC=    | =ispell-comments-and-strings=            | comment-full                      | -    |        |
| =zsc=    | =ispell-comment-or-string-at-point=      | comment-here                      | -    |        |
| =zsb=    | =ispell-buffer=                          | buffer                            | -    |        |
| =zsm=    | =ispell-message=                         | message                           | -    |        |
| =zsq=    | =ispell-kill-ispell=                     | quit                              | -    |        |
| =zsl=    | =ispell-change-dictionary=               | language en/mn                    | -    |        |
| =zst=    | =mw-thesaurus-lookup-at-point=           | thesaurus current word            | -    |        |
| =zsT=    | =mw-thesaurus-lookup=                    | thesaurus                         | -    |        |
|--------+----------------------------------------+-----------------------------------+------+--------|
| =ZQ=     | =kill-emacs=                             | kill Emacs                        | -    |        |

**** System
#+attr_latex: :placement [H]
#+caption: system commmands
#+name: tbl-kbind-sys-related
| key(s) | function                                                                                   | short description             | mode | lambda |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =s=      | =:ignore t=                                                                                  | system....................... | -    |        |
| =srf=    | =recentf-open-files=                                                                         | recent-f.iles                 | -    |        |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =sl=     | =:ignore t=                                                                                  | line......................... | -    |        |
| =sl5=    | =(setq display-line-numbers-width 5)=                                                        | digit number                  | -    | y      |
| =sl4=    | =(setq display-line-numbers-width 4)=                                                        | digit number                  | -    | y      |
| =sl3=    | =(setq display-line-numbers-width 3)=                                                        | digit number                  | -    | y      |
| =slm=    | =scroll-lock-mode=                                                                           | scroll-lock-mode              | -    |        |
| =slv=    | =global-display-fill-column-indicator-mode=                                                  | vertical-line                 | -    |        |
| =sln=    | =display-line-numbers-mode=                                                                  | number toggle                 | -    |        |
| =slr=    | =ruler-mode=                                                                                 | ruler mode                    | -    |        |
| =scl=    | =(global-command-log-mode) (clm/open-command-log-buffer)=                                    | command log mode              | -    | y      |
| =sw=     | =whitespace-mode=                                                                            | whitespace                    | -    |        |
| =sg=     | =:ignore t=                                                                                  | garid                         | -    |        |
| =sgf=    | =gry/distraction-free-on=                                                                    | focus                         | -    |        |
| =sgr=    | =gry/distraction-free-off=                                                                   | reset                         | -    |        |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =O=      | =:ignore t=                                                                                  | open........................  | -    |        |
| =Oe=     | =(find-file "~/.config/emacs/init.org")=                                                     | emacs init.org                | -    | y      |
| =OE=     | =(find-file "~/.config/emacs/init.el")=                                                      | emacs init.el                 | -    | y      |
| =Ob=     | =(find-file (nth 0 org-cite-global-bibliography))=                                           | bibliography                  | -    | y      |
| =Op=     | =(find-file "~/BrainDump/bookshelf/")=                                                       | pdf                           | -    | y      |
| =Oc=     | =citar-open=                                                                                 | citaiton                      | -    |        |
| =OO=     | =(find-file org-default-notes-file)=                                                         | org capture                   | -    | y      |
| =Oi=     | =(find-file "~/BrainDump/gtd/inbox.org")=                                                    | inbox                         | -    | y      |
| =Om=     | =(find-file "~/BrainDump/gtd/main.org")=                                                     | main                          | -    | y      |
| =Or=     | =(find-file (concat denote-directory "/phd/20240814T113502--00-garids-phd-index__phd.org"))= | research index                | -    | y      |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =t=      | =:ignore t=                                                                                  | terminal..................... | -    |        |
| =te=     | =eshell=                                                                                     | eshell emacs-shell            | -    |        |
| =tv=     | =vterm=                                                                                      | vterm  vterm                  | -    |        |
| =tx=     | =garid-custom/open-external-term-here=                                                       | xternal terminal              | -    |        |
| =tm=     | =tmr-with-description=                                                                       | timer                         | -    |        |
| =u=      | =:ignore=                                                                                    | undo ........................ | -    |        |
| =ut=     | =undo-tree-visualize=                                                                        | tree                          | -    |        |

**** Bookmark
#+attr_latex: :placement [H]
#+caption: bookmark
#+name: tbl-kbind-bookmarks
| key(s) | function                 | short description              | mode | lambda |
|--------+--------------------------+--------------------------------+------+--------|
| =b=      | =harpoon-quick-menu-hydra= | bookmark-harpoon               | -    |        |
| =B=      | =:ignore t=                | bookmark...................... | -    |        |
| =B1=     | =harpoon-go-to-1=          |                                | -    |        |
| =B2=     | =harpoon-go-to-2=          |                                | -    |        |
| =B3=     | =harpoon-go-to-3=          |                                | -    |        |
| =B4=     | =harpoon-go-to-4=          |                                | -    |        |
| =B5=     | =harpoon-go-to-5=          |                                | -    |        |
| =Ba=     | =harpoon-add-file=         | add-file                       | -    |        |

**** Help related
#+attr_latex: :placement [H]
#+caption: Help for emacs/elisp related
#+name: tbl-kbind-help
| key(s) | function                 | short description               | mode | lambda |
|--------+--------------------------+---------------------------------+------+--------|
| =h=      | =:ignore t=                | help........................... | -    |        |
| =hh=     | =describe-symbol=          | help symbol (elisp)             | -    |        |
| =hH=     | =describe-key=             | help keybinding                 | -    |        |
| =ho=     | =org-info=                 | org-info                        | -    |        |
| =hw=     | =which-key-show-top-level= | which-key                       | -    |        |
| =hm=     | =consult-man=              | man                             | -    |        |
| =hi=     | =Info-goto-node=           | read docs                       | -    |        |

**** Development commands
#+attr_latex: :placement [H]
#+caption: misc. development related
#+name: tbl-kbind-dev
| key(s) | function                      | short description                | mode | lambda |
|--------+-------------------------------+----------------------------------+------+--------|
| =mg=     | =magit-status=                  | magit                            | -    |        |
| =<=      | =recompile=                     | recompile                        | -    |        |
| =sco=    | =corfu-mode=                    | corfu-mode                       | -    |        |
| =se=     | =eglot=                         | eglot                            | -    |        |
| =rg=     | =rg=                            | ripgrep                          | -    |        |
| =g=      | =:ignore t=                     | git............................  | -    |        |
| =gS=     | =git-gutter:stage-hunk=         | stage hunkk                      | -    |        |
| =gs=     | =git-gutter:popup-hunk=         | popup hunk                       | -    |        |
| =gr=     | =git-gutter:update-all-windows= | refresh                          | -    |        |
| =gg=     | =git-gutter-mode=               | gutter-mode                      | -    |        |
| =gn=     | =git-gutter:next-hunk=          | jump-next                        | -    |        |
| =gp=     | =git-gutter:previous-hunk=      | jump-prev                        | -    |        |
| =gd=     | =magit-ediff-compare=           | magit-ediff-compare              | -    |        |
| =P=      | =:ignore=                       | python (inferior)............... | -    |        |
| =Pr=     | =python-shell-restart=          | restart                          | -    |        |
| =PP=     | =run-python=                    | run-python                       | -    |        |
| =Pk=     | =comint-send-eof=               | kill  (also C-c C-d)             | -    |        |

**** Consult related (picking & choosing stuff)
#+attr_latex: :placement [H]
#+caption: consult
#+name: tbl-global-general-keybindings-consult
| key(s) | function               | short description              | mode | lambda |
|--------+------------------------+--------------------------------+------+--------|
| =c=      | =:ignore t=              | consult....................... | -    |        |
| =co=     | =consult-org-heading=    | consult-org-heading    [ ofh ] | -    |        |
| =ci=     | =consult-imenu=          | consult-imenu                  | -    |        |
| =cm=     | =consult-man=            | consult-man                    | -    |        |
| =cr=     | =consult-ripgrep=        | consult-ripgrep         [ ps ] | -    |        |
| =cR=     | =consult-recent-file=    | consult-recent-files           | -    |        |
| =cf=     | =consult-flymake=        | consult-flymake                | -    |        |
| =cp=     | =consult-project-buffer= | consult-project-buffer  [ pl ] | -    |        |
| =cd=     | =consult-dir=            | consult-dir                    | -    |        |
| =cF=     | =consult-fd=             | consult-fd               [ F ] | -    |        |
| =F=      | =consult-fd=             | consult-fd              [ cF ] | -    |        |
| =ca=     | =consult-org-agenda=     | consult-org-agenda             | -    |        |
| =cg=     | =consult-git-grep=       | consult-git-grep        [ ps ] | -    |        |

**** Project related
#+attr_latex: :placement [H]
#+caption: Project (more like git-repo)
#+name: tbl-global-general-keybindings-project
| key(s) | function               | short description             | mode | lambda |
|--------+------------------------+-------------------------------+------+--------|
| =p=      | =:ignore t=              | project.....................  | -    |        |
| =pr=     | =xref-find-references=   | references                    | -    |        |
| =pR=     | =consult-eglot-symbols=  | references consult            | -    |        |
| =pd=     | =consult-flymake=        | diagnostic                    | -    |        |
| =pf=     | =project-find-file=      | find-file                     | -    |        |
| =pz=     | =project-switch-project= | jump-to-other-proj            | -    |        |
| =ps=     | =consult-git-grep=       | search git files              | -    |        |
| =pS=     | =project-find-regexp=    | search-in-proj                | -    |        |
| =pk=     | =project-kill-buffers=   | kill-buf-proj                 | -    |        |
| =pl=     | =consult-project-buffer= | list-buf-proj                 | -    |        |
| =pv=     | =consult-imenu=          | variables                     | -    |        |
| =v=      | =:ignore t=              | variables.................... | -    |        |
| =vq=     | =format-all-buffer=      | format-buffer                 | -    |        |
| =vr=     | =eglot-rename=           | rename variable               | -    |        |

**** Denote related
#+attr_latex: :placement [H]
#+caption: Denote
#+name: tbl-global-general-keybindings-denote
| key(s) | function                                    | short description            | mode | lambda |
|--------+---------------------------------------------+------------------------------+------+--------|
| =n=      | =:ignore t=                                   | note........................ | -    |        |
| =nr=     | =denote-rename-file=                          | rename                       | -    |        |
| =nf=     | =denote-open-or-create=                       | find                         | -    |        |
| =nd=     | =(dired denote-directory)=                    | dired                        | -    | y      |
| =nj=     | =denote-journal-extras-new-entry=             | journal                      | -    |        |
| =nJ=     | =denote-journal-extras-new-or-existing-entry= | Journal-find                 | -    |        |
| =nil=    | =denote-insert-link=                          | insert-link                  | -    |        |
| =nij=    | =denote-journal-extras-link-or-create-entry=  | insert-journal-link          | -    |        |
| =nt=     | =denote-template=                             | template                     | -    |        |
| =nI=     | =garid-custom/denote-node-insert-immediate=   | Insert-note                  | -    |        |
| =ns=     | =consult-denote-grep=                         | live-grep                    | -    |        |
| =nF=     | =consult-denote-find=                         | consult-denote-find          | -    |        |
| =nl=     | =:ignore t=                                   | denote link................. | -    |        |
| =nli=    | =denote-insert-link=                          | link insert                  | -    |        |
| =nlb=    | =denote-find-backlink=                        | find-backlink                | -    |        |
| =nlf=    | =denote-find-link=                            | find-forward-link            | -    |        |
| =nlB=    | =denote-backlinks=                            | backlink                     | -    |        |
| =nlF=    | =denote-link=                                 | forward-link                 | -    |        |
| =nla=    | =denote-add-links=                            | add-links regex              | -    |        |

**** Roam related
#+attr_latex: :placement [H]
#+caption: Roam
#+name: tbl-global-general-keybindings-roam
| key(s) | function                                                       | short description                           | mode | lambda |
|--------+----------------------------------------------------------------+---------------------------------------------+------+--------|
| =r=      | =:ignore t=                                                      | roam........................                | -    |        |
| =rr=     | =(message "Current org-roam-directory = %s" org-roam-directory)= | show directory                              | -    | y      |
| =rc=     | =garid/choose-roam-directory=                                    | roam chande directory                       | -    |        |
| =rd=     | =(dired org-roam-directory)=                                     | dired                                       | -    | y      |
| =rs=     | =consult-org-roam-search=                                        | consult-org-roam-search                     | -    |        |
| =rf=     | =consult-org-roam-file-find=                                     | consult-org-roam-file-find                  | -    |        |
| =rI=     | =garid-custom/org-roam-node-insert-immediate=                    | garid-custom/org-roam-node-insert-immediate | -    |        |
| =rlb=    | =consult-org-roam-backlinks=                                     | consult-org-roam-backlinks                  | -    |        |
| =rlf=    | =consult-org-roam-forward-links=                                 | consult-org-roam-forward-links              | -    |        |
| =rlB=    | =consult-org-roam-backlinks-recursive=                           | consult-org-roam-backlinks-recursive        | -    |        |
| =rli=    | =org-roam-node-insert=                                           | org-roam-node-insert                        | -    |        |
| =rui=    | =org-roam-ui-open=                                               | org-roam-ui-open                            | -    |        |
| =rta=    | =org-roam-tag-add=                                               | org-roam-tag-add                            | -    |        |
| =rtr=    | =org-roam-tag-remove=                                            | org-roam-tag-remove                         | -    |        |
| =rbt=    | =org-roam-buffer-toggle=                                         | org-roam-buffer-toggle                      | -    |        |

**** org related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-mode-related
| key(s) | function                                                    | short description               | mode | lambda |
|--------+-------------------------------------------------------------+---------------------------------+------+--------|
| =o=      | =:ignore t=                                                   | org............................ | -    |        |
| =oo=     | =org-open-at-point=                                           | open                            | org  |        |
| =oO=     | =garid/jump-label-def-of-ref-at-point-word=                   | open ref def                    | org  |        |
| =od=     | =code-from-internet/org-link-open-parent-with-dired-at-point= | directory-open                  | org  |        |
| =,=      | =org-ctrl-c-ctrl-c=                                           | C-c C-c                         | org  |        |

**** org table related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-tbl-related
| key(s) | function                             | short description            | mode | lambda |
|--------+--------------------------------------+------------------------------+------+--------|
| =oT=     | =:ignore t=                            | table....................... | -    |        |
| =oTm=    | =orgtbl-mode=                          | mode                         | -    |        |
| =oTc=    | =orgtbl-create-or-convert-from-region= | create                       | -    |        |
| =oTT=    | =org-table-toggle-column-width=        | toggle-hide-column           | -    |        |
| =oTC=    | =org-table-toggle-coordinate-overlays= | coordinate                   | -    |        |
| =oTx=    | =org-table-export=                     | export as csv file           | org  |        |
| =oTs=    | =org-table-sum=                        | sum                          | org  |        |
| =oTi=    | =:ignore t=                            | insert...................... | org  |        |
| =oTic=   | =org-table-insert-column=              | column                       | org  |        |
| =oTir=   | =org-table-insert-row=                 | row                          | org  |        |

**** org-subtree operations
#+attr_latex: :placement [H]
#+caption: in org-file, frequent commands
#+name: tbl-orgmode-general-keybindings-freq
| key(s) | function                                          | short description            | mode | lambda |
|--------+---------------------------------------------------+------------------------------+------+--------|
| =os=   | =:ignore t=                                       | subtree..................... | org  |        |
| =osy=  | =org-copy-subtree=                                | yank (verbatim copy)         | org  |        |
| =osa=  | =(org-archive-subtree-default-with-confirmation)= | archive                      | org  | y      |
| =osY=  | =org-id-copy=                                     | yank (ID)                    | org  |        |
| =osv=  | =org-mark-element=                                | visually select element      | org  |        |
| =osm=  | =org-refile=                                      | move/refile                  | org  |        |
| =osd=  | =org-cut-subtree=                                 | delete (aka cut)             | org  |        |
| =ost=  | =org-toggle-narrow-to-subtree=                    | toggle narrow                | org  |        |
| =osT=  | =org-tidy-mode=                                   | tidy-mode                    | org  |        |
| =osn=  | =org-num-mode=                                    | num-mode                     | org  |        |
| =oss=  | =org-sort=                                        | sort                         | org  |        |
| =osp=  | =org-set-property=                                | property                     | org  |        |
| =osI=  | =org-indent-mode=                                 | indent-mode                  | org  |        |
|--------+---------------------------------------------------+------------------------------+------+--------|
| =osi=  | =:ignore t=                                       | insert heading.............. | org  |        |
| =osia= | =org-insert-heading-after-current=                | after                  C-RET | org  |        |
| =osih= | =org-insert-heading=                              | heading                M-RET | org  |        |
| =osis= | =org-insert-subheading=                           | subheading                   | org  |        |
| =osiH= | =org-insert-todo-heading=                         | heading         todo M-S-RET | org  |        |
| =osiA= | =org-insert-todo-heading-respect-content=         | After           todo C-S-RET | org  |        |
| =osiS= | =org-insert-todo-subheading=                      | subheading      todo         | org  |        |

**** org-agenda/calendar/todo related
#+attr_latex: :placement [H]
#+caption: agenda-todo-schedule
#+name: tbl-orgmode-general-keybindings-todo
| key(s) | function      | short description            | mode | lambda |
|--------+---------------+------------------------------+------+--------|
| =oc=     | =org-capture=   | capture                      | -    |        |
| =ot=     | =org-todo=      | todo                         | org  |        |
|--------+---------------+------------------------------+------+--------|
| =oa=     | =:ignore t=     | agenda...................... | -    |        |
| =oag=    | =org-agenda=    | agenda                       | -    |        |
| =oab=    | =org-timeblock= | block                        | -    |        |
| =oas=    | =org-schedule=  | schedule                     | org  |        |
| =oad=    | =org-deadline=  | deadline                     | org  |        |
| =oac=    | =org-clock-in=  | clock in                     | org  |        |
| =oaC=    | =org-clock-out= | clock in                     | org  |        |

**** org jumping around or finding things
#+attr_latex: :placement [H]
#+caption: jumping or finding stuff in org file
#+name: tbl-orgmode-general-keybindings-find
| key(s) | function                        | short description         | mode | lambda |
|--------+---------------------------------+---------------------------+------+--------|
| =of=     | =:ignore t=                       | find..................... | org  |        |
| =ofh=    | =(consult-org-heading)=           | heading                   | org  | y      |
| =ofn=    | =(consult-line "^#+name"   )=     | named table/eq/src        | org  | y      |
| =ofr=    | =(consult-line "^#+result" )=     | result        /src        | org  | y      |
| =ofs=    | =(consult-line "^#+begin_" )=     | source src-block          | org  | y      |
| =ofl=    | =(consult-line "\\\\label{.*}" )= | label                     | org  | y      |
| =ofr=    | =(consult-line "\\\\ref{.*}" )=   | ref                       | org  | y      |
| =j=      | =org-next-block=                  | jump to next src-block    | org  |        |
| =k=      | =org-previous-block=              | jump to prev src-block    | org  |        |

**** org-export related
#+attr_latex: :placement [H]
#+caption: exporting org
#+name: tbl-orgmode-general-keybindings-export
| key(s) | function                         | short description             | mode | lambda |
|--------+----------------------------------+-------------------------------+------+--------|
| =ox=     | =:ignore t=                        | export....................... | org  |        |
| =oxh=    | =org-html-export-to-html=          | html                          | org  |        |
| =oxb=    | =org-beamer-export-to-pdf=         | beamer                        | org  |        |
| =oxp=    | =org-latex-export-to-pdf=          | pdf latex                     | org  |        |
| =oxH=    | =(org-html-export-to-html nil t)=  | Html                 subtree  | org  | y      |
| =oxB=    | =(org-beamer-export-to-pdf nil t)= | beamer               subtree  | org  | y      |
| =oxP=    | =(org-latex-export-to-pdf nil t)=  | pdf latex            subtree  | org  | y      |
| =oxr=    | =org-reveal-export-to-html=        | reveal js                     | org  |        |
| =oxo=    | =gry/org-open-pdf=                 | pdf open                      | org  |        |
| =oxO=    | =gry/org-open-html=                | html open                     | org  |        |
| =op=     | =org-latex-preview=                | preview                       | org  |        |

**** org-link related
#+attr_latex: :placement [H]
#+caption: org-link related
#+name: tbl-orgmode-general-keybindings-link
| key(s) | function                                | short description            | mode | lambda |
|--------+-----------------------------------------+------------------------------+------+--------|
| =ol=     | =:ignore t=                               | link........................ | org  |        |
| =old=    | =garid-custom/org-toggle-link-n-emphasis= | description-toggle           | org  |        |
| =oli=    | =org-insert-link=                         | insert                       | org  |        |
| =oln=    | =hydra-org-link-jumper/body=              | next-link                    | org  |        |
| =olp=    | =hydra-org-link-jumper/body=              | prev-link                    | org  |        |
| =olo=    | =org-open-at-point=                       | open (same as SPC o o)       | org  |        |
| =olf=    | =org-footnote-new=                        | footnote-new                 | org  |        |
| =olF=    | =org-footnote-action=                     | Footnote-action              | org  |        |
| =olc=    | =org-cite-insert=                         | citation                     | org  |        |
| =oll=    | =org-lint=                                | lint                         | org  |        |

**** org-image related
#+attr_latex: :placement [H]
#+caption: handing images in org-file
#+name: tbl-orgmode-general-keybindings-img
| key(s) | function                                       | short description            | mode | lambda |
|--------+------------------------------------------------+------------------------------+------+--------|
| =oi=     | =:ignore t=                                      | image....................... | org  |        |
| =oii=    | =(insert "[[edraw:]]")=                          | inline edraw                 | org  | y      |
| =oic=    | =garid/put-emtpy-svg-img-at-point=               | create svg                   | org  |        |
| =oip=    | =org-download-clipboard=                         | paste clipboard              | org  |        |
| =oiP=    | =org-download-image=                             | Paste from-path              | org  |        |
| =oid=    | =org-download-delete=                            | delete file                  | org  |        |
| =oie=    | =edraw-org-edit-regular-file-link=               | edit edraw                   | org  |        |
| =oiE=    | =org-download-edit=                              | Edit externally              | org  |        |
| =oir=    | =org-download-rename-at-point=                   | rename file                  | org  |        |
| =oit=    | =garid-custom/org-toggle-display-images-n-edraw= | toggle shot/hide image       | org  |        |
|--------+------------------------------------------------+------------------------------+------+--------|
| =ois=    | =:ignore t=                                      | size........................ | org  |        |
| =oisn=   | =(setq org-image-actual-width '(800))=           | normal 800px                 | org  | y      |
| =oisb=   | =(setq org-image-actual-width '(1500))=          | big    1500px                | org  | y      |
| =oiss=   | =(setq org-image-actual-width '(400))=           | small  400px                 | org  | y      |

*** Converting tables actual keybinding
**** General.el config
#+begin_src emacs-lisp
(use-package general
  :config (general-evil-setup t)

  ;; Keybindings for everywhere
  (general-create-definer garids-keybind/for-all-modes
    :keymaps  '(normal visual emacs)
    :prefix         "SPC"
    :global-prefix  "C-SPC")

  ;; Keybindings inside Org-mode-map
  (general-create-definer garids-keybind/in-org-mode
    :states '(normal visual)
    :keymaps '(org-mode-map)
    :prefix        "SPC"
    :global-prefix "C-SPC")
  )
#+end_src
**** Script that converts previous org-tables into actual emacs configuration
:PROPERTIES:
:header-args:  :var tbl_01=tbl-kbinding-file-n-dired
:header-args+: :var tbl_02=tbl-global-general-keybindings-org-mode-related
:header-args+: :var tbl_03=tbl-kbind-zconvenients
:header-args+: :var tbl_04=tbl-kbind-sys-related
:header-args+: :var tbl_05=tbl-global-general-keybindings-denote
:header-args+: :var tbl_06=tbl-kbind-help
:header-args+: :var tbl_07=tbl-global-general-keybindings-project
:header-args+: :var tbl_08=tbl-kbind-bookmarks
:header-args+: :var tbl_09=tbl-global-general-keybindings-consult
:header-args+: :var tbl_10=tbl-kbind-buffer-related
:header-args+: :var tbl_11=tbl-kbind-dev
:header-args+: :var tbl_12=tbl-global-general-keybindings-org-tbl-related
:header-args+: :var tbl_13=tbl-orgmode-general-keybindings-freq
:header-args+: :var tbl_14=tbl-orgmode-general-keybindings-todo
:header-args+: :var tbl_15=tbl-orgmode-general-keybindings-find
:header-args+: :var tbl_16=tbl-orgmode-general-keybindings-export
:header-args+: :var tbl_17=tbl-orgmode-general-keybindings-link
:header-args+: :var tbl_18=tbl-orgmode-general-keybindings-img
:header-args+: :var tbl_19=tbl-global-general-keybindings-roam
:END:
#+caption: converting
#+name: src_that_converts_key_tables
#+begin_src elisp :wrap src emacs-lisp :tangle no
(setq tblall (append tbl_01 tbl_02 tbl_03 tbl_04 tbl_05 tbl_06 tbl_07 tbl_08 tbl_09 tbl_10
                     tbl_11 tbl_12 tbl_13 tbl_14 tbl_15 tbl_16 tbl_17 tbl_18 tbl_19))



(setq tbl_all_kbind (seq-filter (lambda (x) (string= (nth 3 x) "-"))   tblall))
(setq tbl_org_kbind (seq-filter (lambda (x) (string= (nth 3 x) "org")) tblall))



(defun remove-equal-from-both-sides (str)
  "Remove the tilde (~) character from the beginning and end of STR."
  (if (string-match "\\`=\\(.*?\\)=\\'" str)  ;;
      ;; \\`~ front
      ;; \\(.*?\\) capture group
      ;; ~\\'  end?
      (match-string 1 str)
    str))


(concat
 "(garids-keybind/for-all-modes\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (remove-equal-from-both-sides (nth 0 row))
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )"
                                  (remove-equal-from-both-sides (nth 1 row))) ;; for anon functions
                        (remove-equal-from-both-sides (nth 1 row)))           ;; for normal functions
                      (nth 2 row)))
            tbl_all_kbind "\n"
            )
 "\n)\n\n"
 "(garids-keybind/in-org-mode\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (remove-equal-from-both-sides (nth 0 row))
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )"
                                  (remove-equal-from-both-sides (nth 1 row))) ;; for anon functions
                        (remove-equal-from-both-sides (nth 1 row)))           ;; for normal functions
                      (nth 2 row)))
            tbl_org_kbind "\n"
            )
 "\n)\n"
 )
#+end_src

**** Converted config from tables

#+RESULTS: src_that_converts_key_tables
#+begin_src emacs-lisp
(garids-keybind/for-all-modes
  "SPC" '(execute-extended-command :which-key "M-x")
  "f" '(find-file :which-key "find-file")
  "d" '(dired-jump :which-key "directory")
  "D" '(:ignore t :which-key "Dired..............")
  "Ds" '(dired :which-key "simple")
  "Dp" '(dired-preview-mode :which-key "preview")
  "Dw" '(wdired-change-to-wdired-mode :which-key "wdired")
  "o" '(:ignore t :which-key "org............................")
  "z" '(:ignore t :which-key "conveniences....................")
  "za" '(garid-custom/align-regexp-and-untabify :which-key "align")
  "zr" '(replace-regexp :which-key "replace")
  "zh" '(highlight-symbol-at-point :which-key "highlight-on")
  "zH" '(unhighlight-regexp :which-key "highlight-off")
  "zs" '(:ignore t :which-key "spell............................")
  "zsw" '(ispell-word :which-key "word")
  "zsr" '(ispell-region :which-key "region")
  "zsC" '(ispell-comments-and-strings :which-key "comment-full")
  "zsc" '(ispell-comment-or-string-at-point :which-key "comment-here")
  "zsb" '(ispell-buffer :which-key "buffer")
  "zsm" '(ispell-message :which-key "message")
  "zsq" '(ispell-kill-ispell :which-key "quit")
  "zsl" '(ispell-change-dictionary :which-key "language en/mn")
  "zst" '(mw-thesaurus-lookup-at-point :which-key "thesaurus current word")
  "zsT" '(mw-thesaurus-lookup :which-key "thesaurus")
  "ZQ" '(kill-emacs :which-key "kill Emacs")
  "s" '(:ignore t :which-key "system.......................")
  "srf" '(recentf-open-files :which-key "recent-f.iles")
  "sl" '(:ignore t :which-key "line.........................")
  "sl5" '((lambda () (interactive) (setq display-line-numbers-width 5) ) :which-key "digit number")
  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4) ) :which-key "digit number")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3) ) :which-key "digit number")
  "slm" '(scroll-lock-mode :which-key "scroll-lock-mode")
  "slv" '(global-display-fill-column-indicator-mode :which-key "vertical-line")
  "sln" '(display-line-numbers-mode :which-key "number toggle")
  "slr" '(ruler-mode :which-key "ruler mode")
  "scl" '((lambda () (interactive) (global-command-log-mode) (clm/open-command-log-buffer) ) :which-key "command log mode")
  "sw" '(whitespace-mode :which-key "whitespace")
  "sg" '(:ignore t :which-key "garid")
  "sgf" '(gry/distraction-free-on :which-key "focus")
  "sgr" '(gry/distraction-free-off :which-key "reset")
  "O" '(:ignore t :which-key "open........................")
  "Oe" '((lambda () (interactive) (find-file "~/.config/emacs/init.org") ) :which-key "emacs init.org")
  "OE" '((lambda () (interactive) (find-file "~/.config/emacs/init.el") ) :which-key "emacs init.el")
  "Ob" '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)) ) :which-key "bibliography")
  "Op" '((lambda () (interactive) (find-file "~/BrainDump/bookshelf/") ) :which-key "pdf")
  "Oc" '(citar-open :which-key "citaiton")
  "OO" '((lambda () (interactive) (find-file org-default-notes-file) ) :which-key "org capture")
  "Oi" '((lambda () (interactive) (find-file "~/BrainDump/gtd/inbox.org") ) :which-key "inbox")
  "Om" '((lambda () (interactive) (find-file "~/BrainDump/gtd/main.org") ) :which-key "main")
  "Or" '((lambda () (interactive) (find-file (concat denote-directory "/phd/20240814T113502--00-garids-phd-index__phd.org")) ) :which-key "research index")
  "t" '(:ignore t :which-key "terminal.....................")
  "te" '(eshell :which-key "eshell emacs-shell")
  "tv" '(vterm :which-key "vterm  vterm")
  "tx" '(garid-custom/open-external-term-here :which-key "xternal terminal")
  "tm" '(tmr-with-description :which-key "timer")
  "u" '(:ignore :which-key "undo ........................")
  "ut" '(undo-tree-visualize :which-key "tree")
  "n" '(:ignore t :which-key "note........................")
  "nr" '(denote-rename-file :which-key "rename")
  "nf" '(denote-open-or-create :which-key "find")
  "nd" '((lambda () (interactive) (dired denote-directory) ) :which-key "dired")
  "nj" '(denote-journal-extras-new-entry :which-key "journal")
  "nJ" '(denote-journal-extras-new-or-existing-entry :which-key "Journal-find")
  "nil" '(denote-insert-link :which-key "insert-link")
  "nij" '(denote-journal-extras-link-or-create-entry :which-key "insert-journal-link")
  "nt" '(denote-template :which-key "template")
  "nI" '(garid-custom/denote-node-insert-immediate :which-key "Insert-note")
  "ns" '(consult-denote-grep :which-key "live-grep")
  "nF" '(consult-denote-find :which-key "consult-denote-find")
  "nl" '(:ignore t :which-key "denote link.................")
  "nli" '(denote-insert-link :which-key "link insert")
  "nlb" '(denote-find-backlink :which-key "find-backlink")
  "nlf" '(denote-find-link :which-key "find-forward-link")
  "nlB" '(denote-backlinks :which-key "backlink")
  "nlF" '(denote-link :which-key "forward-link")
  "nla" '(denote-add-links :which-key "add-links regex")
  "h" '(:ignore t :which-key "help...........................")
  "hh" '(describe-symbol :which-key "help symbol (elisp)")
  "hH" '(describe-key :which-key "help keybinding")
  "ho" '(org-info :which-key "org-info")
  "hw" '(which-key-show-top-level :which-key "which-key")
  "hm" '(consult-man :which-key "man")
  "hi" '(Info-goto-node :which-key "read docs")
  "p" '(:ignore t :which-key "project.....................")
  "pr" '(xref-find-references :which-key "references")
  "pR" '(consult-eglot-symbols :which-key "references consult")
  "pd" '(consult-flymake :which-key "diagnostic")
  "pf" '(project-find-file :which-key "find-file")
  "pz" '(project-switch-project :which-key "jump-to-other-proj")
  "ps" '(consult-git-grep :which-key "search git files")
  "pS" '(project-find-regexp :which-key "search-in-proj")
  "pk" '(project-kill-buffers :which-key "kill-buf-proj")
  "pl" '(consult-project-buffer :which-key "list-buf-proj")
  "pv" '(consult-imenu :which-key "variables")
  "v" '(:ignore t :which-key "variables....................")
  "vq" '(format-all-buffer :which-key "format-buffer")
  "vr" '(eglot-rename :which-key "rename variable")
  "b" '(harpoon-quick-menu-hydra :which-key "bookmark-harpoon")
  "B" '(:ignore t :which-key "bookmark......................")
  "B1" '(harpoon-go-to-1 :which-key "")
  "B2" '(harpoon-go-to-2 :which-key "")
  "B3" '(harpoon-go-to-3 :which-key "")
  "B4" '(harpoon-go-to-4 :which-key "")
  "B5" '(harpoon-go-to-5 :which-key "")
  "Ba" '(harpoon-add-file :which-key "add-file")
  "c" '(:ignore t :which-key "consult.......................")
  "co" '(consult-org-heading :which-key "consult-org-heading    [ ofh ]")
  "ci" '(consult-imenu :which-key "consult-imenu")
  "cm" '(consult-man :which-key "consult-man")
  "cr" '(consult-ripgrep :which-key "consult-ripgrep         [ ps ]")
  "cR" '(consult-recent-file :which-key "consult-recent-files")
  "cf" '(consult-flymake :which-key "consult-flymake")
  "cp" '(consult-project-buffer :which-key "consult-project-buffer  [ pl ]")
  "cd" '(consult-dir :which-key "consult-dir")
  "cF" '(consult-fd :which-key "consult-fd               [ F ]")
  "F" '(consult-fd :which-key "consult-fd              [ cF ]")
  "ca" '(consult-org-agenda :which-key "consult-org-agenda")
  "cg" '(consult-git-grep :which-key "consult-git-grep        [ ps ]")
  "l" '(consult-buffer :which-key "list-buffer")
  "L" '(:ignore t :which-key "buffer.....................")
  "Lr" '(revert-buffer-quick :which-key "revert (reload)")
  "Le" '(eval-buffer :which-key "evaluate buffer")
  "Li" '(ibuffer :which-key "ibuffer")
  "Ln" '(rename-buffer :which-key "rename")
  "L<" '(switch-to-prev-buffer :which-key "<prev")
  "L>" '(switch-to-next-buffer :which-key ">next")
  "Ld" '(crux-delete-file-and-buffer :which-key "delete")
  "Lc" '(clone-indirect-buffer :which-key "clone")
  "Ls" '(crux-create-scratch-buffer :which-key "scratch-buffer")
  "Lh" '(buf-move-left :which-key "move left")
  "Lj" '(buf-move-down :which-key "move down")
  "Lk" '(buf-move-up :which-key "move up")
  "Ll" '(buf-move-right :which-key "move right")
  "LL" '(tear-off-window :which-key "tear window to frame")
  "mg" '(magit-status :which-key "magit")
  "<" '(recompile :which-key "recompile")
  "sco" '(corfu-mode :which-key "corfu-mode")
  "se" '(eglot :which-key "eglot")
  "rg" '(rg :which-key "ripgrep")
  "g" '(:ignore t :which-key "git............................")
  "gS" '(git-gutter:stage-hunk :which-key "stage hunkk")
  "gs" '(git-gutter:popup-hunk :which-key "popup hunk")
  "gr" '(git-gutter:update-all-windows :which-key "refresh")
  "gg" '(git-gutter-mode :which-key "gutter-mode")
  "gn" '(git-gutter:next-hunk :which-key "jump-next")
  "gp" '(git-gutter:previous-hunk :which-key "jump-prev")
  "gd" '(magit-ediff-compare :which-key "magit-ediff-compare")
  "P" '(:ignore :which-key "python (inferior)...............")
  "Pr" '(python-shell-restart :which-key "restart")
  "PP" '(run-python :which-key "run-python")
  "Pk" '(comint-send-eof :which-key "kill  (also C-c C-d)")
  "oT" '(:ignore t :which-key "table.......................")
  "oTm" '(orgtbl-mode :which-key "mode")
  "oTc" '(orgtbl-create-or-convert-from-region :which-key "create")
  "oTT" '(org-table-toggle-column-width :which-key "toggle-hide-column")
  "oTC" '(org-table-toggle-coordinate-overlays :which-key "coordinate")
  "oc" '(org-capture :which-key "capture")
  "oa" '(:ignore t :which-key "agenda......................")
  "oag" '(org-agenda :which-key "agenda")
  "oab" '(org-timeblock :which-key "block")
  "r" '(:ignore t :which-key "roam........................")
  "rr" '((lambda () (interactive) (message "Current org-roam-directory = %s" org-roam-directory) ) :which-key "show directory")
  "rc" '(garid/choose-roam-directory :which-key "roam chande directory")
  "rd" '((lambda () (interactive) (dired org-roam-directory) ) :which-key "dired")
  "rs" '(consult-org-roam-search :which-key "consult-org-roam-search")
  "rf" '(consult-org-roam-file-find :which-key "consult-org-roam-file-find")
  "rI" '(garid-custom/org-roam-node-insert-immediate :which-key "garid-custom/org-roam-node-insert-immediate")
  "rlb" '(consult-org-roam-backlinks :which-key "consult-org-roam-backlinks")
  "rlf" '(consult-org-roam-forward-links :which-key "consult-org-roam-forward-links")
  "rlB" '(consult-org-roam-backlinks-recursive :which-key "consult-org-roam-backlinks-recursive")
  "rli" '(org-roam-node-insert :which-key "org-roam-node-insert")
  "rui" '(org-roam-ui-open :which-key "org-roam-ui-open")
  "rta" '(org-roam-tag-add :which-key "org-roam-tag-add")
  "rtr" '(org-roam-tag-remove :which-key "org-roam-tag-remove")
  "rbt" '(org-roam-buffer-toggle :which-key "org-roam-buffer-toggle")
)

(garids-keybind/in-org-mode
  "oo" '(org-open-at-point :which-key "open")
  "oO" '(garid/jump-label-def-of-ref-at-point-word :which-key "open ref def")
  "od" '(code-from-internet/org-link-open-parent-with-dired-at-point :which-key "directory-open")
  "," '(org-ctrl-c-ctrl-c :which-key "C-c C-c")
  "oTx" '(org-table-export :which-key "export as csv file")
  "oTs" '(org-table-sum :which-key "sum")
  "oTi" '(:ignore t :which-key "insert......................")
  "oTic" '(org-table-insert-column :which-key "column")
  "oTir" '(org-table-insert-row :which-key "row")
  "os" '(:ignore t :which-key "subtree.....................")
  "osy" '(org-copy-subtree :which-key "yank (verbatim copy)")
  "osa" '((lambda () (interactive) (org-archive-subtree-default-with-confirmation) ) :which-key "archive")
  "osY" '(org-id-copy :which-key "yank (ID)")
  "osv" '(org-mark-element :which-key "visually select element")
  "osm" '(org-refile :which-key "move/refile")
  "osd" '(org-cut-subtree :which-key "delete (aka cut)")
  "ost" '(org-toggle-narrow-to-subtree :which-key "toggle narrow")
  "osT" '(org-tidy-mode :which-key "tidy-mode")
  "osn" '(org-num-mode :which-key "num-mode")
  "oss" '(org-sort :which-key "sort")
  "osp" '(org-set-property :which-key "property")
  "osI" '(org-indent-mode :which-key "indent-mode")
  "osi" '(:ignore t :which-key "insert heading..............")
  "osia" '(org-insert-heading-after-current :which-key "after                  C-RET")
  "osih" '(org-insert-heading :which-key "heading                M-RET")
  "osis" '(org-insert-subheading :which-key "subheading")
  "osiH" '(org-insert-todo-heading :which-key "heading         todo M-S-RET")
  "osiA" '(org-insert-todo-heading-respect-content :which-key "After           todo C-S-RET")
  "osiS" '(org-insert-todo-subheading :which-key "subheading      todo")
  "ot" '(org-todo :which-key "todo")
  "oas" '(org-schedule :which-key "schedule")
  "oad" '(org-deadline :which-key "deadline")
  "oac" '(org-clock-in :which-key "clock in")
  "oaC" '(org-clock-out :which-key "clock in")
  "of" '(:ignore t :which-key "find.....................")
  "ofh" '((lambda () (interactive) (consult-org-heading) ) :which-key "heading")
  "ofn" '((lambda () (interactive) (consult-line "^#+name"   ) ) :which-key "named table/eq/src")
  "ofr" '((lambda () (interactive) (consult-line "^#+result" ) ) :which-key "result        /src")
  "ofs" '((lambda () (interactive) (consult-line "^#+begin_" ) ) :which-key "source src-block")
  "ofl" '((lambda () (interactive) (consult-line "\\\\label{.*}" ) ) :which-key "label")
  "ofr" '((lambda () (interactive) (consult-line "\\\\ref{.*}" ) ) :which-key "ref")
  "j" '(org-next-block :which-key "jump to next src-block")
  "k" '(org-previous-block :which-key "jump to prev src-block")
  "ox" '(:ignore t :which-key "export.......................")
  "oxh" '(org-html-export-to-html :which-key "html")
  "oxb" '(org-beamer-export-to-pdf :which-key "beamer")
  "oxp" '(org-latex-export-to-pdf :which-key "pdf latex")
  "oxH" '((lambda () (interactive) (org-html-export-to-html nil t) ) :which-key "Html                 subtree")
  "oxB" '((lambda () (interactive) (org-beamer-export-to-pdf nil t) ) :which-key "beamer               subtree")
  "oxP" '((lambda () (interactive) (org-latex-export-to-pdf nil t) ) :which-key "pdf latex            subtree")
  "oxr" '(org-reveal-export-to-html :which-key "reveal js")
  "oxo" '(gry/org-open-pdf :which-key "pdf open")
  "oxO" '(gry/org-open-html :which-key "html open")
  "op" '(org-latex-preview :which-key "preview")
  "ol" '(:ignore t :which-key "link........................")
  "old" '(garid-custom/org-toggle-link-n-emphasis :which-key "description-toggle")
  "oli" '(org-insert-link :which-key "insert")
  "oln" '(hydra-org-link-jumper/body :which-key "next-link")
  "olp" '(hydra-org-link-jumper/body :which-key "prev-link")
  "olo" '(org-open-at-point :which-key "open (same as SPC o o)")
  "olf" '(org-footnote-new :which-key "footnote-new")
  "olF" '(org-footnote-action :which-key "Footnote-action")
  "olc" '(org-cite-insert :which-key "citation")
  "oll" '(org-lint :which-key "lint")
  "oi" '(:ignore t :which-key "image.......................")
  "oii" '((lambda () (interactive) (insert "[[edraw:]]") ) :which-key "inline edraw")
  "oic" '(garid/put-emtpy-svg-img-at-point :which-key "create svg")
  "oip" '(org-download-clipboard :which-key "paste clipboard")
  "oiP" '(org-download-image :which-key "Paste from-path")
  "oid" '(org-download-delete :which-key "delete file")
  "oie" '(edraw-org-edit-regular-file-link :which-key "edit edraw")
  "oiE" '(org-download-edit :which-key "Edit externally")
  "oir" '(org-download-rename-at-point :which-key "rename file")
  "oit" '(garid-custom/org-toggle-display-images-n-edraw :which-key "toggle shot/hide image")
  "ois" '(:ignore t :which-key "size........................")
  "oisn" '((lambda () (interactive) (setq org-image-actual-width '(800)) ) :which-key "normal 800px")
  "oisb" '((lambda () (interactive) (setq org-image-actual-width '(1500)) ) :which-key "big    1500px")
  "oiss" '((lambda () (interactive) (setq org-image-actual-width '(400)) ) :which-key "small  400px")
)
#+end_src

* System:
** =dired= - Directory
#+begin_src emacs-lisp
(use-package dired
  :ensure   nil
  :demand   t
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first")
           (dired-kill-when-opening-new-dired-buffer t))
  :hook     ((dired-mode . denote-dired-mode)
             (dired-mode . dired-omit-mode  ))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h"          'dired-up-directory
    "l"          'dired-find-file
    (kbd "C-s")  'dired-omit-mode      ;; same keybinding with my lf config
    " "          'nil
    (kbd "N")    'mkdir
    (kbd "C-n")  'mkdir)

  (when (eq system-type 'berkeley-unix)   ;; change the main ls with gnu ls in bsd
    (setq insert-directory-program "gls"))
  )
#+end_src
** =dired= - Additionals
I don't use these not much
#+begin_src emacs-lisp
(use-package dired-preview :ensure t)
#+end_src
** =saveplace= - Save (last) cursor position
This mode saves the last cursor point when you close a file,
and later sets cursor at that point when you open that file.

#+begin_src emacs-lisp
(use-package saveplace
  :ensure nil
  :config (save-place-mode 1))
#+end_src
** =recentf= - Recent files
#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :demand t
  :custom
  (recentf-max-menu-items   30)
  (recentf-max-saved-items  30)
  :config
  (recentf-mode 1))
#+end_src
** shell script to open terminal                                            :shell_script:
#+begin_src bash :tangle garid/open_external_term.sh :shebang "#!/bin/bash"
# Open System termianl $TERMINAL at $1:
# nohup for exitting terminal that executed this script
# other wise terminal that executed this script just hangs there

# if $1 is directory; -> cd to this dir
if [[ -d $1 ]]; then
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n at: $1"
	cd "$1" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is file; -> cd to parent dir
elif [[ -f $1 ]]; then
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n near: $1"
	cd "$(dirname "$1")" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is neither directory nor file -> fail
else
	notify-send "Emacs external terminal" "$1\nwas not found\nOpening at Home"
	nohup "$TERMINAL" > /dev/null &
	return 0
fi
#+end_src
** Make long file faster
[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][this article]]

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right )
(setq         bidi-inhibit-bpa          t             )
#+end_src

* Misc Packages
** =crux=
#+begin_src emacs-lisp
(use-package crux :ensure t)
#+end_src
** =command-log-mode=
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
** =format-all=
#+begin_src emacs-lisp
(use-package format-all)
#+end_src
** =popper=
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle      )
         ("M-`"   . popper-cycle       )
         ("C-M-`" . popper-toggle-type ))
  :init
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "\\*eldoc\\*"
                                   "\\*eldoc.*\\*" ;;regex
                                   "\\*Outline.*\\*" ;;regex
                                   "\\*xref\\*"
                                   "\\*Help\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   "\\*devdocs\\*"
                                   "\\*lsp-bridge-doc\\*"
                                   "\\*git-gutter:diff\\*"
                                   "\\*Org Select\\*"
                                   "\\*Org Lint\\*"
                                   "\\*git-gutter:.*\\*"
                                   "\\* Merriam-Webster Thesaurus \\*"
                                   "CAPTURE-inbox.org"
                                   "CAPTURE-20230926T010607--todo__todo.org"
                                   help-mode
                                   compilation-mode))
  ;;:config
  (popper-mode      +1)
  (popper-echo-mode +1))
#+end_src
** =hydra=
#+begin_src emacs-lisp
(use-package hydra
  :config
  (defhydra hydra-org-link-jumper ()
    "zoom"
    ("n" org-next-link     "next")
    ("p" org-previous-link "prev"))
  )
#+end_src

** =exercism=
#+begin_src emacs-lisp
(use-package exercism)
#+end_src
** =zoom-window=
#+begin_src emacs-lisp
(use-package zoom-window
  :custom
  (zoom-window-mode-line-color "dark slate gray")
  )
#+end_src
** test karthinks consult reftex                                                    :test:
#+begin_src emacs-lisp
(use-package consult-reftex
  :straight (consult-reftex
             :type git
             :host github
             :branch "master"
             :repo "karthink/consult-reftex"))


(use-package reftex-xref
  :straight (reftex-xref
             :type git
             :host github
             :branch "master"
             :repo "karthink/reftex-xref"))
#+end_src
* Custom set variable:
[[https://www.youtube.com/watch?v=tw2-rI2bxSg&t=1s][Initial idea from Systems crafter]], [[https://emacs.stackexchange.com/a/18785/38482][and code structure from this answer on emacs stackexchange]], and need to set ~enble-local-eval~ to ~t~.

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   '((eval setq org-download-image-dir
           (file-relative-name
            (concat "./data/"
                    (file-name-as-directory
                     (org-id-get 1))))
           org-ipe-folder org-download-image-dir)
     (eval setq org-download-image-dir
           (file-relative-name
            (concat "./data/"
                    (file-name-as-directory
                     (car
                      (split-string
                       (file-name-base
                        (buffer-file-name))
                       "--")))))
           org-ipe-folder org-download-image-dir)
     (eval setq org-download-image-dir
           (file-relative-name
            (concat "./data/"
                    (file-name-as-directory
                     (org-id-get 1)))))
     (eval setq org-download-image-dir
           (file-relative-name
            (concat "./data/"
                    (file-name-as-directory
                     (car
                      (split-string
                       (file-name-base
                        (buffer-file-name))
                       "--"))))))
     (dired-omit-files . "\\`[.]?#\\|\\`[.][.]?\\'\\|\\.html\\'\\|\\.tex\\'"))))
#+end_src
* Finish Notifier
#+begin_src emacs-lisp
(call-process-shell-command "notify-send \"Emacs\" \"Emacs has initialized\" &")
#+end_src

