#+title:  My Emacs Configuration
#+author: Garid Zorigoo

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[mongolian,english]{babel}

#+startup: show2levels
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: t

* Package Manager:
** Package Repositories 
#+begin_src emacs-lisp
;; Package repos
(setq package-archives
      '(("melpa"        . "https://melpa.org/packages/")
        ("elpa"         . "https://elpa.gnu.org/packages/")
        ("nongnu"       . "https://elpa.nongnu.org/nongnu/")))
#+end_src
** Package Manager
#+begin_src emacs-lisp
;; BOOTSTRAP USE-PACKAGE <= not sure what it does
(package-initialize) (setq use-package-always-ensure t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+end_src
* Vi Movement Related
** vim-undo
#+begin_src emacs-lisp
  ;; Vim style undo not needed for emacs 28
  (use-package undo-fu)
#+end_src
** evil
#+begin_src emacs-lisp
;; Vim Bindings
(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit     )
         ("M-j"      . evil-scroll-line-down    )
         ("M-k"      . evil-scroll-line-up      )
         ("M-d"      . evil-scroll-page-down    )
         ("M-u"      . evil-scroll-page-up      ))
  :init
  ;; (setq evil-search-module 'evil-search)
  (setq evil-want-keybinding	nil)
  (setq evil-want-C-i-jump	nil)
  ;; no vim insert bindings
  (setq evil-undo-system 'undo-fu)
  :config (evil-mode 1))
#+end_src
** evil-collection
#+begin_src emacs-lisp
  ;;; Vim Bindings Everywhere else
  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src
* Theme & Colors
** Font
#+begin_src emacs-lisp
(set-face-attribute             'default nil :font "Iosevka Gry" :height 120)
(setq default-frame-alist       '((font . "Iosevka Gry")))
#+end_src

** Theme
#+begin_src emacs-lisp
(eshell-git-prompt-use-theme 'powerline)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(line-number        ((t (:background "gray15"   :foreground "#7c6f64"))))
 '(mode-line          ((t (:background "dim gray" :foreground "white"))))
 '(mode-line-inactive ((t (:background nil)))))

;; (load-theme 'modus-vivendi)
(load-theme 'gruvbox-dark-hard t)

;; (unless (display-graphic-p)
;; (require 'evil-terminal-cursor-changer)
;; (evil-terminal-cursor-changer-activate) ; or (etcc-on) )

;;transparent emacs
(add-to-list 'default-frame-alist '(alpha 95 95))
#+end_src
** Emacs Interface config
#+begin_src emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode   -1)        ; Disable the toolbar
  (tooltip-mode    -1)        ; Disable tooltips
  (set-fringe-mode 15)        ; Give some breathing room
  (menu-bar-mode   -1)        ; Disable the menu bar
#+end_src
** Display Number & cursor-line highlightnig
#+begin_src emacs-lisp
  ;; setting line
  (use-package display-line-numbers)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)

  ;; cursor light
  ;; (use-package beacon)
  ;; (setq beacon 0.1)
  ;; (beacon-mode 1)
  (global-hl-line-mode 1)
#+end_src

* M-x related 
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ("C-j"   . vertico-next        ) ("M-j"   . vertico-next        )
              ("C-k"   . vertico-previous    ) ("M-k"   . vertico-previous    )
              ("C-f"   . vertico-exit        ) ("M-f"   . vertico-exit        )
              ("C-g"   . vertico-grid-mode   ) ("M-g"   . vertico-grid-mode   )
              ("C-h"   . vertico-grid-left   ) ("M-h"   . vertico-grid-left   )
              ("C-l"   . vertico-grid-right  ) ("M-l"   . vertico-grid-right  )
              ("C-u"   . vertico-scroll-up   ) ("M-u"   . vertico-scroll-up   )
              ("C-d"   . vertico-scroll-down ) ("M-d"   . vertico-scroll-down )
              ("C-S-g" . vertico-last        ) ("M-S-g" . vertico-last        )
              ("M-n"   . vertico-next        ) ("M-p"   . vertico-previous    ))
  :custom (vertico-cycle t)
  :init (vertico-mode))
#+end_src
** margin
#+begin_src emacs-lisp
;; brief explanations on M-x entries
(use-package marginalia
  :after vertico
  :ensure t
  :custom (marginalia-annotators
           '(marginalia-annotators-heavy
             marginalia-annotators-light nil))
  :init (marginalia-mode))
#+end_src
** consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("M-f"  . consult-line)))
#+end_src
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  ;; :commands (orderless)
  :custom
  (completion-styles '(orderless basic))
  ;; (completion-styles '(orderless flex))
  ;;(completion-category-overrides
   '((file (styles basic partial-completion)))
  )
#+end_src
** savehist
#+begin_src emacs-lisp
(use-package savehist
  :init (savehist-mode))
#+end_src
* Org
** org
#+begin_src emacs-lisp
(use-package org
  :bind (:map org-mode-map
              ("C-S-j" . org-next-visible-heading       )
              ("C-S-k" . org-previous-visible-heading   )
              ("C-S-k" . org-previous-visible-heading   ))

  ;; ("C-'" . org-edit-special)
  ;; :map org-src-mode-map
  ;; ("C-'" . org-edit-src-exit)
  ;; :bind (:map org-agenda-mode-map
  ;; ("j" . org-agenda-next-item)
  ;; ("k" . org-agenda-previous-item) )
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-ellipsis "▼ " org-hide-emphasis-markers t)
  (setq org-latex-active-timestamp-format   "\\textcolor{orange}{%s}")
  (setq org-latex-inactive-timestamp-format  "\\textcolor{blue}{%s}")
  (setq org-highlight-latex-and-related '(native latex script entities))

  (setq org-log-done t)
  (setq org-image-actual-width '(800)) ; sets images size
  (setq org-file-apps
        '((auto-mode . emacs) ;("\\.x?html?\\'" . "firefox %s")
          ("\\.gif\\'"   . "mpv \"%s\""		)
          ("\\.mp4\\'"   . "mpv \"%s\""		)
          ("\\.png\\'"   . "sxiv \"%s\""	)
          ("\\.jpeg\\'"  . "sxiv \"%s\""	)
          ("\\.jpg\\'"   . "sxiv \"%s\""	)
          ("\\.pdf\\'"   . "sioyek \"%s\""	)
          ("\\.mkv\\'"   . "mpv \"%s\""		)
          ("\\.xopp\\'"  . "xournalpp \"%s\""	)))

  ;; latex listing (for source code coloring)
  (setq org-latex-listings t)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))

  ;;latex export (for sourc ecode coloring)
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-src-tab-acts-natively t)
  (setq org-latex-format-headline-function
        'my-org-latex-format-headline-function)
  (setq electric-pair-inhibit-predicate
        (lambda (c) ;disables <> from electric-pair-mode's
          (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))

  (setq org-todo-keywords
        '((sequence
           "TODO(t)"  "STARTED(s)"  "WAITING(w)"
	   "|"
           "PROCESSED(p)" "DONE(d)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces
        '(("TODO"       . org-warning   )
          ("STARTED"    . "orange"      )
          ("WAITING"    . "yellow"      )
          ("PROCESSED"  . "dim gray"	)
          ("CANCELLED"  . (:foreground "gray30" :weight bold))))


  ;; following is the setup for org-agenda only taking 14+14 window
  ;; org roam daily entris for the agenda-files list
  (load "~/.config/emacs/garid/the-org-agenda-14day-window.el")
  (setq org-agenda-files
        (my/filter-org-roam-dailies "~/roamnotes/daily/" 14 14))

  (add-to-list 'org-agenda-files
               "~/roamnotes/20230329145157-gtd_projects_multi_steps.org")
  (plist-put org-format-latex-options :scale 1.7)
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0)
  )
#+end_src

** after-org
#+begin_src emacs-lisp
;; org mode src <-s-tab
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el"   .  "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("she"  .  "src shell"))
  (add-to-list 'org-structure-template-alist '("te"   .  "src text" ))
  (add-to-list 'org-structure-template-alist '("tm"   .  "src tmux" ))
  (add-to-list 'org-structure-template-alist '("dot"  .  "src dot" ))
  (add-to-list 'org-structure-template-alist '("dotf" .  "src dot :file /home/garid/orgfiles/... :exports results :tangle no :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("tmf"  .  "src tmux :session hello :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("py"   .  "src python"))
  (add-to-list 'org-structure-template-alist '("pyS"  .  "src python :session mysess :results output :exports both :cache no"))
  (add-to-list 'org-structure-template-alist '("sq"   .  "sqlite"))
  (add-to-list 'org-structure-template-alist '("js"   .  "src js"))

  (add-to-list 'org-structure-template-alist '("mk"   . "src makefile :tangle yes"))
  (add-to-list 'org-structure-template-alist '("cl"   . "src C"))

  (setq org-agenda-start-with-log-mode t)
  (setq org-default-notes-file  "~/roamnotes/20220920023604-captures.org")
  )
#+end_src
** Heading latex export style
#+begin_src emacs-lisp
(defun my-org-latex-format-headline-function
    (todo todo-type priority text tags _info)
  "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
  (concat
   (and todo (format "{\\framebox{\\bfseries\\rfamily\\color{%s} %s}} "
                     (pcase todo-type ('todo "olive") ('done "teal")) todo))
   (and priority (format "\\framebox{\\#%c} " priority)) text
   (and tags (format "\\hfill{}\\textsc{%s}"
                     (mapconcat #'org-latex--protect-text tags ":")))))
#+end_src
** org-babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python    . t)  (emacs-lisp . t)
     (lisp       . t)  (latex      . t)
     (shell      . t)  (C          . t)
     (dot        . t)  (makefile   . t)
     (sqlite     . t)  (js         . t)
     ;; (jupyter   . t) ;; (rust      . t) ;(scad       . t)
     ))
#+end_src
** dw/org-mode-setup
#+begin_src emacs-lisp
  (defun dw/org-mode-setup ()
      (org-indent-mode) ;;;;;this for lag ;(variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1)
      ;; (setq evil-auto-indent nil)      ;;turned off on fed 06, to see what happens
      ;; (setq org-latex-active-timestamp-format    "\\textcolor{orange}{\\texttt{%s}}")
      ;; (setq org-latex-inactive-timestamp-format  "\\textcolor{blue}{\\texttt{%s}}")
      )
#+end_src
** org toggle link n emphisis
#+begin_src emacs-lisp
(defun org-toggle-link-n-emphasis ()
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (org-toggle-link-display)
    (font-lock-update))
#+end_src
* Org Roam:
** org roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/roamnotes")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+auto_tangle: nil\n#+STARTUP: show2levels\n"))))
  (org-roam-capture-templates
   '(("d" "Default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+author: Garid Z.\n#+date: %U\n#+auto_tangle: nil\n")
      :unnarrowed t)
     ("l" "Programming language" plain
      "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("a" "Article/Thesis/Paper" plain
      "* Meta:\n** Date:\n** Type:\n** Author(s):\n** Category:\n** DOI:\n** Link:\n** Journal:\n** CitingID: \n** TODO added to Article HUB\n* Directory: %?\n\n* Interesting Ideas:\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: AcademicArticle\n#+startup: show1levels\n")
      :unnarrowed t)
     ("b" "Book notes" plain
      "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\nDOI: %^{DOI}\n\n* Summary\n\n%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "Project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project\n#+auto_tangle: nil")

      :unnarrowed t)
     ))
  :config
  (org-roam-setup)
  (require 'org-roam-dailies)

  (org-roam-db-autosync-mode))
#+end_src
** org roam node insert immediade
#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates
	 (list (append (car org-roam-capture-templates)
		       '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
* Org Misc:
** org download
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :config (org-download-enable))
#+end_src
** org auto tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook   (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))
#+end_src
** org contacts
#+begin_src emacs-lisp
;; (global-display-fill-column-indicator-mode)
(use-package org-contacts
  :ensure t
  :custom (org-contacts-files ' ("~/Documents/contacts.org")))
#+end_src
** bibliograph
#+begin_src emacs-lisp
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography '("~/Documents/bib/references.bib"))
  (org-cite-insert-processor    'citar)
  (org-cite-follow-processor    'citar)
  (org-cite-activate-processor  'citar)
  (citar-bibliography org-cite-global-bibliography)
  ;; (setq citar-library-paths '("~/Documents/papers"))
  ;; optional: org-cite-insert is also bound to C-c C-x C-@
  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))


(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :config
  (citar-org-roam-mode)
  (setq citar-org-roam-note-title-template
        "Article: ${author} - ${title}\n#+subtitle: Garid's notes about this article\n#+filetags: ${tags}\n\n* Journal: ${publisher}\n* pdfpath: \n* Interesting Ideas\n")
  )

;;https://lucidmanager.org/productivity/emacs-bibtex-mode/
(setq bibtex-dialect 'biblatex)
#+end_src

** org tmux babel
#+begin_src emacs-lisp
(use-package ob-tmux
    ;; Install package automatically (optional)
    :ensure t
    :custom
    (org-babel-default-header-args:tmux
     '((:results . "silent")	;
       (:session . "default")	; default tmux session to send code to
       (:socket  . nil)))	; default tmux socket to communicate with
    ;; The tmux sessions are prefixed with the following string.
    ;; You can customize this if you like.
    (org-babel-tmux-session-prefix "ob-")
    ;; The terminal that will be used.
    ;; You can also customize the options passed to the terminal.
    ;; The default terminal is "gnome-terminal" with options "--".
    (org-babel-tmux-terminal "st")
    (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e"))
    ;; Finally, if your tmux is not in your $PATH for whatever reason, you
    ;; may set the path to the tmux binary as follows:
    (org-babel-tmux-location "/usr/bin/tmux"))
#+end_src
** org-indent
#+begin_src emacs-lisp
(require 'org-indent)
#+end_src
** org-bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list
   '("◉ " "○ " "● " "○ " "● " "○ " "● ")))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Replace list hyphen with dot				    ;;
;; ;; (font-lock-add-keywords 'org-mode				    ;;
;; ;; '(("^ *\\([-]\\) "					    ;;
;; (0 (prog1 () (compose-region					    ;;
;; 	      (match-beginning 1) (match-end 1) "•"))))))	    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
** org-tree-slide
#+begin_src emacs-lisp
(use-package org-tree-slide)
#+end_src
* Development Environment / Programming
** Corfu
#+begin_src emacs-lisp
;; corfu settings are taken from Gavin-Freeborn's (YT) configuraiton
(use-package corfu
  :custom
  (corfu-cycle t)               ; allow cycling
  (corfu-auto t)                ; enable auto completion
  (corfu-auto-prefix 2)         ; enable auto completion
  (corfu-auto-delay 0.0)        ; enabling auto completion
  (corfu-quit-at-boundary 'seperator)
  (corfu-echo-documentation 0.25)
  (corfu-preview-current 'insert)
  (corfu-preselect-first nil)
  :bind ( :map corfu-map
        ("M-SPC"        . corfu-insert-separator        )
        ;; ("SPC"        . corfu-insert-separator        )
        ;; ("*"            . corfu-insert-separator        )
        ;("M-SPC" . (lambda () (interactive) (insert #x268b))) 
        ("RET"          . nil                           )
        ("TAB"          . corfu-next                    )
        ([tab]          . corfu-next                    )
        ("S-TAB"        . corfu-previous                )
        ([backtab]      . corfu-previous                )
        ("S-<return>"   . corfu-insert                  )
        ("M-h"          . corfu-insert                  ))
  :init
  (global-corfu-mode)
  (corfu-history-mode))
#+end_src
** Yassnippets
#+begin_src emacs-lisp
(use-package yasnippet
    :config
    (setq yas/triggers-in-field t); Enable nested triggering of snippets
    ;; (setq yas-key-syntaxes (append yas-key-syntaxes '(yas-try-key-from-dot)))
    (yas-global-mode 1)

    (defcustom yas-new-snippet-default "\
  # -*- mode: snippet -*-
  # contributor: Garid Zorigoo <garidzorigoo@gmail.com>
  # name: $1
  # key: ${2:${1:$(yas--key-from-desc yas-text)}}
  # --
  $0`(yas-escape-text yas-selected-text)`"
      "Default snippet to use when creating a new snippet.
  If nil, don't use any snippet."
      :type 'string)
    )
#+end_src
** LSP-bridges
#+begin_src emacs-lisp
  ;; (add-to-list 'load-path "/home/garid/otherGit/lsp-bridge/")
  ;; (require 'lsp-bridge)
  ;; (setq lsp-bridge-enable-profile t)
  ;; (setq lsp-bridge-python-lsp-server "pylsp")
  ;;  (global-lsp-bridge-mode)
#+end_src
** scad
#+begin_src emacs-lisp
  (use-package scad-mode)
#+end_src
** c
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
#+end_src
** rg
#+begin_src emacs-lisp
  ;; (use-package ripgrep)
  (use-package rg)
#+end_src
** parenthesis: (electric-pair-mode)
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
* Garid
** sending current project to IP
#+begin_src emacs-lisp
(defun gry/project-send ()
  (interactive)
  (shell-command
   (concat "rsync -rtvzP "
	   (nth 2 (project-current)) ;; This will get the project dir
           " pi@192.168.11.12:~/Spectrum-Catcher-V3")))
#+end_src
** Distraction 
#+begin_src emacs-lisp
(defun gry/distraction-free-on ()
  (interactive)
  (writeroom-mode 1)
  (turn-off-evil-mode)
  (display-line-numbers-mode -1)
  (set-face-attribute 'default nil :font "Iosevka Etoile" :height 140))
  ;; (set-face-attribute 'default nil :font "Terminus" :height 140)

(defun gry/distraction-free-off ()
  (interactive)
  (writeroom-mode -1)
  (turn-on-evil-mode)
  (display-line-numbers-mode 1)
  (set-face-attribute 'default nil :font "Iosevka Gry" :height 120))
#+end_src
** opening pdf for export  (org)
#+begin_src emacs-lisp
(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

(defun gry/org-open-pdf ()
  (interactive)
  (shell-command
   (concat "zathura "
	   (replace-in-string ".org" ".pdf &" buffer-file-name))))
#+end_src
** scripted el in emacs/garid
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.config/emacs/garid"))
(add-to-list 'load-path (expand-file-name "~/.config/emacs/Emacs-TeQ"))

(register-input-method
 "mongolian" "Mongolian" 'quail-use-package
 "MN-" "(Монгол) - Mongolian Keyboard Layout"
 "mongolian-input-method.el")

(register-input-method
 "TeQ-Math" "Emacs-Teq-Latex" 'quail-use-package
 "TeQ-" "TeQ-Math input"
 "Emacs-TeQ.el")

(load "~/.config/emacs/garid/garids-abbrev-typos.el")	;; garid typos
(load "~/.config/emacs/garid/garid-gtd.el")		;; garid typos

;; (setq path-to-ctags "/usr/bin/ctags")
;; (defun create-tags (dir-name)
;; "Create tags file."
;; (interactive "DDirectory: ")
;; (shell-command (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name))))

(fset 'gry-calc-horizontal-concat
      (kmacro-lambda-form [?v ?t tab ?v ?t ?| ?v ?t] 0 "%d"))
#+end_src
** align regexp untabify
#+begin_src emacs-lisp
(defun align-regexp-untabify (beg end)
  (interactive "r")
  (align-regexp beg end (concat "\\(\\s-*\\)" (read-string "Align regexp: ")) )
  (untabify beg end))
#+end_src
** COMMENT noTabs:
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
;; Align with spaces only
(defadvice align-regexp (around align-regexp-with-spaces)
  "Never use tabs for alignment."
  (let ((indent-tabs-mode nil)) ad-do-it))
(ad-activate 'align-regexp)
#+end_src

#+RESULTS:
: align-regexp
** toging asldfkjasd
#+begin_src emacs-lisp
(defun toggle_input_method_mn_teq ()
  (interactive)
  (if (string= default-input-method nil )
      (set-input-method "mongolian")
    (if (string= default-input-method "TeQ-Math")
	(set-input-method "mongolian")
      (if (string= default-input-method "mongolian")
	  (set-input-method "TeQ-Math")))))
#+end_src
* Keybinding
** Global keybinding:
#+begin_src emacs-lisp
(global-set-key (kbd "M-q") 'delete-window)
(global-set-key (kbd "M-Q") 'kill-current-buffer)
(global-set-key (kbd "M-w") 'ace-window)
(global-set-key (kbd "M-J") 'other-window)
(global-set-key (kbd "M-K") #'(lambda() (interactive) (other-window -1)))
(global-set-key (kbd "M-F") 'avy-goto-char)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(global-set-key (kbd "M-W") 'evil-window-vnew)
(global-set-key (kbd "M-E") 'evil-window-vsplit)

(global-set-key (kbd "M-S") 'avy-goto-char-2)
(global-set-key (kbd "M-s") 'avy-goto-char)
(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-|") 'toggle_input_method_mn_teq)
#+end_src
** general main
#+begin_src emacs-lisp
(use-package general
    :config
    (general-evil-setup t)

    ;; Main leader key ;;
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    ;; Secondary leader key ;;
    (general-create-definer rune/leader-keys-other
      :keymaps '(normal insert visual emacs)
      :prefix "M-SPC"
      :global-prefix "C-M-SPC"))
#+end_src
** general main1
#+begin_src emacs-lisp
;; Main Keychords
(rune/leader-keys
  "SPC" '(execute-extended-command              :which-key "M-x")
  "d"   '(dired-jump                            :which-key "(d)ired")
  "f"   '(find-file                             :which-key "(f)ind-file")
  "Fw"  '(find-file-other-window                :which-key "(F)ile-other-(w)indow")
  "Ff"  '(find-file-other-frame                 :which-key "(F)ile-other-(f)rame")

  "n"   '(dired-sidebar-jump-to-sidebar         :which-key "(n)-side-tree")
  "N"   '(dired-sidebar-hide-sidebar            :which-key "(N)-side-tree-close")

  "ZQ"  '(kill-emacs                            :which-key "quit")
  "l"   '(consult-buffer                        :which-key "(l)ist-buffers")
  "Lr"  '(revert-buffer-quick                   :which-key "(L-r)evert")
  "Lw"  '(consult-buffer-other-window           :which-key "(L-w)indow")
  "Lf"  '(consult-buffer-other-frame            :which-key "(L-f)rame")
  "Le"  '(eval-buffer                           :which-key "(L-e)val")
  "Lb"  '(ibuffer                               :which-key "(L-(b)uffer")
  "Li"  '(ibuffer                               :which-key "(L-i)buffer")
  "Ln"  '(rename-buffer                         :which-key "(L-n)ame")
  "Lp"  '(switch-to-prev-buffer                 :which-key "(L-p)rev")
  "LP"  '(switch-to-next-buffer                 :which-key "(L-P)next")
  "Ld"  '(crux-delete-file-and-buffer           :which-key "(L-d)delete")
  "bn"  '(rename-buffer                         :which-key "(b-n)ame")

  "ca"  '(calc                                  :which-key "(ca)lc")
  "cc"  '(lsp-bridge-diagnostic-jump-next       :which-key "lsp-bridge-")
  "co"  '(consult-org-heading                   :which-key "(c-o)rg")
  "cm"  '(consult-imenu                         :which-key "(c-i(m)enu")
  "cM"  '(consult-man                           :which-key "(c-M)an")
  "cr"  '(consult-ripgrep                       :which-key "(c-r)ipgrep")
  "cf"  '(consult-git-grep                      :which-key "(c-f)gitgrep")
  "cg"  '(consult-goto-line                     :which-key "(c-g)oto-line")
  "cp"  '(consult-project-buffer                :which-key "(c-p)roject")

  "bm"  '(consult-bookmark                      :which-key "(b)ook(m)ark-consult")
  "bs"  '(bookmark-set                          :which-key "(b)m-(s)et")
  "bd"  '(bookmark-delete                       :which-key "(b)m-(d)elete")
  "bD"  '(bookmark-delete-all                   :which-key "(b)m-(D)eletall")

  "mg"   '(magit-status                         :which-key "(m)a(g)it")

  "wo"  '(eww-open-in-new-buffer                :which-key "(w)eb-(o)pen")
  "ws"  '(eww-search-words                      :which-key "(w)eb-(s)earch")
  ;; "wi"  '(evil-insert                        :which-key "(w)eb-(i)nsert"                  )

  "pf"  '(project-find-file                     :which-key "(p-f)ile")
  "pd"  '(project-find-dir                      :which-key "(p-d)ir")
  "pc"  '(project-compile                       :which-key "(p-c)ompile")
  "pe"  '(project-eshell                        :which-key "(p-e)shell")
  "ps"  '(project-find-regexp                   :which-key "(p-s)find-regexp")
  "pr"  '(project-query-replace-regexp          :which-key "(p-r)eplace")
  "pk"  '(project-kill-buffers                  :which-key "(p-k)ill-buffers")
  "pl"  '(consult-project-buffer                :which-key "(p-l)ist-buffers")
  "pL"  '(project-list-buffers                  :which-key "(p-L)ist-buffers")
  "pp"  '(gry/project-send                      :which-key "(p-p)send")

  "e"   '(eshell                                :which-key "(e)shell")
  "E"   '(elfeed                                :which-key "(E)lfeed")
  "vt"  '(vterm                                 :which-key "(v)ir-(t)erm")

  ;; "oto" '((lambda () (interactive) (find-file "~/orgfiles/Task.org"))
  ;; :which-key "(o)-(t)ask-(o)pen")
  "oe"  '((lambda () (interactive) (find-file "~/.config/emacs/init.org"))
          :which-key "(o)pen-(e)macs-init.org")
  "ob"  '((lambda () (interactive) (find-file "~/Documents/bib/references.bib"))
          :which-key "(o)pen-(b)ookmark")
  "oE"  '((lambda () (interactive) (find-file-other-frame "~/.config/emacs/init.el"))
          :which-key "(o)pen-(E)macs-init.el")

  "om"  '(org-refile          :which-key "(o-m)ove-subtree")
  ","   '(org-ctrl-c-ctrl-c   :which-key "C-c C-c")
  "<"   '(recompile           :which-key "recompile")

  "otT"  '(org-todo                                         :which-key "(o-t)odo-(T)")
  "ott"  '((lambda () (interactive) (org-todo "TODO"))      :which-key "(o-t)odo-(t)odo")
  "ots"  '((lambda () (interactive) (org-todo "STARTED"))   :which-key "(o-t)odo-(s)chedule")
  "otw"  '((lambda () (interactive) (org-todo "WAITING"))   :which-key "(o-t)odo-(w)ait")
  "otd"  '((lambda () (interactive) (org-todo "DONE"))      :which-key "(o-t)odo-(d)one")
  "otc"  '((lambda () (interactive) (org-todo "CANCELLED")) :which-key "(o-t)odo-(c)ancel")
  "otp"  '((lambda () (interactive) (org-todo "PROCESSED")) :which-key "(o-t)odo-(p)rocessed")
  "otn"  '((lambda () (interactive) (org-todo ""))          :which-key "(o-t)odo-(n)one")

  "os"  '(org-schedule                                      :which-key "(o-s)chedule")
  "oa"  '(org-agenda                                        :which-key "(o-a)genda")
  "od" '((lambda () (interactive) (org-deadline ""))        :which-key "(o-d)eadline")


  "oft" '((lambda () (interactive) (consult-line "name tab"))    :which-key "(o-f)ind-(t)able")
  "ofe" '((lambda () (interactive) (consult-line "name eq"))     :which-key "(o-f)ind-(e)q")
  "off" '((lambda () (interactive) (consult-line "name fig"))    :which-key "(o-f)ind-(f)ig")
  "ofd" '((lambda () (interactive) (consult-line "downloaded"))  :which-key "(o-f)ind-(d)ownload")
  "ofn" '((lambda () (interactive) (consult-line "name"))        :which-key "(o-f)ind-(n)ame")
  "ofs" '((lambda () (interactive) (consult-line "begin_src"))   :which-key "(o-f)ind-(s)ource")

  ;; "ost"  '((lambda () (interactive)
  ;;                     (org-set-tags-command) ; sets images size
  ;;                     )                                                                                      :which-key "afs")

  "oTm" '(orgtbl-mode                           :which-key "(o-T)able-(m)ode")
  "oTc" '(orgtbl-create-or-convert-from-region  :which-key "(o-T)able-(c)reate")

  "op"   '(org-latex-preview                    :which-key "(o-p)review")
  "oy"   '(org-copy-subtree                     :which-key "(o-y)ank-subtree")


  "oxb"  '(org-beamer-export-to-pdf             :which-key "(o-x)-(b)eamer")
  "oxB"   '((lambda () (interactive)
	      (org-beamer-export-to-pdf nil t))
            :which-key "(o-x)port-subtree-(P)df")
  "oxp"  '(org-latex-export-to-pdf              :which-key "(o-x)port-(p)df")
  "oxP"   '((lambda () (interactive)
	      (org-latex-export-to-pdf nil t))
            :which-key "(o-x)port-subtree-(P)df")


  "oxo"  '(gry/org-open-pdf                             :which-key "(o-x)-(P)df-open")
  "old"  '(org-toggle-link-n-emphasis                   :which-key "(o-l)ink-(d)isplay")
  "oil"  '((lambda () (interactive) (org-insert-link))  :which-key "(o-i)nsert-(l)ink")
  "oip"  '(org-download-clipboard                       :which-key "(o-i)mage-(p)aste-clipboard")
  "oit"  '(org-toggle-inline-images                     :which-key "(o-i)mage-(t)oggle")
  "oib"  '(org-cite-insert                              :which-key "(o-i)nsert-(c)ite")

  "oisn"  '((lambda () (interactive) (setq org-image-actual-width '(800)))      :which-key "(o-i-s)ize-(n)ormal")
  "oisb"  '((lambda () (interactive) (setq org-image-actual-width '(1500)))     :which-key "(o-i-s)ize-(b)ig")
  "oiss"  '((lambda () (interactive) (setq org-image-actual-width '(400)))      :which-key "(o-i-s)ize-(s)mall")

  "oc"  '(org-capture                           :which-key "(o-c)apture")
  "oo"  '(org-open-at-point                     :which-key "(o-o)pen")

  ;;orgroams
  "rl"  '(org-roam-buffer-toggle                :which-key "(r-l)toggle")
  "rL"  '(org-roam-buffer-display-dedicated     :which-key "(r-L)dedicated")
  "rf"  '(org-roam-node-find                    :which-key "(r-f)ind")
  "ri"  '(org-roam-node-insert                  :which-key "(r-i)nsert")
  "rI"  '(org-roam-node-insert-immediate        :which-key "(r-I)nsert-immediate")

  ;; "ora"  '((lambda () (interactive) TODO to test this
  ;; (org-id-get-create)
  ;; (lambda () (interactive)
  ;; (org-roam-alias-add))
  ;; )                                                                                                  :which-key "afs")

  ;;org-roam-dailies
  "rn" '(org-roam-dailies-capture-today         :which-key "(r)-daily-(n)ew-capture")
  "rr" '(org-roam-dailies-goto-today            :which-key "(r)-daily-(t)oday")
  "rt" '(org-roam-dailies-goto-tomorrow         :which-key "(r)-daily-(T)omorrow")
  "ry" '(org-roam-dailies-goto-yesterday        :which-key "(r)-daily-(y)esterday")
  "rD" '(org-roam-dailies-capture-date          :which-key "(r)-daily-(d)ate")
  "rd" '(org-roam-dailies-goto-date             :which-key "(r)-daily-goto-(D)ate")
  "r>" '(org-roam-dailies-goto-next-note        :which-key "(r)-daily-(>)next")
  "r<" '(org-roam-dailies-goto-previous-note    :which-key "(r)-daily-(<)prev")

  "rp"  '((lambda () (interactive)
            (find-file "~/roamnotes/20230329145157-gtd_projects_multi_steps.org"))
          :which-key "(r)oam-(p)roject")

  ;; org code movement
  "j"   '(org-next-block     :which-key "")
  "k"   '(org-previous-block :which-key "")
  "J"   '(org-next-link      :which-key "")
  "K"   '(org-previous-link  :which-key "")


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "RET" '((lambda () (interactive)       ;;
  ;;           (evil-open-below "")         ;;
  ;;           (org-insert-todo-heading "") ;;
  ;;           (org-insert ""))             ;;
  ;;         :which-key "ads")              ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  "h"   '(describe-symbol :which-key "Describe-Sym")
  "H"   '(describe-key    :which-key "Describe-Key")



  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4)) :which-key "(s)ys-number(l)ine-(4)")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3)) :which-key "(s)ys-number(l)ine-(3)")
  "srf" '((lambda () (interactive) (recentf-open-files))                :which-key "(s-r)ecent-(f)iles")
  "st"  '(gry/open-term-at              :which-key "(s-t)erminal")
  "sd"  '(gry/distraction-free-on       :which-key "(s-d)istraction-free-on")
  "sD"  '(gry/distraction-free-off      :which-key "(s-D)istraction-free-off")
  "sns" '(crux-create-scratch-buffer    :which-key "(s-n)ew-(s)cratch-buf")
  "ss"  '((lambda () (interactive) (shell-command "flameshot gui"))     :which-key "(s-s)creenshot")
  "slm" '(scroll-lock-mode                                              :which-key "(s)croll-(l)ock-(m)ode")
  "scl"  '((lambda () (interactive)
             (command-log-mode)
             (global-command-log-mode)
             (clm/open-command-log-buffer))
           :which-key "(s-c)md-(l)og")

  "svl" '(global-display-fill-column-indicator-mode     :which-key "(s-v)ertical-(l)ine")
  "sw" '(whitespace-mode                                :which-key "(s-w)hitespace")

  "sco" '(corfu-mode                                    :which-key "(s-c)orfu-(m)ode")
  "se"  '(eglot                                         :which-key "(s-e)glot")

  "rg"  '(rg                                            :which-key "(r)ip-(g)rep")

  "yn"  '(yas-new-snippet                               :which-key "(y)as-(n)ew")
  "yv"  '(yas-visit-snippet-file                        :which-key "(y)as-(v)isit")
  "yd"  '(yas-describe-tables                           :which-key "(y)as-(d)esc-table")
  "yc"  '(consult-yasnippet                             :which-key "(y)as-(c)onsult")

  "ce"  '(calc-embedded                                 :which-key "(c)alc-(e)mbedded")
  "cF"  '(full-calc                                     :which-key "(c)alc-(F)ull")

  "za"  '(align-regexp-untabify                          :which-key "(z)-reg-(a)lign")
  "zr"  '(replace-regexp                                 :which-key "(z)-reg-(r)eplace")
  "zh" '(highlight-symbol-at-point                       :which-key "(z)-(h)ighlight")
  "zH" '(unhighlight-regexp                              :which-key "(z)-(H)ighlight-off")

  "q"   '(format-all-buffer                             :which-key "(q)-format-buffer")
  "gp"  '(hydra-garid_gtd_step1_is_actionable/body      :which-key "(g)pt-(p)rocessing")
  )
#+end_src

#+RESULTS:

** the other keybinding
#+begin_src emacs-lisp
(rune/leader-keys-other
  "f"  '(find-file-other-frame                  :which-key "(f)ile-other-frame"         )
  "lr"  '(revert-buffer-quick                   :which-key "(l-r)evert"                 )
  "lw"  '(consult-buffer-other-window           :which-key "(l-w)indow"                 )
  "lf"  '(consult-buffer-other-frame            :which-key "(l-f)rame"                  )
  "le"  '(eval-buffer                           :which-key "(l-e)val"                   )
  "lb"  '(ibuffer                               :which-key "(l-b)uffer"                 )
  "li"  '(ibuffer                               :which-key "(l-i)buffer"                )
  "ln"  '(rename-buffer                         :which-key "(l-n)ame"                   )
  "lp"  '(switch-to-prev-buffer                 :which-key "(l-p)rev"                   )
  "lP"  '(switch-to-next-buffer                 :which-key "(l-P)next"                  )
  "ld"  '(crux-delete-file-and-buffer           :which-key "(l-d)elete"                 )
  "ln"  '(rename-buffer                         :which-key "(b-n)ame"                   )
  
  ;; ispell related
  "sw" '(ispell-word                            :which-key "(s)pell-(w)ord"             )
  "sr" '(ispell-region                          :which-key "(s)pell-(r)egion"           )
  "sC" '(ispell-comments-and-strings            :which-key "(s)pell-(C)omment-full"     )
  "sc" '(ispell-comment-or-string-at-point      :which-key "(s)pell-(c)omment-here"     )
  "sb" '(ispell-buffer                          :which-key "(s)pell-(b)uffer"           )
  "sm" '(ispell-message                         :which-key "(s)pell-(m)essage"          )
  "sq" '(ispell-kill-ispell                     :which-key "(s)pell-(q)uit"             ))

;; "M-SPC"  '(comint-dynamic-complete-filename  :which-key "com"			)
#+end_src
* System:
** Recent files
#+begin_src emacs-lisp
  ;; recentf
  (recentf-mode 1)
  (setq recentf-exclude '("/home/garid/roamnotes/.*org")) ;; to exclude roam nodes
  (setq recentf-max-menu-items 30)
  (setq recentf-max-saved-items 30)
#+end_src
** Sys term open
#+begin_src emacs-lisp
  (defun gry/open-term-at ()
    (interactive)
    (shell-command (concat "term-at " buffer-file-name)))
#+end_src
* Dired
** Core dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer
    " " 'nil
    (kbd "C-n") 'mkdir))
#+end_src
** Icons - Dired
#+begin_src emacs-lisp
  (use-package all-the-icons
    :config
    (add-to-list
     'all-the-icons-extension-icon-alist
     '("m"  all-the-icons-fileicon "matlab"  :face all-the-icons-orange)))


  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
** Dired additionals
#+begin_src emacs-lisp
(use-package dired-single)

(use-package dired-sidebar)
;; :bind (:map dired-sidebar-mode-map
;;   ("l" . dired-sidebar-find-file)
;;   ("h" . dired-sidebar-up-directory))
#+end_src
* Misc Packages
** translate
#+begin_src emacs-lisp
(require 'go-translate)
(setq gts-translate-list '(("en" "ja")))
(setq gts-default-translator
      (gts-translator
       :picker	(gts-prompt-picker)
       :engines (list (gts-bing-engine) (gts-google-engine))
       :render	(gts-buffer-render)))
#+end_src
** writeroom
#+begin_src emacs-lisp
(use-package writeroom-mode
  :ensure t
  :bind (:map writeroom-mode-map
              ("<backspace>"     . ignore) ("<deletechar>"    . ignore)
              ("<delete>"        . ignore) ("<M-backspace>"   . ignore)
              ("<M-DEL>"         . ignore) ("<up>"            . ignore)
              ("<down>"          . ignore) ("<left>"          . ignore)
              ("<right>"         . ignore)))


(use-package writeroom-mode
  :ensure t
  :custom ((setq org-hyperscheduler-readonly-mode nil)))
#+end_src
** spray
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode)))
#+end_src
** write good
#+begin_src emacs-lisp
  (add-to-list 'load-path "/home/garid/.config/emacs/writegood-mode")
  (require 'writegood-mode)
#+end_src
* Web related
** browswer
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-chromium)
  (defun gry/open-html-in-browser ()
    (interactive) (shell-command (concat "chromium " buffer-file-name)))
#+end_src
** eww web browser
#+begin_src emacs-lisp
  (setq
    browse-url-browser-function 'eww-browse-url ; Use eww as the default browser
    shr-use-fonts  nil                          ; No special fonts
    shr-use-colors nil                          ; No colours
    shr-indentation 2                           ; Left-side margin
    shr-width 85                                ; Fold text to 85 columns
    eww-search-prefix "https://lite.duckduckgo.com/lite/?q=")    ; Use another engine for searching
#+end_src
** mastadon
#+begin_src emacs-lisp
  (use-package mastodon
    :ensure t
    :config
    (mastodon-discover))
  (setq mastodon-instance-url "https://emacs.ch"
        mastodon-active-user "garid3000")
#+end_src
* Custom set variable:
#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ignored-local-variable-values
   '((eval setq org-download-image-dir
	   (concat "./"
		   (file-name-base buffer-file-name)))))
 '(package-selected-packages
   '(consult-eglot laas zoom zig-mode xelb writeroom-mode which-key vterm vertico-posframe use-package undo-fu typescript-mode tree-sitter-langs toc-org tmr svg-tag-mode sudo-utils sr-speedbar sqlite spray shrink-path selectric-mode scad-mode rust-mode ripgrep rg restart-emacs rainbow-delimiters pyvenv python-x python-mode prescient ppp popup-kill-ring popper pfuture ox-hugo org-web-tools org-tree-slide org-tanglesync org-sidebar org-present org-pomodoro org-noter-pdftools org-hyperscheduler org-fragtog org-edna org-download org-contrib org-contacts org-bullets org-auto-tangle org-agenda-property orderless olivetti ob-tmux ob-rust notmuch nord-theme no-littering multi-term mew matlab-mode mastodon marginalia macrostep latex-math-preview kind-icon keyfreq jupyter ivy-posframe ibuffer-sidebar hydra highlight-indentation hide-lines helpful gtags-mode gruvbox-theme graphviz-dot-mode grammarly go-translate go-mode gnuplot ggtags general geiser-mit format-all forge flyspell-lazy flymake-python-pyflakes flycheck-aspell evil-tex evil-terminal-cursor-changer evil-org evil-nerd-commenter evil-collection eterm-256color eshell-git-prompt eradio emms-player-simple-mpv embark-consult emacsql-sqlite emacs-everywhere elfeed-score eglot edwina dumb-jump dracula-theme dired-single dired-sidebar dired-open dired-hide-dotfiles desktop-environment deft darkroom csv-mode crux corfu-terminal corfu-doc consult-yasnippet consult-org-roam company-ctags company-box command-log-mode citar-org-roam citar-embark cfrs cdlatex bui browse-kill-ring bibtex-completion auto-package-update async-await arduino-mode all-the-icons-dired all-the-icons-completion agtags ace-window 2048-game))
 '(safe-local-variable-values
   '((eval setq org-download-image-dir
	   (concat "./"
		   (file-name-base buffer-file-name))))))
#+end_src

