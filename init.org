#+startup:      show2levels
#+title:        Garids Emacs Configuration
#+author:       Garid Z.
#+creator:      Garid Z.
#+email:        garidzorigoo@gmail.com
#+auto_tangle:  t
#+property:     header-args :tangle init.el
#+setupfile:    ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org
#+options:      toc:t tags:nil  todo:t  tasks:t
#+HTML_HEAD:    <link rel="stylesheet" type="text/css" href="https://orgmode.org/worg/style/worg.css"/>


* From shell you can run make run:
#+begin_src makefile :noeval :tangle Makefile
# make run to extract init.el from init.org from shell
run:
	emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "init.org")'
	chmod +x 'garid/edit_img.sh'
	chmod +x 'garid/open_external_term.sh'
	git submodule foreach git pull origin master

refresh-packages:
	emacs --batch --eval "(setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\") (\"elpa\" . \"https://elpa.gnu.org/packages/\") (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")))" --eval "(package-refresh-contents)"
#+end_src

* Package Manager:
** Package Repositories 
I'm pulling packages from following 3 places (not sure that I need all three): 

1. [[https://melpa.org/packages/]]
2. [[https://elpa.gnu.org/packages/]]
3. [[https://elpa.nongnu.org/nongnu/]]

#+begin_src emacs-lisp
;; Package repos
(setq package-archives
      '(("melpa"   . "https://melpa.org/packages/"     )
        ("elpa"    . "https://elpa.gnu.org/packages/"  )
        ("nongnu"  . "https://elpa.nongnu.org/nongnu/" )))
#+end_src

** Initialize use-package manager
#+begin_src emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)
#+end_src

** Straight.el initialization
:PROPERTIES:
:ID:       2bc28375-3cf3-4784-8a34-ecb1a2b0c24a
:END:
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Vi Movement and other movement related
** undo-tree
undo-tree is emacs's undo & redo helper with built-in tree graph of versions.

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src

** evil
[[https://github.com/emacs-evil/evil][Evil]] stands for Extendable-Vi-Layer for Emacs.
It emulates vi motion inside Emacs. 

#+begin_src emacs-lisp
;; Vim Bindings
(use-package evil
  :ensure t
  :bind (;; ("<escape>" . keyboard-escape-quit  )  commented on nov21
         ;; ("M-j"      . evil-scroll-line-down )  C-e
         ;; ("M-k"      . evil-scroll-line-up   )  C-y
         ;; ("M-d"      . evil-scroll-page-down )  G
         ;; ("M-u"      . evil-scroll-page-up   )  g g
         )
  :custom
  (evil-want-keybinding     nil)
  (evil-undo-system         'undo-tree)
  (evil-want-C-i-jump       t)
  ;; evil-want-C-i-jump     nil       ;; test I may need jumpy back and forth

  ;; not much related with evil but related to movement
  (scroll-step           1)
  (scroll-margin         7)
  (scroll-conservatively 9999)

  :config
  (evil-define-key 'normal  org-mode-map   (kbd "TAB") #'org-cycle)
  ;; for org-cycle (tab) working for terminal
  (evil-define-key 'normal 'prog-mode-map  (kbd "K")   'eldoc) ;; or 'eldoc-box-help-at-point
  (evil-mode 1))
#+end_src
** evil-collection
[[https://github.com/emacs-evil/evil-collection][Evil-collection]] is sets of evil keybindings for various modes in Emacs.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src
** evil-surround
I sometimes use. It can wrap (visually) selected region with quotation mark or parenthesis.

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :config
  (global-evil-surround-mode)
  (add-hook 'latex-mode-hook (lambda ()
                               (push '(40  . ("\\left("    . "\\right)"   )) evil-surround-pairs-alist)
                               (push '(123 . ("\\left\\{"  . "\\right\\}" )) evil-surround-pairs-alist)
                               (push '(91  . ("\\left["    . "\\right]"   )) evil-surround-pairs-alist)
                               )))
#+end_src

** evil treesitter based visual selection (not used that much)
#+begin_src emacs-lisp
(use-package evil-textobj-tree-sitter
  :ensure t
  :after evil
  :config
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer" ))
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner" ))
  (define-key evil-inner-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"    ))
  (define-key evil-outer-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"    ))
  (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))
#+end_src

* Theme & Colors
** Fonts
#+begin_src emacs-lisp
(when (member "Iosevka" (font-family-list))
  (set-face-attribute 'default        nil :font "Iosevka" :height 120)
  (set-face-attribute 'fixed-pitch    nil :family "Iosevka"))

(when (member "Iosevka Term SS06" (font-family-list))
  (set-face-attribute 'default        nil :font "Iosevka Term SS06" :height 120)
  (set-face-attribute 'fixed-pitch    nil :family "Iosevka Term SS06"))

(when (member "Iosevka Aile" (font-family-list))
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile" :height 1.18))
#+end_src

** Theme
#+begin_src emacs-lisp :results none
(use-package uwu-theme
  :ensure t
  :config
  (enable-theme 'uwu)

  ;; not related with this theme itself but generally relates to generally
  (set-face-background 'mode-line          "#2B3260")
  (set-face-background 'mode-line-inactive "#2B3244")
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode   -1)        ; Disable the toolbar
  (tooltip-mode    -1)        ; Disable tooltips
  ;; (set-fringe-mode 15)     ; Give some breathing room
  (menu-bar-mode   -1)        ; Disable the menu bar
  )
#+end_src

** Terminal cursor
#+begin_src emacs-lisp :results none
(use-package evil-terminal-cursor-changer
  :ensure t
  :config (evil-terminal-cursor-changer-activate))
#+end_src

** Delight
#+begin_src emacs-lisp
(use-package delight
  :ensure t
  :config
  (delight
   '(
     ;; ----------  major modes  ----------------------------------
     (sh-mode               "shl "                              )
     (org-mode              "org "                              )
     (python-mode           "pyt "                              )
     (python-ts-mode        "pyt "                              )
     (dired-mode            "dir "                              )
     (help-mode             "hlp "                              )
     ;; ----------  minor modes  ----------------------------------
     (dired-omit-mode       "dro "   )   ;;   dired
     (org-roam-mode         "orm "   )   ;;   org-roam
     (which-key-mode        "wky "   )   ;;   which-key
     (git-gutter-mode       "ggt "   )   ;;   git-gutter
     (org-auto-tangle-mode  "tng "   )   ;;   org-auto-tangle
     (auto-revert-mode      "arv "   )   ;;   autorevert
     (org-indent-mode        nil     )   ;;   org-indent
     (org-num-mode          "onm "   )   ;;   org-indent
     (org-gtd-mode          "gtd "   )   ;;   org-gtd
     (org-src-mode          "src "   )   ;;   org
     (consult-org-roam-mode "crm "   )   ;;   consult-org-roam
     (yas-minor-mode        "yas "   )   ;;   yasnippet
     (eldoc-mode            "eld "   )   ;;   eldoc
     (magit-status-mode     "mgt "   )   ;;   magit
     (undo-tree-mode        "utr "   )   ;;   undo-tree
     (lisp-interaction-mode "eli "   )   ;;   elisp-mode
     (emacs-lisp-mode       "eli "   )   ;;   elisp-mode
     (command-log-mode      "clm "   )   ;;   command-log-mode
     (flymake-mode          "flm "   )   ;;   flymake
     (lsp-bridge-mode       "lsp "   )   ;;   lsp-bridge
     (org-edna-mode         "edn "   )   ;;   edna
     (evil-collection-unimpaired-mode "evc " )  ;;  evil-collection
     (all-the-icons-dired-mode     nil   all-the-icons-dired.el )
     (visual-line-mode             nil   simple                 ))))
#+end_src

** Display Number & cursor-line highlightnig
#+begin_src emacs-lisp
;; setting line
(use-package display-line-numbers
  :ensure t
  :custom
  (display-line-numbers-type 'relative)
  (visible-bell              t)
  ;;(setq display-line-numbers-type 'relative)
  ;; (setq visible-bell t)
  :config
  (global-display-line-numbers-mode -1)
  (global-hl-line-mode               1)
  )
#+end_src

* Minibuffer completion, selection, suggestion
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ("C-j" . vertico-next          ) ("M-j" . vertico-next        )
              ("C-k" . vertico-previous      ) ("M-k" . vertico-previous    )
              ("C-f" . vertico-exit          ) ("M-f" . vertico-exit        )
              ("C-u" . vertico-scroll-up     ) ("M-u" . vertico-scroll-up   )
              ("C-d" . vertico-scroll-down   ) ("M-d" . vertico-scroll-down )
              ("M-p" . vertico-previous      ) ("M-n" . vertico-next        )
              ("M-h" . vertico-exit          )
              ("M-q" . vertico-quick-insert  ) ("C-q" . vertico-quick-exit  ))
  :init
  (require 'vertico-quick)
  :custom
  (vertico-cycle     t  )
  (vertico-count     15 )
  (vertico-resize    nil)
  :config
  (vertico-mode))
#+end_src
** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy
                           marginalia-annotators-light nil))
  :init (marginalia-mode))
#+end_src
** consult
#+begin_src emacs-lisp
(use-package consult
  :ensure t)
;;  :bind (("M-f"  . consult-line))
#+end_src
** consult-org-roam
I might not need this

#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize consult-org-roam-forward-links :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search)
   )
#+end_src
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  ;;(completion-styles '(orderless basic))
  (completion-styles '(orderless flex))
  ;; (completion-category-overrides
  '((file (styles basic partial-completion))))
#+end_src
** embark
#+begin_src emacs-lisp
(defun garid/embark-org-insert-ref-of-tbl-fig-src-eq (x)
  (interactive "sSearch Term: ")
  (insert
   (format "[[%s]]"
           (nth 1 (split-string
                   (replace-regexp-in-string "[^[:alnum:-]]" "" x)
                   ;;(replace-regexp-in-string "[^[:alnum:]_-\\: #+]" "" x)
                   )))))

(defun garid/embark-org-insert-ref-to-label-inside-eq (input-string)
  (interactive "sSearch Term: ")
  (insert
   (format "\\ref{%s}"
           (if (string-match "\\\\label{\\([^}]+\\)}" input-string)
               (match-string 1 input-string)
             nil
             ))))


(use-package embark
  :ensure t
  :bind (("C-."    . embark-act                                     )
         ("M-."    . embark-dwim                                    )
         ("C-h B"  . embark-bindings                                )

         :map embark-general-map
         ("G"      . my/embark-google-search                        )
         ("t"      . garid/embark-org-insert-ref-of-tbl-fig-src-eq  )
         ("e"      . garid/embark-org-insert-ref-to-label-inside-eq ))

  :init
  (setq prefix-help-command #'embark-prefix-help-command))
#+end_src

** savehist
#+begin_src emacs-lisp
(use-package savehist
  :ensure t
  :config (savehist-mode))
#+end_src
* Org
** org-mode configuration
#+caption: org config
#+name: lst_org
#+begin_src emacs-lisp :noeval
(use-package org
  ;; :require (org-tempo)
  :bind
  (:map org-mode-map
        ("C-S-j" . org-next-visible-heading     )
        ("C-S-k" . org-previous-visible-heading ))

  :hook
  (org-mode . garid-custom/org-mode-hooked-func)

  :custom
  (org-agenda-skip-additional-timestamps-same-entry t)
  (org-tags-column                   -90)
  (org-ellipsis                      " ▼"   )
  (org-hide-emphasis-markers         t      )
  (org-log-done                      t      )
  (org-image-actual-width            '(800) )
  (org-src-tab-acts-natively         t      )
  (org-src-preserve-indentation      nil    )
  (org-src-fontify-natively          t      )
  (org-edit-src-content-indentation  0      )
  (org-startup-folded                "fold" )
  (org-plantuml-jar-path             "/usr/share/java/plantuml/plantuml.jar" )
  ;; this may differ on different machines
  (org-file-apps '((auto-mode                  . emacs                       )
                   ("\\.gif\\'"                . "mpv     \"%s\""            )
                   ("\\.mp4\\'"                . "mpv     \"%s\""            )
                   ("\\.png\\'"                . "sxiv    \"%s\""            )
                   ("\\.svg\\'"                . "inkview \"%s\""            )
                   ("\\.jpeg\\'"               . "sxiv    \"%s\""            )
                   ("\\.jpg\\'"                . "sxiv    \"%s\""            )
                   ;; ("\\.html\\'"            . "brave   \"%s\""            )
                   ;; ("\\.html\\'"            . "thorium-browser   \"%s\""  )
                   ("\\.pdf\\'"                . "sioyek  \"%s\""            )
                   ("\\.pdf::\\([0-9]+\\)?\\'" . "sioyek  \"%s\" --page %1"  )
                   ("\\.mkv\\'"                . "mpv     \"%s\""            )
                   ("\\.xopp\\'"               . "xournalpp \"%s\""          )))


  (org-todo-keywords      '((sequence
                             "TODO(t)" "NEXT(n)" "WAIT(w)"
                             "|"       "DONE(d)" "CNCL(c)")))

  (org-todo-keyword-faces '(("TODO"  . org-warning )
                            ("NEXT"  . "orange"    )
                            ("WAIT"  . "yellow"    )
                            ("DONE"  . "dim gray"  )
                            ("CNCL"  . (:foreground "gray30" :weight bold))))

  ;; latex related
  (org-latex-src-block-backend          'listings                                             )
  (org-latex-format-headline-function   'garid-custom/latex-formattig-headings                )
  (org-latex-active-timestamp-format     "\\textcolor{Brown}{%s}"                             )
  (org-latex-inactive-timestamp-format   "\\textcolor{Brown}{%s}"                             )
  (org-latex-pdf-process
   '("latexmk -shell-escape -f -xelatex -%latex -interaction=nonstopmode -output-directory=%o %f" )) ;; -output-driver=\"xdvipdfmx -z 0\" 
   ;;'("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f" ))

  ;; (org-highlight-latex-and-related     '(latex script entities))
  ;; (org-highlight-latex-and-related      nil)
  (org-highlight-latex-and-related        '(latex entities native))


  (org-tag-alist '((:startgroup . nil)
                   ("@rsch" . ?r) ("@bps" . ?w) ("@home" . ?h)
                   (:endgroup . nil)
                   ("psm" . ?p) ("4bc" . ?4) ("idea" . ?i)
                   ("lit" . ?l) ("yak" . ?y) ("tool" . ?T)
                   ("tdbt" . ?t) ("rndm" . ?R) ("meet" . ?m)
                   ("qstn" . ??) ("prjt" . ?P) ("msg/mail" . ?M)
                   ))

  :config
  (require 'org-tempo  )
  (require 'org-indent )
  (require 'ox-latex   ) 
  (plist-put    org-format-latex-options   :scale 1.7      )    ;; latex equation previewing
  (add-to-list 'org-latex-packages-alist   '("" "listings" ))
  (add-to-list 'org-latex-packages-alist   '("" "color"    ))

  ;; org tempo should I make it yassnippet?
  (add-to-list 'org-structure-template-alist '("el"   .  "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("go"   .  "src go"))
  (add-to-list 'org-structure-template-alist '("go1"  .  "src go :exports both :eval never-export"))
  (add-to-list 'org-structure-template-alist '("sh"   .  "src sh :eval no-export"))
  (add-to-list 'org-structure-template-alist '("te"   .  "src text" ))
  (add-to-list 'org-structure-template-alist '("do"   .  "src dot" ))
  (add-to-list 'org-structure-template-alist '("do1"  .  "src dot :file /home/garid/orgfiles/... :exports results :tangle no :eval no-export" ))
  (add-to-list 'org-structure-template-alist '("tm"   .  "src tmux" ))
  (add-to-list 'org-structure-template-alist '("tm1"  .  "src tmux :session tmuxSess1 :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("tm2"  .  "src tmux :session tmuxSess2 :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("py"   .  "src python"))
  (add-to-list 'org-structure-template-alist '("py1"  .  "src python :session pySess1 :results output :exports both :cache yes :eval no-export"))
  (add-to-list 'org-structure-template-alist '("py2"  .  "src python :session pySess2 :results output :exports both :cache yes :eval no-export"))
  (add-to-list 'org-structure-template-alist '("sq"   .  "sqlite"))
  (add-to-list 'org-structure-template-alist '("mk"   .  "src makefile :tangle no"))
  (add-to-list 'org-structure-template-alist '("ba"   .  "abstract"))

  (add-to-list 'org-latex-classes
               '("extarticle" "\\documentclass{extarticle}"
                 ("\\section{%s}"       . "\\section*{%s}")
                 ("\\subsection{%s}"    . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}"  . "\\subparagraph*{%s}")))
  )
#+end_src

** org-babel languages related
#+begin_src emacs-lisp
(use-package ob-nim       )
(use-package ob-go        )
(use-package ob-asymptote )
(use-package ob-nix       )
;; (use-package ob-tmux
;;   ;; Install package automatically (optional)
;;   :ensure t
;;   :custom
;;   (org-babel-default-header-args:tmux
;;    '((:results  .  "silent"  )
;;      (:session  .  "default" )
;;      (:socket   .  nil       )))
;;   ;; The tmux sessions are prefixed with the following string.
;;   ;; You can customize this if you like.
;;   (org-babel-tmux-session-prefix "ob-")
;;   ;; The terminal that will be used.
;;   ;; You can also customize the options passed to the terminal.
;;   ;; The default terminal is "gnome-terminal" with options "--".
;;   (org-babel-tmux-terminal "st")
;;   (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e"))
;;   ;; Finally, if your tmux is not in your $PATH for whatever reason, you
;;   ;; may set the path to the tmux binary as follows:
;;   (org-babel-tmux-location "/usr/bin/tmux"))


(org-babel-do-load-languages
 'org-babel-load-languages
 '((python     . t) (emacs-lisp . t)
   (latex      . t) (shell      . t)
   (dot        . t) (makefile   . t)
   (sqlite     . t) (gnuplot    . t)
   (nim        . t) (plantuml   . t)
   (maxima     . t) (calc       . t)
   (awk        . t) (go         . t)
   (asymptote . t)
   (ditaa     . t)
   (nix     . t)
   (lua     . t)
   ))
#+end_src

** org-bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :after  org
  :hook   (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list
           '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ")
           ))
#+end_src
** Org inline transparent image background                      :customFunc:
#+begin_src emacs-lisp
(defcustom org-inline-image-background nil
  "The color used as the default background for inline images.
When nil, use the default face background."
  :group 'org
  :type '(choice color (const nil)))

(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; Get this return result style from `create-image'.
    (append (list file type data-p)
            (list :background (or org-inline-image-background (face-background 'default)))
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)

(setq org-inline-image-background "white")
#+end_src

** Org toggle hide/shot hyperlink                               :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-link-n-emphasis ()
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (org-toggle-link-display)
    (font-lock-update))
#+end_src

** Org hooked function                                          :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-mode-hooked-func ()
  (org-indent-mode)
  (org-num-mode)
  ;; (auto-fill-mode 0)

  (when buffer-file-name ;; had to check buffer had file. (i.e. sometimes buffer don't have file yet, e.g. org-captures)
    ;; (message (concat buffer-file-name " -- " (vc-find-root buffer-file-name ".git")))
    (if (vc-find-root buffer-file-name ".git") ;; (vc-root-dir)    ;; check if org file is in git directory
        (setq org-download-image-dir
              (file-relative-name (concat (file-name-as-directory (vc-find-root buffer-file-name ".git"))
                                          (file-name-as-directory "od-imgs")
                                          (file-name-base buffer-file-name))
                                  (file-name-directory buffer-file-name))
              org-download-heading-lvl nil) ;; nil == orgdownload not mkdir images in each corresponding directory

      (setq org-download-image-dir   (concat "./shiod-imgs/" (file-name-base buffer-file-name))
            org-download-heading-lvl     nil)
      ) ;; nil == orgdownload not mkdir images in each corresponding directory
    )
  )
#+end_src

* Org Zettelkasten like (roam & denote)
#+begin_src emacs-lisp
(setq garids-brain-dumping-directory "~/BrainDump/")
#+end_src

** denote
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :custom
  ;; (denote-directory    (expand-file-name "~/Documents/Personal"       ))
  (denote-directory       (concat garids-brain-dumping-directory "denote"))
  (denote-known-keywords  '(  "finance"  "failures"  "philosophy"        ))
  (denote-templates       '( (biblio . "* Abstract\n\n* Review")
                             (plain  . nil)
                             ))

  )
#+end_src
** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :ensure t
  :custom
  (org-roam-node-display-template (concat "${title:*} "
                                          (propertize "${tags:30}"
                                                      'face 'org-tag)))
  (org-roam-v2-ack t)
  ;; (org-roam-directory "~/Pensieve/")
  (org-roam-directory (concat garids-brain-dumping-directory "roam"))
  (org-roam-completion-everywhere t)  ;; do I need this?
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org"
                         ,(concat
                           "#+filetags: :nohtmlexport:\n"
                           "#+title: %<%Y-%m-%d>\n"
                           "#+auto_tangle: nil\n"
                           "#+startup: show2levels\n"
                           "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                           )))))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("r" "Research" plain "* %?"
      :if-new (file+head "g_research/%<%Y%m%d%H%M%S>-${slug}__rsch.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :rsch:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "g_kanji/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("M" "Math" plain "* %?"
      :if-new (file+head "g_math/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :math:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org"
                                  ))
      :unnarrowed t)

     ("p" "Programming language" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :plang:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("g" "Golang Notes" plain "* %?"
      :if-new (file+head "g_go/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat ;;"#+title: ${title}\n"
                                  "#+filetags: :go:\n"
                                  ;;"#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("m" "Meta (meaning access nodes)" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}__meta.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :meta:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("P" "Project" plain
      "* Goals\n\n%?* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "g_project/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :Project:\n"
                                  "#+auto_tangle: nil"))
      :unnarrowed t)

     ))

  :config
  (require 'org-roam-dailies)
  (org-roam-setup)
  (org-roam-db-autosync-mode))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure t)
#+end_src
** citar
#+begin_src emacs-lisp
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography (list (concat (file-name-as-directory denote-directory)
                                              "20220101T010101--references__study.bib")))
  (org-cite-insert-processor    'citar                        )
  (org-cite-follow-processor    'citar                        )
  (org-cite-activate-processor  'citar                        )
  (citar-bibliography            org-cite-global-bibliography )
  (bibtex-dialect               'biblatex                     )
  ;; https://lucidmanager.org/productivity/emacs-bibtex-mode/
  (citar-library-paths           (list (concat (file-name-as-directory denote-directory) "lit/")) )

  (citar-file-open-functions '(("html" . citar-file-open-external)
                               ("pdf" . citar-file-open-external)
                               (t . find-file)))
  :hook
  (org-mode   . citar-capf-setup)
  (LaTeX-mode . citar-capf-setup)
  )
#+end_src
** COMMENT citar-org-roam
#+begin_src emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir                      "citar-notes")
  (citar-org-roam-note-title-template (concat "=${=key=}= - ${title}\n"
                                              "#+subtitle: Garid's notes on this article\n"
                                              "#+author: paper authors: ${author}\n"
                                              "#+filetags: :lit:\n\n"
                                              "* Ideas\n\n* Notes\n\n"))
  :config
  (citar-org-roam-mode))

#+end_src
** citar-denote
#+begin_src emacs-lisp
(use-package citar-denote
  :ensure t
  :demand t ;; Ensure minor mode loads
  :after (:any citar denote)
  :custom
  ;; Package defaults
  (citar-denote-file-type             'org)
  (citar-denote-keyword               "bib")
  (citar-denote-signature             nil)
  ;;(citar-denote-subdir              nil)  
  (citar-denote-subdir                "litnotes")  ;; usefull
  (citar-denote-template              'biblio)     ;; 'biblio is defined at denote
  (citar-denote-title-format          "author-year-title")
  (citar-denote-title-format-andstr   "and")
  (citar-denote-title-format-authors  1)
  (citar-denote-use-bib-keywords      nil)
  :preface
  (bind-key "C-c w n" #'citar-denote-open-note)
  :init
  (citar-denote-mode)
  ;; Bind all available commands
  :bind (("C-c w d" . citar-denote-dwim)
         ("C-c w e" . citar-denote-open-reference-entry)
         ("C-c w a" . citar-denote-add-citekey)
         ("C-c w k" . citar-denote-remove-citekey)
         ("C-c w r" . citar-denote-find-reference)
         ("C-c w l" . citar-denote-link-reference)
         ("C-c w f" . citar-denote-find-citation)
         ("C-c w x" . citar-denote-nocite)
         ("C-c w y" . citar-denote-cite-nocite)
         ("C-c w z" . citar-denote-nobib)))
#+end_src
** org-roam (custom) function for inserting node                :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates
	 (list (append (car org-roam-capture-templates)
		       '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)
    ))
#+end_src
** denote (custom) function for inserting node                  :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/denote-node-insert-immediate(start end)
  ;; create emtpy denote note on the regions
  (interactive "r")
  (let* ((tmp-str-marked              (string-trim (buffer-substring start end) ))
         (tmp-cur-time-of-this-note  (current-time)))
    (delete-region start end)
    (denote
     tmp-str-marked
     '("future")
     nil             ;; filetype
     "tmp"           ;; sub dir
     (format-time-string "%Y-%m-%d %H:%M:%S" tmp-cur-time-of-this-note) ;; timestampe
     )

    (save-buffer)
    (kill-buffer)

    (insert (format "[[denote:%s][%s]]"
                    (format-time-string "%Y%m%dT%H%M%S" tmp-cur-time-of-this-note)
                    tmp-str-marked
                    ))
    ))
#+end_src

** org-roam (custom) functions for tag searching
#+begin_src emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-exclude-by-tag (tag-name)
  (lambda (node)
    (null (member tag-name (org-roam-node-tags node)) )
    ))

(defun my/org-roam-find-node-exclude-kanji ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find nil nil (lambda (node)
                                (null (member "kanji" (org-roam-node-tags node)) )
                                ))
  )

(defun my/org-roam-find-node-by-focus-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             ;;(null (member "kanji" (org-roam-node-tags node)) )
             (member garids-focus-tag (org-roam-node-tags node)) 
             ))
  )


(defun my/org-roam-find-node-using-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             (member
                    (completing-read "Select tag to search: " (org-roam-tag-completions) nil t "")
                    (org-roam-node-tags node)) 
             ))
  )
#+end_src
* Org Time managements
** org-gtd
#+begin_src emacs-lisp
(use-package org-gtd
  :ensure t
  :after org

  :custom
  (org-gtd-directory    (concat garids-brain-dumping-directory "gtd"))


  :bind (:map org-agenda-mode-map ("C-<f8>"   . org-gtd-clarify-agenda-item )
         :map org-mode-map        ("C-<f8>"   . org-gtd-clarify-item        )
         :map org-gtd-clarify-map ("<f8>"     . org-gtd-organize            ))
  :init
  (setq org-gtd-update-ack "3.0.0")

  :config
  (org-gtd-mode 1)

  )
#+end_src

** org-agenda
#+begin_src emacs-lisp :results none
;; (setq org-agenda-files (directory-files-recursively denote-directory "\\.org$"))
;; (setq org-agenda-files (directory-files denote-directory t "\\.org$"))
;; (setq org-agenda-files (directory-files-recursively "/home/garid/gtd" "^[a-z].*\\.org$"))
;; (setq org-agenda-files (directory-files-recursively "/home/garid/gtd" "^[a-z].*\\.org$"))
;; (setq org-agenda-files (directory-files-recursively (concat (denote-directory) "gtd") "^[a-z].*\\.org$"))

(use-package org-agenda
  :ensure   nil

  :bind (:map org-agenda-mode-map
              ("j" . evil-next-line    )
              ("k" . evil-previous-line)
              )
  :custom
  (org-agenda-files '("~/BrainDump/gtd/org-gtd-tasks.org"))
  :config
  (add-hook 'org-agenda-finalize-hook (lambda () (org-agenda-write "/tmp/current-agenda-text")))
  )

;; (define-key org-agenda-mode-map "j" 'evil-next-line    )
;; (define-key org-agenda-mode-map "k" 'evil-previous-line)
;; (defun garid/write-agenda-to-file()
;;   (interactive)
;;   (org-agenda-write "/tmp/current-agenda-text")
;;   )
;;
#+end_src
** org capturing related
#+begin_src emacs-lisp :results none
(require 'org-protocol)
(setq org-agenda-start-with-log-mode t
      org-default-notes-file (concat (file-name-as-directory denote-directory)
                                     "20230926T010607--todo__todo.org")
      ;; org-capture-templates '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
      ;;                          "* TODO %?\n  %i\n  %a")

      ;;                         ("s" "Scheduled Todo" entry (file+headline org-default-notes-file "Scheduled")
      ;;                          "* TODO %?\n SCHEDULED: %t\n %i\n  %a")

      ;;                         ("r" "random" entry (file+headline org-default-notes-file "Random")
      ;;                          "* Later %?\n  %i\n  %a")

      ;;                         ("T" "Todo (xclip)" entry (file+headline org-default-notes-file "Tasks")
      ;;                          "* TODO [[%x]]\n  %i\n  %a")

      ;;                         ("p" "Protocol" entry (file+headline org-default-notes-file      "Inbox")
      ;;                          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
      ;;                         ("L" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
      ;;                          "* %? [[%:link][%:description]] \nCaptured On: %U")

      ;;                         ;;("j" "Journal" entry (file+datetree "~/org/journal.org")
      ;;                         ;; "* %?\nEntered on %U\n  %i\n  %a")

      ;;                         ("R" "Random (xclip)" entry (file+headline org-default-notes-file "Random")
      ;;                          "* Later [[%x]]\n  %i\n  %a"))
      )
#+end_src
** org-timeblock
#+begin_src emacs-lisp
(use-package org-timeblock)
#+end_src
** org timeline
#+begin_src emacs-lisp
(use-package org-timeline
  :init
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
  )
#+end_src
* Org Exporting related
** org to latex export heading format (e.g. Todo color)         :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/latex-formattig-headings
    (todo todo-type priority text tags _info)
  "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
  (concat
   (and todo
        ;; (format "{\\framebox{\\bfseries\\rfamily\\color{%s} %s}} "
        ;; (format "{\\bfseries\\rfamily\\color{%s} %s} "
        ;; (format "{\\rfamily\\color{%s} %s} "
        ;; (format "{\\color{%s} %s} "
        (format "{\\framebox{\\bfseries\\color{%s} %s}} "
                (pcase todo-type
                  ('todo "olive") ('done "teal")
                  ;;('todo "Black") ('done "Brown")
                  )
                todo))
   (and priority (format "\\framebox{\\#%c} " priority)) text
   (and tags
        (format "\\hfill{}\\textsc{%s}"
                (mapconcat #'org-latex--protect-text tags ":")))))
#+end_src

** XeLaTeX equation preview fix                                 :customFunc:
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-preview-latex-default-process 'imagemagick)
  (setf (plist-get (cdr (assq 'imagemagick org-preview-latex-process-alist)) :latex-compiler)
        '("xelatex -interaction nonstopmode -output-directory %o %f")))
#+end_src
** ox-hugo 
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t 
  :after ox)
#+end_src
** export directory                                             :customFunc:
ref: [[https://emacs.stackexchange.com/a/7989/38482][this answer on emacs-stackexchange]]

#+begin_src emacs-lisp
(defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
#+end_src
** Latex related
#+begin_src emacs-lisp
(use-package auctex :defer t)
(use-package cdlatex :defer t)
#+end_src
** ox-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t)
#+end_src
** Website from org-roam directory
[[id:e7ee081e-a02b-4ab9-bccc-327a92bf2b09][create website from org-roam]]
*** COMMENT prep
#+begin_src emacs-lisp
(setq org-html-validation-link            nil ;; Don't show validation link
      org-html-head-include-scripts       nil ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      ;;org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
      org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg7.css\"/>"
      ;; org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg-zenburn.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg-classic.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/zenburn-emacs.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" href=\"https://orgmode.org/worg/style/worg.css\" />"
      ;;org-html-head "<link rel=\"stylesheet\" href=\"https://gongzhitaao.org/orgcss/org.css\" />"
      )
#+end_src

#+RESULTS:
: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
*** COMMENT exporting
#+begin_src emacs-lisp :exports code :results verbatim
(setq
 org-publish-project-alist
 `(("Pensieve: org -> html"
    :base-directory ,org-roam-directory
    ;; :base-directory "~/Pensieve/"
    :recursive t
    :publishing-function org-html-publish-to-html
    :publishing-directory ,(concat org-roam-directory "website")
    :exclude ".*daily/.*org"  ;;; for excluding -daily
    ;; :publishing-directory "/tmp/asdf"
    ;;:publishing-directory (concat org-roam-directory "website")
    ;; :section-numbers nil
    :section-numbers  org-export-with-section-numbers
    :with-toc         t
    :html_link_home  "index.html"
    ;; :html-preamble "This is just a test"
    :html-preamble "<div id=\"navbar\"> <ul>
  <div class=\"stork-wrapper\">
    <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
    <a href=\"..\">Up/Back</a>                           &nbsp;
    <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
    <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
    <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
    <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
    <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
    <input data-stork=\"federalist\" class=\"stork-input\" />
    <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
  </div>
</ul>
<hr>
</div>
<script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
<script>
stork.register(
    'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
)
</script>
"
    ;; 
    ;; 'https://github.com/garid3000/testy/raw/master/garid_stork.st'
    ;; :html-divs ((preamble "header"  "preamble")
    ;;             (content   "main"   "content")
    ;;             (postamble "footer" "postamble"))

    )
   ;;:html_head "<link rel=\"stylesheet\" href=\"/home/garid/org.css\">"
   ;; not sure why above line doesn't change css of thml output
   ;; that's why I copied from
   ;;https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/
   ;; above


   ("Pensieve: od-imgs change position"
    :base-directory ,(concat org-roam-directory "od-imgs/")
    :base-extension "jpg\\|gif\\|png\\|svg"
    :recursive t
    ;;:publishing-directory "/ssh:user@host:~/html/images/"
    :publishing-directory ,(concat org-roam-directory "website/od-imgs")
    ;; :publishing-directory "/tmp/asdf/img"
    :publishing-function org-publish-attachment)

   ;; ("Pensieve: org -> txt"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  ;; :with-toc         t
   ;;  )

   ;; ("Pensieve: org -> txt 2"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  :with-toc         nil
   ;;  ;;:html_link_home  "index.html"
   ;;  )

   )
 )
#+end_src
*** exporting denote
#+begin_src emacs-lisp :exports code :results verbatim
(setq
 org-publish-project-alist
 `(("denote: org -> html"
    :base-directory ,(denote-directory)
    ;; :base-directory ,org-roam-directory
    ;; :base-directory "~/Pensieve/"
    :recursive t
    :publishing-function   org-html-publish-to-html
    ;;:publishing-directory ,(concat org-roam-directory "website")
    :publishing-directory ,(concat (denote-directory) "website")
    :exclude ".*daily/.*org"  ;;; for excluding -daily
    ;; :publishing-directory "/tmp/asdf"
    ;;:publishing-directory (concat org-roam-directory "website")
    ;; :section-numbers nil
    :section-numbers  org-export-with-section-numbers
    :with-toc         t
    :html_link_home  "index.html"
    ;; :html-preamble "This is just a test"
    :html-preamble "<div id=\"navbar\"> <ul>
  <div class=\"stork-wrapper\">
    <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
    <a href=\"..\">Up/Back</a>                           &nbsp;
    <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
    <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
    <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
    <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
    <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
    <input data-stork=\"federalist\" class=\"stork-input\" />
    <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
  </div>
</ul>
<hr>
</div>
<script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
<script>
stork.register(
    'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
)
</script>
"
    ;;
    ;; 'https://github.com/garid3000/testy/raw/master/garid_stork.st'
    ;; :html-divs ((preamble "header"  "preamble")
    ;;             (content   "main"   "content")
    ;;             (postamble "footer" "postamble"))

    )
   ;;:html_head "<link rel=\"stylesheet\" href=\"/home/garid/org.css\">"
   ;; not sure why above line doesn't change css of thml output
   ;; that's why I copied from
   ;;https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/
   ;; above


  ;; ("Pensieve: od-imgs change position"
  ;;  :base-directory ,(concat org-roam-directory "od-imgs/")
  ;;  :base-extension "jpg\\|gif\\|png\\|svg"
  ;;  :recursive t
  ;;  ;;:publishing-directory "/ssh:user@host:~/html/images/"
  ;;  :publishing-directory ,(concat org-roam-directory "website/od-imgs")
  ;;  ;; :publishing-directory "/tmp/asdf/img"
  ;;  :publishing-function org-publish-attachment)

   ;; ("Pensieve: org -> txt"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  ;; :with-toc         t
   ;;  )

   ;; ("Pensieve: org -> txt 2"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  :with-toc         nil
   ;;  ;;:html_link_home  "index.html"
   ;;  )

   )
 )
#+end_src

** htmlize - source code syntax in html export
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src
* Org Misc:
** org-download package itself
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :custom
  (org-download-display-inline-images  nil                                 )
  (org-download-edit-cmd               (concat user-emacs-directory
                                               "garid/edit_img.sh %s"))
  ;;:hook ((org-mode . my-org-download-set-dir))
  :config
  (org-download-enable))
#+end_src

** org-download editing shell script                          :shell_script:
#+begin_src shell :tangle garid/edit_img.sh
#!/bin/sh

file=$(readlink -f "$1")
ext="${file##*.}"

# create empty file if the file doesn't exist
if [ ! -f "$file" ]; then
    convert -size 480x320 xc:white "$file";
    echo "created new $file"
fi

# open image-editor based on the file's extension
case "$ext" in
	jpeg) gimp      "$file" ;;
	jpg)  gimp      "$file" ;;
	png)  gimp      "$file" ;;
	svg)  inkscape  "$file" ;;
	xopp) xournalpp "$file" ;;
esac
#+end_src

** org-auto-tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :defer  t
  :hook   (org-mode   .   org-auto-tangle-mode)
  :custom (org-auto-tangle-default    nil))
#+end_src

** org-transclusion
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :bind (:map org-mode-map
              ("<f12>"   . org-transclusion-add     )
              ("M-<f12>" . org-transclusion-add-all )
              ("<f11>"   . org-transclusion-mode    )))
#+end_src

** exercism
#+begin_src emacs-lisp
(use-package exercism)
#+end_src

** org contacts
#+begin_src emacs-lisp
(use-package org-contacts
  :ensure t
  :after org denote
  :custom (org-contacts-files
           '("~/BrainDump/denote/20240802T185223--contacts__info.org")))
#+end_src
* Coding related
** Save place mode
This mode saves the last cursor point when you close a file,
and later sets cursor at that point when you open that file.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src
** Yassnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :custom
  (yas/triggers-in-field t) ;; Do I need this?
  ;; (setq yas-key-syntaxes (append yas-key-syntaxes '(yas-try-key-from-dot)))
  ;;(yas-snippet-dirs (list (concat user-emacs-directory "snippet" "snippets")))
  :config
  (yas-global-mode 1)

  (defcustom yas-new-snippet-default "\
  # -*- mode: snippet -*-
  # contributor: Garid Zorigoo <garidzorigoo@gmail.com>
  # name: $1
  # key: ${2:${1:$(yas--key-from-desc yas-text)}}
  # --
  $0`(yas-escape-text yas-selected-text)`"
    "Default snippet to use when creating a new snippet.
  If nil, don't use any snippet."
    :type 'string)
  )

(use-package consult-yasnippet)
#+end_src
** Tempel
#+begin_src emacs-lisp
(use-package tempel
  :ensure t
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-8" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))

  :init
  (setq tempel-path "~/.config/emacs/tempel/templates.eld")

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  )

;; Optional: Add tempel-collection.
;; The package is young and doesn't have comprehensive coverage.
;; (use-package tempel-collection)
#+end_src

#+begin_src emacs-lisp
(defun gry/choose-from-list-and-insert-it (asdf)
  (interactive)
  (insert (let ((choices asdf))
    (completing-read "Choose: " choices))))


(defun gry/choose-from-list-and-return-it (asdf)
  (interactive)
  (let ((choices asdf))
    (completing-read "Choose: " choices)))
#+end_src

** electric-pair-mode: auto parenthesis closing
#+begin_src emacs-lisp
;; enable electric pair
(electric-pair-mode 1)

;; disables <> (cuz I use < for most of my snippets)
(setq electric-pair-inhibit-predicate
      (lambda (c)
        (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))
#+end_src
** treesitter
from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][mastering emacs article]].
#+begin_src emacs-lisp
(setq major-mode-remap-alist
      '((bash-mode   . bash-ts-mode)
        (python-mode . python-ts-mode)))

;; below is fork of   https://github.com/emacs-tree-sitter/ts-fold
;; reason I don't use (ts-fold)  <--- isn't good with builtin treesit

;; (use-package treesit-fold
;;   :straight (treesit-fold :type git :host github :repo "abougouffa/treesit-fold"))
#+end_src
** corfu
#+begin_src emacs-lisp
;; from https://github.com/Gavinok/emacs.d/blob/3ccc6e35feb2903442c9f7625fba081d93a2fa36/init.el#L614
(use-package corfu
  ;; Optional customizations
  :ensure t
  :custom
  (corfu-cycle            t          ) ;; Allows cycling through candidates
  ;; (corfu-auto             t          ) ;; Enable auto completion nov23 C-M-i?
  ;; (corfu-auto-prefix      2          )
  ;; (corfu-auto-delay       0.1        )
  (corfu-popupinfo-delay '(0.8 . 0.2))
  (corfu-preview-current   nil       )
  (corfu-on-exact-match    nil       ) ;; Don't auto expand tempel snippets

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator )
              ("TAB"        . corfu-insert           )
              ([tab]        . corfu-insert           )
              ;;("S-TAB"     . corfu-previous        )
              ;; ("M-k"        . corfu-previous      )
              ;; ("M-j"        . corfu-next          )
              ("S-<return>" . corfu-insert           )
              ("M-h"        . corfu-insert           )
              ("RET"        . nil                    ))

  :init
  (setq tab-always-indent 'complete)
  ;;:config
  (global-corfu-mode    )
  (corfu-history-mode   )
  (corfu-popupinfo-mode ) ; Popup completion info
  ;; :config
  ;; (add-hook 'eshell-mode-hook
  ;;           (lambda () (setq-local corfu-quit-at-boundary t
  ;;       			   corfu-quit-no-match t
  ;;       			   corfu-auto nil)
  ;;             (corfu-mode)))

  :hook
  (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t
        			             corfu-quit-no-match t
        			             corfu-auto nil)
                        (corfu-mode)))
  )
#+end_src
** cape
#+begin_src emacs-lisp
(use-package cape
  ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
  ;; Press C-c p ? to for help.
  :ensure t
  :bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
  ;; Alternatively bind Cape commands individually.
  ;; :bind (("C-c p d" . cape-dabbrev)
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ...)
  ;; :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  ;; (add-hook 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-hook 'completion-at-point-functions #'cape-file)
  ;; (add-hook 'completion-at-point-functions #'cape-elisp-block)
  ;; (add-hook 'completion-at-point-functions #'cape-history)
  ;; ...
)
#+end_src
** eglot for the LSPs
#+begin_src emacs-lisp
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs '(nix-ts-mode . ("nil")))
  ;; (setq eldoc-echo-area-use-multiline-p 0)
  ;; (setq eglot-ignored-server-capabilities '(:documentHighlightProvider))
  ;; (add-hook 'eglot-connect-hook (lambda () (eldoc-mode -1)))
  )
#+end_src
** nix mode
#+begin_src emacs-lisp
(use-package nix-ts-mode)
#+end_src
** consult eglot variable search inside project
#+begin_src emacs-lisp
(use-package consult-eglot
  :ensure t)
#+end_src
** eglot booster
#+begin_src emacs-lisp
(use-package eglot-booster
  :ensure t
  :straight (eglot-booster
             :type git
             :host github
             :repo "jdtsmith/eglot-booster")
  :config
  (eglot-booster-mode +1)
  )
#+end_src
** hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
** Indent bars
#+begin_src emacs-lisp
(use-package indent-bars
  ;;:load-path "~/code/emacs/indent-bars"
  :ensure t
  :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :custom
  (indent-bars-treesit-support   t)
  (indent-bars-no-descend-string nil)
  (indent-bars-prefer-character  "|")
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
				      list list_comprehension
				      dictionary dictionary_comprehension
				      parenthesized_expression subscript)))
  :hook ((python-base-mode yaml-mode) . indent-bars-mode))
#+end_src
** graphviz
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
    :ensure t)
#+end_src

** scad
#+begin_src emacs-lisp
(use-package scad-mode
  :ensure t)
#+end_src

** lua
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t)
#+end_src
* Coding convenients
** rg: ripgrep
#+begin_src emacs-lisp
(use-package rg
  :ensure t)
#+end_src

** magit: git control
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

** git-gutter: git diff shows on the side
#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :config (global-git-gutter-mode))
#+end_src

** COMMENT devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :config ;; taken initially from  https://alhassy.com/emacs.d/#devdocs
  (when nil ;; need to toggle nil->t and the first time installign
    (cl-loop
     for lang in '("python~3.11" "numpy~1.21" "matplotlib~3.6" "pandas~1"
                   c "r" "nim" "gnu_make" "bash" "fish~3.6" "qt~6.1")
     do (devdocs-install (list (cons 'slug (format "%s" lang)))))))
#+end_src

* Garid
** Open PDF/HMTL exported by LaTeX externally                   :customFunc:
#+begin_src emacs-lisp
(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))


(defun gry/org-open-pdf ()
  (interactive)
  (call-process-shell-command
   (concat "xdg-open "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file/buffer
           "/export_tex/"                               ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".pdf &"                                     ;; adds extension
           )))

(defun gry/org-open-html ()
  (interactive)
  (call-process-shell-command
   ;; (concat "xdg-open "                               ;; try to open default PDF viewer
   (concat "$BROWSER "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file/buffer
           "/export_html/"                              ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".html &"                                    ;; adds extension
           )))
#+end_src

** My Custom LaTeX writting system (aka TeQ)                    :customFunc:
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.config/emacs/Emacs-TeQ"))

(register-input-method
 "TeQ-Math" "Emacs-Teq-Latex" 'quail-use-package
 "TeQ-"     "TeQ-Math input"
 "Emacs-TeQ.el")

(fset 'gry-calc-horizontal-concat
      (kmacro-lambda-form [?v ?t tab ?v ?t ?| ?v ?t] 0 "%d"))

;;(load "~/.config/emacs/garid/garids-abbrev-typos.el")	;; garid typos
#+end_src

** latex mode hook
#+begin_src emacs-lisp
(use-package latex
  :ensure nil
  :config
  ;;(add-hook 'LaTeX-mode-hook (function (lambda() (set-input-method "TeQ-Math"))))
  (add-hook 'latex-mode-hook (function (lambda() (set-input-method "TeQ-Math"))))
  )
#+end_src

** Custom Aligner function (with untabify)                      :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/align-regexp-and-untabify (beg end)
  (interactive "r")
  (align-regexp beg end
                (concat "\\(\\s-*\\)" (read-string "Align regexp: ")))
  (untabify beg end))
#+end_src
** noTabs:                                                      :customFunc:
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
;; Align with spaces only
(defadvice align-regexp (around align-regexp-with-spaces)
  "Never use tabs for alignment."
  (let ((indent-tabs-mode nil)) ad-do-it))
(ad-activate 'align-regexp)
#+end_src

#+RESULTS:
: align-regexp
** Toggling between 3 inputs (eng, mon, teq)                    :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/toggle-eng-mon-teq-input-methods ()
  (interactive)
  (if (string= default-input-method nil )
      (set-input-method "cyrillic-mongolian")
    (if (string= default-input-method "TeQ-Math")
	(set-input-method "cyrillic-mongolian")
      (if (string= default-input-method "cyrillic-mongolian")
	  (set-input-method "TeQ-Math")))))
#+end_src
** copy to xclip without turning on the xclip mode
#+begin_src emacs-lisp
(defun gry-copy-to-x-clip()
  (interactive)
  (if (and (boundp 'xclip-mode) xclip-mode);; check if the xclip has turned on
      (clipboard-kill-ring-save ( mark ) ( point ) )
    (progn
      (xclip-mode +1)
      (clipboard-kill-ring-save ( mark ) ( point ) )
      (xclip-mode -1)
      )
    )
  )
#+end_src
** copy link in org at point
#+begin_src emacs-lisp
(defun code-from-internet/org-link-open-parent-with-dired-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         ;;(url (concat type ":" url))
         )
    ;; (kill-new url)
    (message (concat "Copied URL: " url))
    (dired-jump t (file-name-directory url))
    )
  )


(defun code-from-internet/org-link-copy-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url)))
  )
#+end_src
** org next prev
#+begin_src emacs-lisp
(defhydra hydra-org-link-jumper ()
  "zoom"
  ("n" org-next-link     "next")
  ("p" org-previous-link "prev"))
#+end_src
** put empty svg file at point
#+begin_src emacs-lisp
(defun garid/put-emtpy-svg-img-at-point ()
  (interactive)
  ;;Part 1: creates org-image if non existense
  (unless (file-directory-p org-download-image-dir);; when not
    (make-directory org-download-image-dir))

  ;;Part 2: copy the template
  (copy-file;; "~/.config/emacs/org-templates/template.svg"
   (concat (file-name-directory user-init-file) "org-templates/template.svg")
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg")))

  ;;Part 3: insert the link to the buffer
  (insert
   "[[file:"
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg"))
   "]]"))
#+end_src
** Jumping ref's label in org or latex
#+begin_src emacs-lisp
(defun garid/jump-label-def-of-ref-at-point-word ()
  ""
  (interactive)
  ;; jump to closing } part of:  \ref{...}
  (progn
    (search-forward "}")
    (backward-char 1))

  ;; copy and consult-line with thing inside of {} parenthesis of \ref{...}
  (let ((start (search-backward "{" nil t))
        (end (search-forward "}" nil t)))
    (if (and start end)
        (let ((content (buffer-substring-no-properties (1+ start) (1- end))))
          (consult-line (format "\\label{%s}" content))
          )
      (message "No matching braces found."))))
#+end_src
** edraw drawing
#+begin_src emacs-lisp
(use-package edraw-mode
  :straight (edraw-mode
             :type git
             :host github
             ;;:brach "garidslatex"
             :brach "master"
             :repo "misohena/el-easydraw")
  :config
  ;;(edraw-org-setup-default)

  (with-eval-after-load 'org
    (require 'edraw-org)
    (edraw-org-setup-default))
  ;; When using the org-export-in-background option (when using the
  ;; asynchronous export function), the following settings are
  ;; required. This is because Emacs started in a separate process does
  ;; not load org.el but only ox.el.
  (with-eval-after-load "ox"
    (require 'edraw-org)
    (edraw-org-setup-exporter))
  :custom
  ;;(edraw-editor-default-grid-interval 20)
  (edraw-default-shape-properties '((rect (fill            . #1="#f8f8f8")
                                          (stroke          . #2="#101010")
                                          (stroke-width    . 2))
                                    (ellipse (fill         . #1#)
                                             (stroke       . #2#)
                                             (stroke-width . 2))
                                    (path (fill            . "none")
                                          (stroke          . #2#)
                                          (stroke-width    . 2)
                                          (marker-end      . "arrow"))
                                    (text (fill            . #2#)
                                          (font-size       . 20)
                                          ;;(font-family     . "sans-serif")
                                          ;;(font-family     . "Linux Libertine")
                                          (font-family     . "xkcd Script")
                                          (text-anchor     . "middle"))
                                    (image)))
  (edraw-default-document-properties '((width . 800)
                                       (height . 400)
                                       (background . "#fff")))
  )
#+end_src
* Writting & Reading
** Writting packages
#+begin_src emacs-lisp
(use-package selectric-mode       :ensure t)
(use-package typewriter-roll-mode :ensure t)
(use-package writeroom-mode       :ensure t)
(use-package focus                :ensure t)
#+end_src

** Writting Distraction free
#+begin_src emacs-lisp
(defun gry/distraction-free-on ()
  (interactive)
  (writeroom-mode 1)
  (typewriter-roll-mode 1)
  ;;(evil-insert)
  (turn-off-evil-mode)
  (selectric-mode 1)
  (display-line-numbers-mode -1)
  (global-corfu-mode -1)
  (cua-mode +1)
  (which-key-mode -1)
  (vertico-mode -1)
  (focus-mode +1)

  (cond
   ((member "xkcd Script"     (font-family-list)) (set-face-attribute 'default nil :font "xkcd Script"     :height 200))
   ((member "Virgil 3 YOFF"   (font-family-list)) (set-face-attribute 'default nil :font "Virgil 3 YOFF"   :height 140))
   ((member "Iosevka Aile"    (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Aile"    :height 200))
   ((member "Liberation Sans" (font-family-list)) (set-face-attribute 'default nil :font "Liberation Sans" :height 140))
   ((member "Courier New"     (font-family-list)) (set-face-attribute 'default nil :font "Courier New"     :height 140))
   ((member "Terminus"        (font-family-list)) (set-face-attribute 'default nil :font "Terminus"        :height 140))
   ((member "M+ 1p medium"    (font-family-list)) (set-face-attribute 'default nil :font "M+ 1p medium"    :height 140))
   ))

(defun gry/distraction-free-off ()
  (interactive)
  (cua-mode -1)
  (writeroom-mode -1)
  (typewriter-roll-mode -1)
  (selectric-mode -1)
  (global-corfu-mode +1)
  (turn-on-evil-mode)
  (which-key-mode +1)
  (vertico-mode +1)
  (focus-mode -1)

  (cond
   ((member "Iosevka Term SS06" (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Term SS06" :height 120))
   ((member "Iosevka"           (font-family-list)) (set-face-attribute 'default nil :font "Iosevka"           :height 150))
   ))
#+end_src

** PDF tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :bind (:map pdf-view-mode-map
              ("t" . pdf-outline))
  :mode  ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install))
#+end_src

** tmr - timer
#+begin_src emacs-lisp
(use-package tmr :ensure t)
#+end_src
** spray
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode))
    :hook ((spray-mode . gry/distraction-free-on))
)
#+end_src
** garids working states
#+begin_src emacs-lisp
(setq garids-focus-tag "rsch")
(setq garids-focus-tag-list '("bps" "hkdn" "rsch" "yak"))
;; (setq garids-focus-tag (gry/choose-from-list-and-return-it garids-focus-tag-list))

(defun garid/focus-change-tag ()
  "this changes the tag of my work focus"
  (interactive)
  (setq garids-focus-tag (gry/choose-from-list-and-return-it garids-focus-tag-list))
  (message (concat "focus tag changed to " garids-focus-tag)))
#+end_src
* Keybinding
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :custom
  (which-key-popup-type            'side-window               )
  (which-key-side-window-location  'right                     )
  (which-key-idle-delay             0.5                       )
  (which-key-idle-secondary-delay   0.01                      )
  (which-key-side-window-max-width  0.5                       )
  (which-key-sort-order            'which-key-key-order-alpha )
  :config (which-key-mode))
#+end_src

** Non sequential keybindings
*** Global keybinding table
#+caption: Global (aka from anywhere) non-sequential keybinding
#+name: tbl-global-keybindings
| key     | function                                      | description                          |
|---------+-----------------------------------------------+--------------------------------------|
| M-q     | delete-window                                 | delete window                        |
| M-Q     | kill-current-buffer                           | delete buffer                        |
| M-J     | other-window                                  | jump to other window                 |
| M-W     | evil-window-vnew                              | divide window veritically (on right) |
| M-E     | evil-window-vsplit                            | divide window veritically (on left)  |
| M-]     | comint-dynamic-complete-filename              | complete file path                   |
| M-s     | avy-goto-char                                 | jump to character                    |
| M-S     | avy-goto-char-2                               | jump to character (with 2 char)      |
| M-f     | consult-line                                  | search line in buffer                |
| M-y     | consult-yank-from-kill-ring                   | consult yank from kill ring          |
| C-/     | comment-line                                  | set selected lines comment           |
| C-\vert | garid-custom/toggle-eng-mon-teq-input-methods | change toggle input (Eng-Mon-Teq)    |
| <f9>    | org-gtd-capture                               | capture                              |
| C-<f8>  | org-gtd-clarify-item                          | gtd org                              |
| C-<f9>  | org-gtd-process-inbox                         | process inbox                        |
| <f7>    | org-gtd-engage                                | gtd engage                           |

Note to myself: after changing Table-[[tbl-global-keybindings]], I need to update [[convert-global-keybindings]]

*** Convert global keybinding table into elisp
#+caption: adsf
#+name: convert-global-keybindings
#+begin_src elisp :var tab=tbl-global-keybindings :wrap src emacs-lisp :tangle no
(concat
 (mapconcat
  (lambda (row)
    (format
     "(global-set-key (kbd \"%s\") '%s)"
     ;; needed to use regexp cuz | (as \vert) used in the table
     (replace-regexp-in-string (regexp-quote "\\vert") "|" (nth 0 row) nil 'literal)
     (nth 1 row)
     ))
  tab "\n"))
#+end_src

#+RESULTS: convert-global-keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-q") 'delete-window)
(global-set-key (kbd "M-Q") 'kill-current-buffer)
(global-set-key (kbd "M-J") 'other-window)
(global-set-key (kbd "M-W") 'evil-window-vnew)
(global-set-key (kbd "M-E") 'evil-window-vsplit)
(global-set-key (kbd "M-]") 'comint-dynamic-complete-filename)
(global-set-key (kbd "M-s") 'avy-goto-char)
(global-set-key (kbd "M-S") 'avy-goto-char-2)
(global-set-key (kbd "M-f") 'consult-line)
(global-set-key (kbd "M-y") 'consult-yank-from-kill-ring)
(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-|") 'garid-custom/toggle-eng-mon-teq-input-methods)
(global-set-key (kbd "<f9>") 'org-gtd-capture)
(global-set-key (kbd "C-<f8>") 'org-gtd-clarify-item)
(global-set-key (kbd "C-<f9>") 'org-gtd-process-inbox)
(global-set-key (kbd "<f7>") 'org-gtd-engage)
#+end_src

#+RESULTS:
: org-gtd-engage

** Sequential keybindings (General.el keybinding config)
*** Sequential global keybindings
**** File and directory surfing
#+attr_latex: :placement [H]
#+caption: File and directory related commands
#+name: tbl-kbinding-file-n-dired
| key(s) | function                      | short description    | mode | lambda |
|--------+-------------------------------+----------------------+------+--------|
| SPC    | execute-extended-command      | M-x                  | -    |        |
| f      | find-file                     | (f)ind-file          | -    |        |
| d      | dired-jump                    | (d)irectory          | -    |        |
| D      | :ignore t                     | (D)ired              | -    |        |
| Ds     | dired                         | D-(s)imple           | -    |        |
| Dp     | dired-preview-mode            | D-(p) side-tree hide | -    |        |

**** Buffer and operations on buffer
#+attr_latex: :placement [H]
#+caption: buffer related commands
#+name: tbl-kbind-buffer-related
| key(s) | function                    | short description             | mode | lambda |
|--------+-----------------------------+-------------------------------+------+--------|
| l      | consult-buffer              | (l)ist-buffer                 | -    |        |
| L      | :ignore t                   | (L)buffer.................... | -    |        |
| Lr     | revert-buffer-quick         | L-(r)eread                    | -    |        |
| Le     | eval-buffer                 | L-(e)val                      | -    |        |
| Li     | ibuffer                     | L-(i)buffer                   | -    |        |
| Ln     | rename-buffer               | L-(r)ename                    | -    |        |
| L<     | switch-to-prev-buffer       | L-(<)prev                     | -    |        |
| L>     | switch-to-next-buffer       | L-(>)next                     | -    |        |
| Ld     | crux-delete-file-and-buffer | L-(d)elete                    | -    |        |
| Lc     | clone-indirect-buffer       | L-(c)lone                     | -    |        |
| Ls     | crux-create-scratch-buffer  | L-(s)cratch-buffer            | -    |        |
| Lh     | buf-move-left               | L-(h) move left               | -    |        |
| Lj     | buf-move-down               | L-(j) move down               | -    |        |
| Lk     | buf-move-up                 | L-(k) move up                 | -    |        |
| Ll     | buf-move-right              | L-(l) move right              | -    |        |
| LL     | tear-off-window             | L-(L) tear window to frame    | -    |        |

**** Convenient
#+attr_latex: :placement [H]
#+caption: Convenient commands
#+name: tbl-kbind-zconvenients
| key(s) | function                               | short description           | mode | lambda |
|--------+----------------------------------------+-----------------------------+------+--------|
| z      | :ignore t                              | (z)conveniences............ | -    |        |
| za     | garid-custom/align-regexp-and-untabify | z-(a)lign                   | -    |        |
| zr     | replace-regexp                         | z-(r)eplace word in buf     | -    |        |
| zh     | highlight-symbol-at-point              | z-(h)ighlight word          | -    |        |
| zH     | unhighlight-regexp                     | z-(H)ighlight word off      | -    |        |
| zs     | :ignore t                              | z-(s)pell.................. | -    |        |
| zsw    | ispell-word                            | zs-(w)ord                   | -    |        |
| zsr    | ispell-region                          | zs-(r)egion                 | -    |        |
| zsC    | ispell-comments-and-strings            | zs-(C)omment-full           | -    |        |
| zsc    | ispell-comment-or-string-at-point      | zs-(c)omment-here           | -    |        |
| zsb    | ispell-buffer                          | zs-(b)uffer                 | -    |        |
| zsm    | ispell-message                         | zs-(m)essage                | -    |        |
| zsq    | ispell-kill-ispell                     | zs-(q)uit                   | -    |        |
| zsl    | ispell-change-dictionary               | zs-(l)anguage en-mn         | -    |        |
| ZQ     | kill-emacs                             | kill emacs                  | -    |        |

**** System
#+attr_latex: :placement [H]
#+caption: system commmands
#+name: tbl-kbind-sys-related
| key(s) | function                                                                                   | short description              | mode | lambda |
|--------+--------------------------------------------------------------------------------------------+--------------------------------+------+--------|
| s      | :ignore t                                                                                  | (s)ystem.....................  | -    |        |
| srf    | recentf-open-files                                                                         | s-(r)ecent-(f)iles             | -    |        |
| sl     | :ignore t                                                                                  | s-(l)ine.....................  | -    |        |
| sl5    | (setq display-line-numbers-width 5)                                                        | sl-(5) digit number            | -    | y      |
| sl4    | (setq display-line-numbers-width 4)                                                        | sl-(4) digit number            | -    | y      |
| sl3    | (setq display-line-numbers-width 3)                                                        | sl-(3) digit number            | -    | y      |
| slm    | scroll-lock-mode                                                                           | sl-(m)ode scroll-lock-mode     | -    |        |
| slv    | global-display-fill-column-indicator-mode                                                  | sl-(v)ertical-line             | -    |        |
| sln    | display-line-numbers-mode                                                                  | sl-(n)umber toggle             | -    |        |
| slr    | ruler-mode                                                                                 | sl-(r)uler mode                | -    |        |
| scl    | (global-command-log-mode) (clm/open-command-log-buffer)                                    | s.c.md-.l.og                   | -    | y      |
| sw     | whitespace-mode                                                                            | s.w.hitespace                  | -    |        |
| sg     | :ignore t                                                                                  | s-garid                        | -    |        |
| sgf    | gry/distraction-free-on                                                                    | sg.f.ocus                      | -    |        |
| sgr    | gry/distraction-free-off                                                                   | sg.r.eset                      | -    |        |
| O      | :ignore t                                                                                  | (O)pen........................ | -    |        |
| Oe     | (find-file "~/.config/emacs/init.org")                                                     | O.e.macs confg org             | -    | y      |
| OE     | (find-file "~/.config/emacs/init.el")                                                      | O.E.macs confg el              | -    | y      |
| Ob     | (find-file (nth 0 org-cite-global-bibliography))                                           | O.b.ibliography                | -    | y      |
| Op     | (find-file "~/BrainDump/bookshelf/")                                                       | O.p.dfs                        | -    | y      |
| Oc     | citar-open                                                                                 | O.c.itaiton                    | -    |        |
| OO     | (find-file org-default-notes-file)                                                         | O.O.rg capture                 | -    | y      |
| Oa     | (find-file (concat org-gtd-directory "/gtd_archive_2024") )                                | O.a.rchive                     | -    | y      |
| Ot     | (find-file (concat org-gtd-directory "/org-gtd-tasks.org"))                                | O.t.asks                       | -    | y      |
| Oi     | (find-file (concat org-gtd-directory "/inbox.org")        )                                | O.i.nbox                       | -    | y      |
| Or     | (find-file (concat denote-directory "/phd/20240814T113502--00-garids-phd-index__phd.org")) | O.r.esearch index              | -    | y      |
| t      | :ignore t                                                                                  | (t)erminal.................... | -    |        |
| te     | eshell                                                                                     | t.e.shell emacs-shell          | -    |        |
| tv     | vterm                                                                                      | t.v.term  vterm                | -    |        |
| tx     | garid-custom/open-external-term-here                                                       | t.x.ternal terminal            | -    |        |
| tm     | tmr-with-description                                                                       | t.m.er                         | -    |        |
| Y      | gry-copy-to-x-clip                                                                         | (Y)ank to xclip                | -    |        |
| u      | :ignore                                                                                    | (u)ndo-tree                    | -    |        |
| ut     | undo-tree-visualize                                                                        | (u)ndo-(t)ree                  | -    |        |
#+TBLFM: 

**** Bookmark
#+attr_latex: :placement [H]
#+caption: bookmark
#+name: tbl-kbind-bookmarks
| key(s) | function         | short description                | mode | lambda |
|--------+------------------+----------------------------------+------+--------|
| b      | :ignore t        | (b)ookmark...................... | -    |        |
| bm     | consult-bookmark | b-(m)ark-consult                 | -    |        |
| bs     | bookmark-set     | b-(s)et                          | -    |        |
| bd     | bookmark-delete  | b-(d)elete                       | -    |        |
| br     | bookmark-rename  | b-(r)ename                       | -    |        |

**** Help related
#+attr_latex: :placement [H]
#+caption: Help for emacs/elisp related
#+name: tbl-kbind-help
| key(s) | function                    | short description                | mode | lambda |
|--------+-----------------------------+----------------------------------+------+--------|
| h      | :ignore t                   | (h)elp.......................... | -    |        |
| hh     | describe-symbol             | h-(h)elp symbol (elisp)          | -    |        |
| hH     | describe-key                | h-(H)elp keybinding              | -    |        |
| ho     | org-info                    | h-(o)rg info                     | -    |        |
| hw     | which-key-show-top-level    | h-(w)hich key                    | -    |        |
| hd     | devdocs-lookup              | h-(d)evdocs lookup               | -    |        |
| hm     | consult-man                 | h-(m)an                          | -    |        |
| hb     | habitica-hydra-control/body | habitica                         | -    |        |

**** Development commands
#+attr_latex: :placement [H]
#+caption: misc. development related
#+name: tbl-kbind-dev
| key(s) | function                      | short description          | mode | lambda |
|--------+-------------------------------+----------------------------+------+--------|
| mg     | magit-status                  | (m)a(g)it                  | -    |        |
| <      | recompile                     | recompile                  | -    |        |
| sco    | corfu-mode                    | s-(c)orfu-(m)ode           | -    |        |
| se     | eglot                         | s-(e)glot                  | -    |        |
| rg     | rg                            | (r)ip-(g)rep               | -    |        |
| gS     | git-gutter:stage-hunk         | g-.S.tage hunkk            | -    |        |
| gs     | git-gutter:popup-hunk         | g-.s. popup hunk           | -    |        |
| gr     | git-gutter:update-all-windows | g-.r.efresh                | -    |        |
| gg     | git-gutter-mode               | g-.g.utter-mode            | -    |        |
| gn     | git-gutter:next-hunk          | g-.n.ext                   | -    |        |
| gp     | git-gutter:previous-hunk      | g-.n.ext                   | -    |        |
| gd     | magit-ediff-compare           | ma(g)it-e(d) hunk          | -    |        |
| P      | :ignore                       | Python (inferior)   ...... | -    |        |
| Pr     | python-shell-restart          | P-(R)estart                | -    |        |
| PP     | run-python                    | P-(P) run-python           | -    |        |
| Pk     | comint-send-eof               | P-(k) kill  (also C-c C-d) | -    |        |

**** Consult related (picking & choosing stuff)
#+attr_latex: :placement [H]
#+caption: consult
#+name: tbl-global-general-keybindings-consult
| key(s) | function               | short description                | mode | lambda |
|--------+------------------------+----------------------------------+------+--------|
| c      | :ignore t              | (c)onsult....................... | -    |        |
| co     | consult-org-heading    | c-(o)rg   == ofh                 | -    |        |
| ci     | consult-imenu          | c-(i)menu                        | -    |        |
| cm     | consult-man            | c-(m)an                          | -    |        |
| cr     | consult-ripgrep        | c-(r)ipgrep                      | -    |        |
| cR     | consult-recent-file    | c-(R)ecent files                 | -    |        |
| cf     | consult-flymake        | c-(f)lymake                      | -    |        |
| cp     | consult-project-buffer | c-(p)roject                      | -    |        |
| cd     | consult-dir            | c-(d)ir                          | -    |        |
| cF     | consult-fd             | c-(F)d   == $find                | -    |        |
| ca     | consult-org-agenda     | c-(a)genda headings              | -    |        |
| cg     | consult-git-grep       | c-(g)it grep  == ps              | -    |        |

**** Project related
#+attr_latex: :placement [H]
#+caption: Project (more like git-repo)
#+name: tbl-global-general-keybindings-project
| key(s) | function               | short description              | mode | lambda |
|--------+------------------------+--------------------------------+------+--------|
| p      | :ignore t              | (p)rojectl.................... | -    |        |
| pr     | xref-find-references   | p-(r)eferences                 | -    |        |
| pR     | consult-eglot-symbols  | p-(R)eferences consult         | -    |        |
| pd     | consult-flymake        | p-(d)iagnostic                 | -    |        |
| pf     | project-find-file      | p-(f)ind-file                  | -    |        |
| pz     | project-switch-project | p-(z)ump-to-other-proj         | -    |        |
| ps     | consult-git-grep       | p-(s)earch git files           | -    |        |
| pS     | project-find-regexp    | p-(s)earch-in-proj             | -    |        |
| pk     | project-kill-buffers   | p-(k)ill-buf-proj              | -    |        |
| pl     | consult-project-buffer | p-(l)ist-buf-proj              | -    |        |
| pv     | consult-imenu          | p-(v)ariables                  | -    |        |
| v      | :ignore t              | (v)-project................... | -    |        |
| vq     | format-all-buffer      | v-(q)-format-buffer            | -    |        |
| vr     | eglot-rename           | v-(r)ename                     | -    |        |

**** Denote related
#+attr_latex: :placement [H]
#+caption: Denote
#+name: tbl-global-general-keybindings-denote
| key(s) | function                                    | short description             | mode | lambda |
|--------+---------------------------------------------+-------------------------------+------+--------|
| n      | :ignore t                                   | ...de.n.ote.................. | -    |        |
| nr     | denote-rename-file                          | n-r.ename                     | -    |        |
| nf     | denote-open-or-create                       | n-f.ind                       | -    |        |
| nd     | (dired denote-directory)                    | n-d.ired                      | -    | y      |
| nj     | denote-journal-extras-new-entry             | n-j.ournal                    | -    |        |
| nJ     | denote-journal-extras-new-or-existing-entry | n-J.ournal-find               | -    |        |
| nil    | denote-insert-link                          | n-i.nsert-link                | -    |        |
| nij    | denote-journal-extras-link-or-create-entry  | n-i.nsert-journal-link        | -    |        |
| nt     | denote-template                             | n-t.emplate                   | -    |        |
| nI     | garid-custom/denote-node-insert-immediate   | n-I.nsert-note                | -    |        |


**** Yas-snippet
#+attr_latex: :placement [H]
#+caption: yassnippet creation/browsing
#+name: tbl-global-general-keybindings-yassnippet
| key(s) | function                      | short description             | mode | lambda |
|--------+-------------------------------+-------------------------------+------+--------|
| y      | :ignore t                     | (y)assnippet................. | -    |        |
| yn     | yas-new-snippet               | y-(n)ew                       | -    |        |
| yt     | yas-describe-tables           | y-(t)able description table   | -    |        |
| yv     | yas-visit-snippet-file        | y-(v)isit                     | -    |        |
| yi     | consult-yasnippet             | y-(i)nsert                    | -    |        |
| ya     | yas-activate-extra-mode       | y-(a)ctivate extra mode       | -    |        |
| yd     | yas-activate-extra-mode       | y-(de)activate extra mode     | -    |        |
| yo     | org-insert-structure-template | y-(o)rg templates             | -    |        |

**** Calc related
#+caption: gnu-calc related
#+name: tbl-global-general-keybindings-calc
| key(s) | function      | short description                | mode | lambda |
|--------+---------------+----------------------------------+------+--------|
| C      | :ignore t     | (C)alc related.................. | -    |        |
| Ca     | calc          | C-(a) calc                       | -    |        |
| Ce     | calc-embedded | C-(e) embedded                   | -    |        |
| Cf     | full-calc     | C-(f) full                       | -    |        |

**** org related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-mode-related
| key(s) | function                                                    | short description                | mode | lambda |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| o      | :ignore t                                                   | (o)rg........................... | -    |        |
| oo     | org-open-at-point                                           | o-(o)pen                         | org  |        |
| oO     | garid/jump-label-def-of-ref-at-point-word                   | o-(O)pen ref def                 | org  |        |
| od     | code-from-internet/org-link-open-parent-with-dired-at-point | o-(d)irectory open               | org  |        |
| ,      | org-ctrl-c-ctrl-c                                           | C-c C-c                          | org  |        |

**** org table related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-tbl-related
| key(s) | function                             | short description             | mode | lambda |
|--------+--------------------------------------+-------------------------------+------+--------|
| oT     | :ignore t                            | o-(T)able.................... | -    |        |
| oTm    | orgtbl-mode                          | oT-(m)ode                     | -    |        |
| oTc    | orgtbl-create-or-convert-from-region | oT-(c)reate                   | -    |        |
| oTT    | org-table-toggle-column-width        | oT-(T)oggle-hide-column       | -    |        |
| oTC    | org-table-toggle-coordinate-overlays | oT-(C)oordinate               | -    |        |
| oTx    | org-table-export                     | oT-(x)port as csv file        | org  |        |
| oTs    | org-table-sum                        | oT-(s)um                      | org  |        |
| oTi    | :ignore t                            | oT-(i)nsert.................. | org  |        |
| oTic   | org-table-insert-column              | oTi-(c)olumn                  | org  |        |
| oTir   | org-table-insert-row                 | oTi-(r)ow                     | org  |        |

**** org-roam keybindings
#+attr_latex: :placement [H]
#+caption: Org-Roam
#+name: tbl-global-general-keybindings-org-roam-related
| key(s) | function                                    | short description                | mode | lambda |
|--------+---------------------------------------------+----------------------------------+------+--------|
| r      | :ignore t                                   | (r)oam.......................... | -    |        |
| ruim   | org-roam-ui-mode                            | rui-(m)ode ui-in-browser         | -    |        |
| ruio   | org-roam-ui-open                            | rui-(o)pen ui-in-browser         | -    |        |
| ruil   | org-roam-node-local                         | rui-(l)ocal ui-in-browser        | -    |        |
| rf     | my/org-roam-find-node-by-focus-tag          | r-(f)ind focus                   | -    |        |
| rF     | consult-org-roam-file-find                  | r-(f)ind full find               | -    |        |
| rl     | org-roam-buffer-toggle                      | r-(l)toggle                      | -    |        |
| rL     | org-roam-buffer-display-dedicated           | r-(L)dedicated                   | -    |        |
| ri     | org-roam-node-insert                        | r-(i)nsert                       | -    |        |
| rI     | garid-custom/org-roam-node-insert-immediate | r-(I)nsert-immediate             | -    |        |
| rt     | :ignore t                                   | r-(t)ag......................    | -    |        |
| rta    | org-roam-tag-add                            | rt-(a)dd                         | -    |        |
| rtr    | org-roam-tag-remove                         | rt-(r)emove                      | -    |        |
| rj     | :ignore t                                   | r-(d)aily.journal............    | -    |        |
| rjc    | org-roam-dailies-capture-today              | rj-(c)apture                     | -    |        |
| rjr    | org-roam-dailies-goto-today                 | rj-(t)oday                       | -    |        |
| rjt    | org-roam-dailies-goto-tomorrow              | rj-(T)omorrow                    | -    |        |
| rjy    | org-roam-dailies-goto-yesterday             | rj-(y)esterday                   | -    |        |
| rjd    | org-roam-dailies-goto-date                  | rj-(d)ate  goto date             | -    |        |
| rj>    | org-roam-dailies-goto-next-note             | rj-(>)next                       | -    |        |
| rj<    | org-roam-dailies-goto-previous-note         | rj-(<)prev                       | -    |        |
| rd     | (dired org-roam-directory)                  | r-(d)ired                        | -    | y      |
| rc     | :ignore t                                   | r-(c)onsults..................   | -    |        |
| rcb    | consult-org-roam-backlinks                  | rc-(b)acklink                    | -    |        |
| rcs    | consult-org-roam-search                     | rc-(s)earch                      | -    |        |
| rcf    | consult-org-roam-forwardlink                | rc-forwardlink                   | -    |        |
| rcF    | consult-org-roam-find-file                  | rc-Find                          | -    |        |

**** (in-org) subtree operations
#+attr_latex: :placement [H]
#+caption: in org-file, frequent commands
#+name: tbl-orgmode-general-keybindings-freq
| key(s) | function                                | short description             | mode | lambda |
|--------+-----------------------------------------+-------------------------------+------+--------|
| os     | :ignore t                               | o-(s)ubtree.................. | org  |        |
| osy    | org-copy-subtree                        | os-(y)ank (aka copy)          | org  |        |
| osY    | org-id-copy                             | os-(Y)ank (ID)                | org  |        |
| osv    | org-mark-element                        | os-(v)isually select element  | org  |        |
| osm    | org-refile                              | os-(m)ove                     | org  |        |
| osd    | org-cut-subtree                         | os-(d)elete (aka cut)         | org  |        |
| ost    | org-toggle-narrow-to-subtree            | os-(t)oggle narrow            | org  |        |
| osT    | org-set-tags-command                    | os-(t)ags                     | org  |        |
| osn    | org-num-mode                            | os-(n)um mode                 | org  |        |
| oss    | org-sort                                | os-(s)ort                     | org  |        |
| osp    | org-set-property                        | os-(p)roperty                 | org  |        |
| osI    | org-indent-mode                         | os-(I)ndent mode              | org  |        |
| osi    | :ignore t                               | os-(i)nsert heading.......... | org  |        |
| osia   | org-insert-heading-after-current        | osi-(a)fter           C-RET   | org  |        |
| osiA   | org-insert-todo-heading-respect-content | osi-(A)fter    todo C-S-RET   | org  |        |
| osih   | org-insert-heading                      | osi-(h)eading         M-RET   | org  |        |
| osiH   | org-insert-todo-heading                 | osi-(H)eading  todo M-S-RET   | org  |        |
| osis   | org-insert-subheading                   | osi-(s)ubheading              | org  |        |
| osiS   | org-insert-todo-subheading              | osi-(S)ubheading todo         | org  |        |

**** (in/out org) agenda/calendar/todo related
#+attr_latex: :placement [H]
#+caption: agenda-todo-schedule
#+name: tbl-orgmode-general-keybindings-todo
| key(s) | function                                        | short description             | mode | lambda |
|--------+-------------------------------------------------+-------------------------------+------+--------|
| oc     | org-capture                                     | o-(c)apture                   | -    |        |
| ot     | :ignore t                                       | o-(t)odo..................... | org  |        |
| otT    | org-todo                                        | ot-(T)odo                     | org  |        |
| otn    | (org-todo "NEXT" )                              | ot-(n)ext                     | org  | y      |
| ott    | (org-todo "TODO" )                              | ot-(t)odo                     | org  | y      |
| otw    | (org-todo "WAIT" )                              | ot-(w)ait                     | org  | y      |
| otd    | (org-todo "DONE" )                              | ot-(d)one                     | org  | y      |
| otc    | (org-todo "CNCL" )                              | ot-(c)ancel                   | org  | y      |
| otr    | (org-todo "" )                                  | ot-(r)emove                   | org  | y      |
| ota    | (org-archive-subtree-default-with-confirmation) | ot-(a)rchive TOOD             | org  | y      |
| oA     | org-agenda                                      | o-(A)genda                    | -    |        |
| oa     | :ignore t                                       | o-(a)genda................... | -    |        |
| oab    | org-timeblock                                   | o-a-(b)lock                   | -    |        |
| oas    | org-schedule                                    | oa-(s)chedule                 | org  |        |
| oad    | org-deadline                                    | oa-(d)eadline                 | org  |        |

**** (in-org) jumping around inside org-file
#+attr_latex: :placement [H]
#+caption: jumping or finding stuff in org file
#+name: tbl-orgmode-general-keybindings-find
| key(s) | function                        | short description             | mode | lambda |
|--------+---------------------------------+-------------------------------+------+--------|
| of     | :ignore t                       | o-(f)ind..................... | org  |        |
| ofh    | (consult-org-heading)           | of-(h)eading                  | org  | y      |
| ofn    | (consult-line "^#+name"   )     | of-(n)amed table/eq/src       | org  | y      |
| ofr    | (consult-line "^#+result" )     | of-(r)esult        /src       | org  | y      |
| ofs    | (consult-line "^#+begin_" )     | of-(s)ource src-block         | org  | y      |
| ofl    | (consult-line "\\\\label{.*}" ) | of-(l)abel                    | org  | y      |
| ofr    | (consult-line "\\\\ref{.*}" )   | of-(r)ef                      | org  | y      |
| j      | org-next-block                  | (j) jump to next src-block    | org  |        |
| k      | org-previous-block              | (k) jump to prev src-block    | org  |        |

**** (in-org) exporting (latex) related
#+attr_latex: :placement [H]
#+caption: exporting org
#+name: tbl-orgmode-general-keybindings-export
| key(s) | function                         | short description             | mode | lambda |
|--------+----------------------------------+-------------------------------+------+--------|
| ox     | :ignore t                        | o-(x)port.................... | org  |        |
| oxb    | org-beamer-export-to-pdf         | ox-(b)eamer                   | org  |        |
| oxB    | (org-beamer-export-to-pdf nil t) | ox-(B)eamer subtree           | org  | y      |
| oxp    | org-latex-export-to-pdf          | ox-(p)df latex                | org  |        |
| oxr    | org-reveal-export-to-html        | ox-(r)eveal js                | org  |        |
| oxh    | org-html-export-to-html          | ox-(h)tml                     | org  |        |
| oxP    | (org-latex-export-to-pdf nil t)  | ox-(P)df latex subtree        | org  | y      |
| oxo    | gry/org-open-pdf                 | ox-(o)pen exported pdf        | org  |        |
| oxO    | gry/org-open-html                | ox-(O)pen exported html       | org  |        |
| op     | org-latex-preview                | o-(p)review                   | org  |        |

**** (in org) org link, cite, footnote
#+attr_latex: :placement [H]
#+caption: org-link related
#+name: tbl-orgmode-general-keybindings-link
| key(s) | function                                | short description             | mode | lambda |
|--------+-----------------------------------------+-------------------------------+------+--------|
| ol     | :ignore t                               | o-(l)ink..................... | org  |        |
| old    | garid-custom/org-toggle-link-n-emphasis | ol-(d)escription show/hide    | org  |        |
| oli    | org-insert-link                         | ol-(i)nsert                   | org  |        |
| oln    | hydra-org-link-jumper/body              | ol-(n)ext link                | org  |        |
| olp    | hydra-org-link-jumper/body              | ol-(p)rev link                | org  |        |
| olo    | org-open-at-point                       | ol-(o)pen (same as SPC o o)   | org  |        |
| olf    | org-footnote-new                        | ol-(f)ootnote                 | org  |        |
| olF    | org-footnote-action                     | ol-(F)ootnote-action          | org  |        |
| olc    | org-cite-insert                         | ol-(c)itation                 | org  |        |

**** (in org) org image
#+attr_latex: :placement [H]
#+caption: handing images in org-file
#+name: tbl-orgmode-general-keybindings-img
| key(s) | function                              | short description             | mode | lambda |
|--------+---------------------------------------+-------------------------------+------+--------|
| oi     | :ignore t                             | o-(i)mg...................... | org  |        |
| oip    | org-download-clipboard                | oi-(p)aste-clipboard          | org  |        |
| oiP    | org-download-image                    | oi-(P)aste from path          | org  |        |
| oid    | org-download-delete                   | oi-(d)elete file              | org  |        |
| oie    | org-download-edit                     | oi-(e)dit externally          | org  |        |
| oir    | org-download-rename-at-point          | oi-(r)ename file              | org  |        |
| oic    | garid/put-emtpy-svg-img-at-point      | or-(c)reate svg               | org  |        |
| oit    | org-toggle-inline-images              | oi-(t)oggle shot/hide image   | org  |        |
| ois    | :ignore t                             | oi-(s)ize.................... | org  |        |
| oisn   | (setq org-image-actual-width '(800))  | ois-(n)ormal 800px            | org  | y      |
| oisb   | (setq org-image-actual-width '(1500)) | ois-(b)ig    1500px           | org  | y      |
| oiss   | (setq org-image-actual-width '(400))  | ois-(s)mall  400px            | org  | y      |
| oii    | (insert "[[edraw:]]" )                    | oi-(i)nline edraw             | org  | y      |

*** Converting tables actual keybinding
**** General.el config
#+begin_src emacs-lisp
(use-package general
  :config (general-evil-setup t)

  ;; Keybindings for everywhere
  (general-create-definer garids-keybind/for-all-modes
    :keymaps  '(normal visual emacs)
    :prefix         "SPC"
    :global-prefix  "C-SPC")

  ;; Keybindings inside Org-mode-map
  (general-create-definer garids-keybind/in-org-mode
    :states '(normal visual)
    :keymaps '(org-mode-map)
    :prefix        "SPC"
    :global-prefix "C-SPC")
  )
#+end_src
**** Script that converts previous org-tables into actual emacs configuration
:PROPERTIES:
:header-args:  :var tbl_00=tbl-kbinding-file-n-dired
:header-args+: :var tbl_01=tbl-global-general-keybindings-org-mode-related
:header-args+: :var tbl_02=tbl-global-general-keybindings-org-roam-related
:header-args+: :var tbl_03=tbl-kbind-zconvenients
:header-args+: :var tbl_04=tbl-global-general-keybindings-yassnippet
:header-args+: :var tbl_05=tbl-kbind-sys-related
:header-args+: :var tbl_06=tbl-global-general-keybindings-denote
:header-args+: :var tbl_07=tbl-kbind-help
:header-args+: :var tbl_08=tbl-global-general-keybindings-project
:header-args+: :var tbl_09=tbl-kbind-bookmarks
:header-args+: :var tbl_10=tbl-global-general-keybindings-consult
:header-args+: :var tbl_11=tbl-global-general-keybindings-calc
:header-args+: :var tbl_12=tbl-kbind-buffer-related
:header-args+: :var tbl_13=tbl-kbind-dev
:header-args+: :var tbl_14=tbl-global-general-keybindings-org-tbl-related
:header-args+: :var tbl_15=tbl-orgmode-general-keybindings-freq
:header-args+: :var tbl_16=tbl-orgmode-general-keybindings-todo
:header-args+: :var tbl_17=tbl-orgmode-general-keybindings-find
:header-args+: :var tbl_18=tbl-orgmode-general-keybindings-export
:header-args+: :var tbl_19=tbl-orgmode-general-keybindings-link
:header-args+: :var tbl_20=tbl-orgmode-general-keybindings-img
:END:
#+caption: converting
#+name: src_that_converts_key_tables
#+begin_src elisp :wrap src emacs-lisp :tangle no
(setq tblall (append tbl_00 tbl_01 tbl_02 tbl_03 tbl_04 tbl_05 tbl_06 tbl_07 tbl_08 tbl_09
                     tbl_10 tbl_11 tbl_12 tbl_13 tbl_14 tbl_15 tbl_16 tbl_17 tbl_18 tbl_19
                     tbl_20))



(setq tbl_all_kbind (seq-filter (lambda (x) (string= (nth 3 x) "-"))   tblall))
(setq tbl_org_kbind (seq-filter (lambda (x) (string= (nth 3 x) "org")) tblall))





(concat
 "(garids-keybind/for-all-modes\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (nth 0 row)
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )" (nth 1 row)) ;; for anon functions
                        (nth 1 row))                                           ;; for normal functions
                      (nth 2 row)))
            tbl_all_kbind "\n"
            )
 "\n)\n\n"
 "(garids-keybind/in-org-mode\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (nth 0 row)
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )" (nth 1 row)) ;; for anon functions
                        (nth 1 row))                                           ;; for normal functions
                      (nth 2 row)))
            tbl_org_kbind "\n"
            )
 "\n)\n"
 )
#+end_src

**** Converted config from tables

#+RESULTS: src_that_converts_key_tables
#+begin_src emacs-lisp
(garids-keybind/for-all-modes
  "SPC" '(execute-extended-command :which-key "M-x")
  "f" '(find-file :which-key "(f)ind-file")
  "d" '(dired-jump :which-key "(d)irectory")
  "D" '(:ignore t :which-key "(D)ired")
  "Ds" '(dired :which-key "D-(s)imple")
  "Dp" '(dired-preview-mode :which-key "D-(p) side-tree hide")
  "o" '(:ignore t :which-key "(o)rg...........................")
  "r" '(:ignore t :which-key "(r)oam..........................")
  "ruim" '(org-roam-ui-mode :which-key "rui-(m)ode ui-in-browser")
  "ruio" '(org-roam-ui-open :which-key "rui-(o)pen ui-in-browser")
  "ruil" '(org-roam-node-local :which-key "rui-(l)ocal ui-in-browser")
  "rf" '(my/org-roam-find-node-by-focus-tag :which-key "r-(f)ind focus")
  "rF" '(consult-org-roam-file-find :which-key "r-(f)ind full find")
  "rl" '(org-roam-buffer-toggle :which-key "r-(l)toggle")
  "rL" '(org-roam-buffer-display-dedicated :which-key "r-(L)dedicated")
  "ri" '(org-roam-node-insert :which-key "r-(i)nsert")
  "rI" '(garid-custom/org-roam-node-insert-immediate :which-key "r-(I)nsert-immediate")
  "rt" '(:ignore t :which-key "r-(t)ag......................")
  "rta" '(org-roam-tag-add :which-key "rt-(a)dd")
  "rtr" '(org-roam-tag-remove :which-key "rt-(r)emove")
  "rj" '(:ignore t :which-key "r-(d)aily.journal............")
  "rjc" '(org-roam-dailies-capture-today :which-key "rj-(c)apture")
  "rjr" '(org-roam-dailies-goto-today :which-key "rj-(t)oday")
  "rjt" '(org-roam-dailies-goto-tomorrow :which-key "rj-(T)omorrow")
  "rjy" '(org-roam-dailies-goto-yesterday :which-key "rj-(y)esterday")
  "rjd" '(org-roam-dailies-goto-date :which-key "rj-(d)ate  goto date")
  "rj>" '(org-roam-dailies-goto-next-note :which-key "rj-(>)next")
  "rj<" '(org-roam-dailies-goto-previous-note :which-key "rj-(<)prev")
  "rd" '((lambda () (interactive) (dired org-roam-directory) ) :which-key "r-(d)ired")
  "rc" '(:ignore t :which-key "r-(c)onsults..................")
  "rcb" '(consult-org-roam-backlinks :which-key "rc-(b)acklink")
  "rcs" '(consult-org-roam-search :which-key "rc-(s)earch")
  "rcf" '(consult-org-roam-forwardlink :which-key "rc-forwardlink")
  "rcF" '(consult-org-roam-find-file :which-key "rc-Find")
  "z" '(:ignore t :which-key "(z)conveniences............")
  "za" '(garid-custom/align-regexp-and-untabify :which-key "z-(a)lign")
  "zr" '(replace-regexp :which-key "z-(r)eplace word in buf")
  "zh" '(highlight-symbol-at-point :which-key "z-(h)ighlight word")
  "zH" '(unhighlight-regexp :which-key "z-(H)ighlight word off")
  "zs" '(:ignore t :which-key "z-(s)pell..................")
  "zsw" '(ispell-word :which-key "zs-(w)ord")
  "zsr" '(ispell-region :which-key "zs-(r)egion")
  "zsC" '(ispell-comments-and-strings :which-key "zs-(C)omment-full")
  "zsc" '(ispell-comment-or-string-at-point :which-key "zs-(c)omment-here")
  "zsb" '(ispell-buffer :which-key "zs-(b)uffer")
  "zsm" '(ispell-message :which-key "zs-(m)essage")
  "zsq" '(ispell-kill-ispell :which-key "zs-(q)uit")
  "zsl" '(ispell-change-dictionary :which-key "zs-(l)anguage en-mn")
  "ZQ" '(kill-emacs :which-key "kill emacs")
  "y" '(:ignore t :which-key "(y)assnippet.................")
  "yn" '(yas-new-snippet :which-key "y-(n)ew")
  "yt" '(yas-describe-tables :which-key "y-(t)able description table")
  "yv" '(yas-visit-snippet-file :which-key "y-(v)isit")
  "yi" '(consult-yasnippet :which-key "y-(i)nsert")
  "ya" '(yas-activate-extra-mode :which-key "y-(a)ctivate extra mode")
  "yd" '(yas-activate-extra-mode :which-key "y-(de)activate extra mode")
  "yo" '(org-insert-structure-template :which-key "y-(o)rg templates")
  "s" '(:ignore t :which-key "(s)ystem.....................")
  "srf" '(recentf-open-files :which-key "s-(r)ecent-(f)iles")
  "sl" '(:ignore t :which-key "s-(l)ine.....................")
  "sl5" '((lambda () (interactive) (setq display-line-numbers-width 5) ) :which-key "sl-(5) digit number")
  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4) ) :which-key "sl-(4) digit number")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3) ) :which-key "sl-(3) digit number")
  "slm" '(scroll-lock-mode :which-key "sl-(m)ode scroll-lock-mode")
  "slv" '(global-display-fill-column-indicator-mode :which-key "sl-(v)ertical-line")
  "sln" '(display-line-numbers-mode :which-key "sl-(n)umber toggle")
  "slr" '(ruler-mode :which-key "sl-(r)uler mode")
  "scl" '((lambda () (interactive) (global-command-log-mode) (clm/open-command-log-buffer) ) :which-key "s.c.md-.l.og")
  "sw" '(whitespace-mode :which-key "s.w.hitespace")
  "sg" '(:ignore t :which-key "s-garid")
  "sgf" '(gry/distraction-free-on :which-key "sg.f.ocus")
  "sgr" '(gry/distraction-free-off :which-key "sg.r.eset")
  "O" '(:ignore t :which-key "(O)pen........................")
  "Oe" '((lambda () (interactive) (find-file "~/.config/emacs/init.org") ) :which-key "O.e.macs confg org")
  "OE" '((lambda () (interactive) (find-file "~/.config/emacs/init.el") ) :which-key "O.E.macs confg el")
  "Ob" '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)) ) :which-key "O.b.ibliography")
  "Op" '((lambda () (interactive) (find-file "~/BrainDump/bookshelf/") ) :which-key "O.p.dfs")
  "Oc" '(citar-open :which-key "O.c.itaiton")
  "OO" '((lambda () (interactive) (find-file org-default-notes-file) ) :which-key "O.O.rg capture")
  "Oa" '((lambda () (interactive) (find-file (concat org-gtd-directory "/gtd_archive_2024") ) ) :which-key "O.a.rchive")
  "Ot" '((lambda () (interactive) (find-file (concat org-gtd-directory "/org-gtd-tasks.org")) ) :which-key "O.t.asks")
  "Oi" '((lambda () (interactive) (find-file (concat org-gtd-directory "/inbox.org")        ) ) :which-key "O.i.nbox")
  "Or" '((lambda () (interactive) (find-file (concat denote-directory "/phd/20240814T113502--00-garids-phd-index__phd.org")) ) :which-key "O.r.esearch index")
  "t" '(:ignore t :which-key "(t)erminal....................")
  "te" '(eshell :which-key "t.e.shell emacs-shell")
  "tv" '(vterm :which-key "t.v.term  vterm")
  "tx" '(garid-custom/open-external-term-here :which-key "t.x.ternal terminal")
  "tm" '(tmr-with-description :which-key "t.m.er")
  "Y" '(gry-copy-to-x-clip :which-key "(Y)ank to xclip")
  "u" '(:ignore :which-key "(u)ndo-tree")
  "ut" '(undo-tree-visualize :which-key "(u)ndo-(t)ree")
  "n" '(:ignore t :which-key "...de.n.ote..................")
  "nr" '(denote-rename-file :which-key "n-r.ename")
  "nf" '(denote-open-or-create :which-key "n-f.ind")
  "nd" '((lambda () (interactive) (dired denote-directory) ) :which-key "n-d.ired")
  "nj" '(denote-journal-extras-new-entry :which-key "n-j.ournal")
  "nJ" '(denote-journal-extras-new-or-existing-entry :which-key "n-J.ournal-find")
  "nil" '(denote-insert-link :which-key "n-i.nsert-link")
  "nij" '(denote-journal-extras-link-or-create-entry :which-key "n-i.nsert-journal-link")
  "nt" '(denote-template :which-key "n-t.emplate")
  "nI" '(garid-custom/denote-node-insert-immediate :which-key "n-I.nsert-note")
  "h" '(:ignore t :which-key "(h)elp..........................")
  "hh" '(describe-symbol :which-key "h-(h)elp symbol (elisp)")
  "hH" '(describe-key :which-key "h-(H)elp keybinding")
  "ho" '(org-info :which-key "h-(o)rg info")
  "hw" '(which-key-show-top-level :which-key "h-(w)hich key")
  "hd" '(devdocs-lookup :which-key "h-(d)evdocs lookup")
  "hm" '(consult-man :which-key "h-(m)an")
  "hb" '(habitica-hydra-control/body :which-key "habitica")
  "p" '(:ignore t :which-key "(p)rojectl....................")
  "pr" '(xref-find-references :which-key "p-(r)eferences")
  "pR" '(consult-eglot-symbols :which-key "p-(R)eferences consult")
  "pd" '(consult-flymake :which-key "p-(d)iagnostic")
  "pf" '(project-find-file :which-key "p-(f)ind-file")
  "pz" '(project-switch-project :which-key "p-(z)ump-to-other-proj")
  "ps" '(consult-git-grep :which-key "p-(s)earch git files")
  "pS" '(project-find-regexp :which-key "p-(s)earch-in-proj")
  "pk" '(project-kill-buffers :which-key "p-(k)ill-buf-proj")
  "pl" '(consult-project-buffer :which-key "p-(l)ist-buf-proj")
  "pv" '(consult-imenu :which-key "p-(v)ariables")
  "v" '(:ignore t :which-key "(v)-project...................")
  "vq" '(format-all-buffer :which-key "v-(q)-format-buffer")
  "vr" '(eglot-rename :which-key "v-(r)ename")
  "b" '(:ignore t :which-key "(b)ookmark......................")
  "bm" '(consult-bookmark :which-key "b-(m)ark-consult")
  "bs" '(bookmark-set :which-key "b-(s)et")
  "bd" '(bookmark-delete :which-key "b-(d)elete")
  "br" '(bookmark-rename :which-key "b-(r)ename")
  "c" '(:ignore t :which-key "(c)onsult.......................")
  "co" '(consult-org-heading :which-key "c-(o)rg   == ofh")
  "ci" '(consult-imenu :which-key "c-(i)menu")
  "cm" '(consult-man :which-key "c-(m)an")
  "cr" '(consult-ripgrep :which-key "c-(r)ipgrep")
  "cR" '(consult-recent-file :which-key "c-(R)ecent files")
  "cf" '(consult-flymake :which-key "c-(f)lymake")
  "cp" '(consult-project-buffer :which-key "c-(p)roject")
  "cd" '(consult-dir :which-key "c-(d)ir")
  "cF" '(consult-fd :which-key "c-(F)d   == $find")
  "ca" '(consult-org-agenda :which-key "c-(a)genda headings")
  "cg" '(consult-git-grep :which-key "c-(g)it grep  == ps")
  "C" '(:ignore t :which-key "(C)alc related..................")
  "Ca" '(calc :which-key "C-(a) calc")
  "Ce" '(calc-embedded :which-key "C-(e) embedded")
  "Cf" '(full-calc :which-key "C-(f) full")
  "l" '(consult-buffer :which-key "(l)ist-buffer")
  "L" '(:ignore t :which-key "(L)buffer....................")
  "Lr" '(revert-buffer-quick :which-key "L-(r)eread")
  "Le" '(eval-buffer :which-key "L-(e)val")
  "Li" '(ibuffer :which-key "L-(i)buffer")
  "Ln" '(rename-buffer :which-key "L-(r)ename")
  "L<" '(switch-to-prev-buffer :which-key "L-(<)prev")
  "L>" '(switch-to-next-buffer :which-key "L-(>)next")
  "Ld" '(crux-delete-file-and-buffer :which-key "L-(d)elete")
  "Lc" '(clone-indirect-buffer :which-key "L-(c)lone")
  "Ls" '(crux-create-scratch-buffer :which-key "L-(s)cratch-buffer")
  "Lh" '(buf-move-left :which-key "L-(h) move left")
  "Lj" '(buf-move-down :which-key "L-(j) move down")
  "Lk" '(buf-move-up :which-key "L-(k) move up")
  "Ll" '(buf-move-right :which-key "L-(l) move right")
  "LL" '(tear-off-window :which-key "L-(L) tear window to frame")
  "mg" '(magit-status :which-key "(m)a(g)it")
  "<" '(recompile :which-key "recompile")
  "sco" '(corfu-mode :which-key "s-(c)orfu-(m)ode")
  "se" '(eglot :which-key "s-(e)glot")
  "rg" '(rg :which-key "(r)ip-(g)rep")
  "gS" '(git-gutter:stage-hunk :which-key "g-.S.tage hunkk")
  "gs" '(git-gutter:popup-hunk :which-key "g-.s. popup hunk")
  "gr" '(git-gutter:update-all-windows :which-key "g-.r.efresh")
  "gg" '(git-gutter-mode :which-key "g-.g.utter-mode")
  "gn" '(git-gutter:next-hunk :which-key "g-.n.ext")
  "gp" '(git-gutter:previous-hunk :which-key "g-.n.ext")
  "gd" '(magit-ediff-compare :which-key "ma(g)it-e(d) hunk")
  "P" '(:ignore :which-key "Python (inferior)   ......")
  "Pr" '(python-shell-restart :which-key "P-(R)estart")
  "PP" '(run-python :which-key "P-(P) run-python")
  "Pk" '(comint-send-eof :which-key "P-(k) kill  (also C-c C-d)")
  "oT" '(:ignore t :which-key "o-(T)able....................")
  "oTm" '(orgtbl-mode :which-key "oT-(m)ode")
  "oTc" '(orgtbl-create-or-convert-from-region :which-key "oT-(c)reate")
  "oTT" '(org-table-toggle-column-width :which-key "oT-(T)oggle-hide-column")
  "oTC" '(org-table-toggle-coordinate-overlays :which-key "oT-(C)oordinate")
  "oc" '(org-capture :which-key "o-(c)apture")
  "oA" '(org-agenda :which-key "o-(A)genda")
  "oa" '(:ignore t :which-key "o-(a)genda...................")
  "oab" '(org-timeblock :which-key "o-a-(b)lock")
)

(garids-keybind/in-org-mode
  "oo" '(org-open-at-point :which-key "o-(o)pen")
  "oO" '(garid/jump-label-def-of-ref-at-point-word :which-key "o-(O)pen ref def")
  "od" '(code-from-internet/org-link-open-parent-with-dired-at-point :which-key "o-(d)irectory open")
  "," '(org-ctrl-c-ctrl-c :which-key "C-c C-c")
  "oTx" '(org-table-export :which-key "oT-(x)port as csv file")
  "oTs" '(org-table-sum :which-key "oT-(s)um")
  "oTi" '(:ignore t :which-key "oT-(i)nsert..................")
  "oTic" '(org-table-insert-column :which-key "oTi-(c)olumn")
  "oTir" '(org-table-insert-row :which-key "oTi-(r)ow")
  "os" '(:ignore t :which-key "o-(s)ubtree..................")
  "osy" '(org-copy-subtree :which-key "os-(y)ank (aka copy)")
  "osY" '(org-id-copy :which-key "os-(Y)ank (ID)")
  "osv" '(org-mark-element :which-key "os-(v)isually select element")
  "osm" '(org-refile :which-key "os-(m)ove")
  "osd" '(org-cut-subtree :which-key "os-(d)elete (aka cut)")
  "ost" '(org-toggle-narrow-to-subtree :which-key "os-(t)oggle narrow")
  "osT" '(org-set-tags-command :which-key "os-(t)ags")
  "osn" '(org-num-mode :which-key "os-(n)um mode")
  "oss" '(org-sort :which-key "os-(s)ort")
  "osp" '(org-set-property :which-key "os-(p)roperty")
  "osI" '(org-indent-mode :which-key "os-(I)ndent mode")
  "osi" '(:ignore t :which-key "os-(i)nsert heading..........")
  "osia" '(org-insert-heading-after-current :which-key "osi-(a)fter           C-RET")
  "osiA" '(org-insert-todo-heading-respect-content :which-key "osi-(A)fter    todo C-S-RET")
  "osih" '(org-insert-heading :which-key "osi-(h)eading         M-RET")
  "osiH" '(org-insert-todo-heading :which-key "osi-(H)eading  todo M-S-RET")
  "osis" '(org-insert-subheading :which-key "osi-(s)ubheading")
  "osiS" '(org-insert-todo-subheading :which-key "osi-(S)ubheading todo")
  "ot" '(:ignore t :which-key "o-(t)odo.....................")
  "otT" '(org-todo :which-key "ot-(T)odo")
  "otn" '((lambda () (interactive) (org-todo "NEXT" ) ) :which-key "ot-(n)ext")
  "ott" '((lambda () (interactive) (org-todo "TODO" ) ) :which-key "ot-(t)odo")
  "otw" '((lambda () (interactive) (org-todo "WAIT" ) ) :which-key "ot-(w)ait")
  "otd" '((lambda () (interactive) (org-todo "DONE" ) ) :which-key "ot-(d)one")
  "otc" '((lambda () (interactive) (org-todo "CNCL" ) ) :which-key "ot-(c)ancel")
  "otr" '((lambda () (interactive) (org-todo "" ) ) :which-key "ot-(r)emove")
  "ota" '((lambda () (interactive) (org-archive-subtree-default-with-confirmation) ) :which-key "ot-(a)rchive TOOD")
  "oas" '(org-schedule :which-key "oa-(s)chedule")
  "oad" '(org-deadline :which-key "oa-(d)eadline")
  "of" '(:ignore t :which-key "o-(f)ind.....................")
  "ofh" '((lambda () (interactive) (consult-org-heading) ) :which-key "of-(h)eading")
  "ofn" '((lambda () (interactive) (consult-line "^#+name"   ) ) :which-key "of-(n)amed table/eq/src")
  "ofr" '((lambda () (interactive) (consult-line "^#+result" ) ) :which-key "of-(r)esult        /src")
  "ofs" '((lambda () (interactive) (consult-line "^#+begin_" ) ) :which-key "of-(s)ource src-block")
  "ofl" '((lambda () (interactive) (consult-line "\\\\label{.*}" ) ) :which-key "of-(l)abel")
  "ofr" '((lambda () (interactive) (consult-line "\\\\ref{.*}" ) ) :which-key "of-(r)ef")
  "j" '(org-next-block :which-key "(j) jump to next src-block")
  "k" '(org-previous-block :which-key "(k) jump to prev src-block")
  "ox" '(:ignore t :which-key "o-(x)port....................")
  "oxb" '(org-beamer-export-to-pdf :which-key "ox-(b)eamer")
  "oxB" '((lambda () (interactive) (org-beamer-export-to-pdf nil t) ) :which-key "ox-(B)eamer subtree")
  "oxp" '(org-latex-export-to-pdf :which-key "ox-(p)df latex")
  "oxr" '(org-reveal-export-to-html :which-key "ox-(r)eveal js")
  "oxh" '(org-html-export-to-html :which-key "ox-(h)tml")
  "oxP" '((lambda () (interactive) (org-latex-export-to-pdf nil t) ) :which-key "ox-(P)df latex subtree")
  "oxo" '(gry/org-open-pdf :which-key "ox-(o)pen exported pdf")
  "oxO" '(gry/org-open-html :which-key "ox-(O)pen exported html")
  "op" '(org-latex-preview :which-key "o-(p)review")
  "ol" '(:ignore t :which-key "o-(l)ink.....................")
  "old" '(garid-custom/org-toggle-link-n-emphasis :which-key "ol-(d)escription show/hide")
  "oli" '(org-insert-link :which-key "ol-(i)nsert")
  "oln" '(hydra-org-link-jumper/body :which-key "ol-(n)ext link")
  "olp" '(hydra-org-link-jumper/body :which-key "ol-(p)rev link")
  "olo" '(org-open-at-point :which-key "ol-(o)pen (same as SPC o o)")
  "olf" '(org-footnote-new :which-key "ol-(f)ootnote")
  "olF" '(org-footnote-action :which-key "ol-(F)ootnote-action")
  "olc" '(org-cite-insert :which-key "ol-(c)itation")
  "oi" '(:ignore t :which-key "o-(i)mg......................")
  "oip" '(org-download-clipboard :which-key "oi-(p)aste-clipboard")
  "oiP" '(org-download-image :which-key "oi-(P)aste from path")
  "oid" '(org-download-delete :which-key "oi-(d)elete file")
  "oie" '(org-download-edit :which-key "oi-(e)dit externally")
  "oir" '(org-download-rename-at-point :which-key "oi-(r)ename file")
  "oic" '(garid/put-emtpy-svg-img-at-point :which-key "or-(c)reate svg")
  "oit" '(org-toggle-inline-images :which-key "oi-(t)oggle shot/hide image")
  "ois" '(:ignore t :which-key "oi-(s)ize....................")
  "oisn" '((lambda () (interactive) (setq org-image-actual-width '(800)) ) :which-key "ois-(n)ormal 800px")
  "oisb" '((lambda () (interactive) (setq org-image-actual-width '(1500)) ) :which-key "ois-(b)ig    1500px")
  "oiss" '((lambda () (interactive) (setq org-image-actual-width '(400)) ) :which-key "ois-(s)mall  400px")
  "oii" '((lambda () (interactive) (insert "[[edraw:]]" ) ) :which-key "oi-(i)nline edraw")
)
#+end_src

* System:
** Recent files
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items  30
      recentf-max-saved-items 30)
#+end_src
** Custom opening external terminal at current buffer           :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/open-external-term-here ()
  (interactive)
  (call-process-shell-command
   (concat
    user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
;;(shell-command (concat user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
#+end_src
** shell script to open terminal                              :shell_script:
#+begin_src bash :tangle garid/open_external_term.sh
#!/bin/bash

# Open System termianl $TERMINAL at $1:
# nohup for exitting terminal that executed this script
# other wise terminal that executed this script just hangs there

# if $1 is directory; -> cd to this dir
if [[ -d $1 ]]; then             
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n at: $1"
	cd "$1" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is file; -> cd to parent dir
elif [[ -f $1 ]]; then
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n near: $1"
	cd "$(dirname "$1")" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is neither directory nor file -> fail
else
	notify-send "Emacs external terminal" "$1\nwas not found\nOpening at Home"
	nohup "$TERMINAL" > /dev/null &
	return 0
fi
#+end_src
** Make long file faster
[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][this article]]

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right )
(setq         bidi-inhibit-bpa          t             )
#+end_src

* Dired
** bsd related fix
#+begin_src emacs-lisp
(when (eq system-type 'berkeley-unix)
  (setq insert-directory-program "gls"))
;; can be include ~:if .....~ in usepackage below
#+end_src
** dired: directory
#+begin_src emacs-lisp
(use-package dired
  :ensure   nil
  :commands (dired dired-jump)
  :custom   ((dired-listing-switches "-agho --group-directories-first"))
  :hook     ((dired-mode . denote-dired-mode)
             (dired-mode . dired-omit-mode  ))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h"          'dired-single-up-directory
    "l"          'dired-single-buffer
    (kbd "C-s")  'dired-omit-mode      ;; same keybinding with my lf config
    " "          'nil
    (kbd "N")    'mkdir
    (kbd "C-n")  'mkdir)
  )
#+end_src
** dired: additionals
I don't use these not much  
#+begin_src emacs-lisp
(use-package dired-single)
(use-package dired-preview
  :ensure t)
#+end_src
* Misc Packages
** buffer move
#+begin_src emacs-lisp
(use-package buffer-move)
#+end_src
** crux
#+begin_src emacs-lisp
(use-package crux
  :ensure t)
#+end_src
** command-log-mode
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
** format-all
#+begin_src emacs-lisp
(use-package format-all)
#+end_src
** popper
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle      )
         ("M-`"   . popper-cycle       )
         ("C-M-`" . popper-toggle-type )
         ;; :map popper-mode-map
         ;; ("TAB"   . forward-button     ) ;; mostly for terminal mode
         ;; :map help-mode-map
         ;; ("TAB"   . forward-button     ) ;; mostly for terminal mode

         )
  :init
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "\\*eldoc\\*"
                                   "\\*eldoc.*\\*" ;;regex
                                   "\\*Outline.*\\*" ;;regex
                                   "\\*xref\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   "\\*devdocs\\*"
                                   "\\*lsp-bridge-doc\\*"
                                   "\\*git-gutter:diff\\*"
                                   "\\*Org Select\\*"
                                   "CAPTURE-inbox.org"
                                   "CAPTURE-20230926T010607--todo__todo.org"
                                   help-mode
                                   compilation-mode))
  (popper-mode      +1)
  (popper-echo-mode +1))
#+end_src
** habitica
#+begin_src emacs-lisp
(use-package habitica
  :ensure t
  :config
  (defhydra habitica-hydra-control ()
    "
^task^                         ^checklist^                          ^movement^
^^^^^^^^---------------------------------------------------------------------------------------
_g_: refresh                   _c a_: checklist add                  _j_: vi.down
_n_: new task                  _c t_: checklist toggle               _k_: vi.up
_+_: + task/habit              _c d_: checklist delete               _<tab>_: org cycle
_-_: - task/habit              _c r_: checklist rename               _h_: vi.left
_t_: toggle todo state                                               _l_: vi.right
_d_: deadline set                                                    _C-j_: org-forward-heading-same-level
_i_: intensity set                                                   _C-k_: org-backard-heading-same-level
_q_: add a tag to task                                               _M-S-<return>_: habitica-new-task
_Q_: delete a tag to task
"

    ("g"            habitica-tasks                      )
    ("n"            habitica-new-task                   )
    ("+"            habitica-up-task                    )
    ("-"            habitica-down-task                  )
    ("t"            habitica-todo-task                  )
    ("d"            habitica-set-deadline               )
    ("i"            habitica-set-difficulty             )
    ("q"            habitica-add-tag-to-task            )
    ("Q"            habitica-remove-tag-to-task         )

    ("c a"          habitica-add-item-to-checklist      )
    ("c t"          habitica-score-checklist-item       )
    ("c d"          habitica-delete-item-from-checklist )
    ("c r"          habitica-rename-item-on-checklist   )

    ("j"            next-line                           )
    ("k"            previous-line                       )
    ("h"            backward-char                       )
    ("l"            forward-char                        )
    ("C-j"          org-forward-heading-same-level      )
    ("C-k"          org-backward-heading-same-level     )
    ("M-S-<return>" habitica-new-task                   )
    ("<tab>"        org-cycle                           )
    ("/"            org-sparse-tree                     )
    ("D E L" habitica-delete-task "delete task"         ))
  )
#+end_src
** COMMENT emacs-everywhere
#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src
* COMMENT Unused
** COMMENT mu4e
#+begin_src emacs-lisp
;; (delete 'mu4e evil-collection-mode-list)
;; (delete 'mu4e-conversation evil-collection-mode-list)

(require 'mu4e)

;; default
(setq mu4e-maildir
      "/home/garid/.local/share/mail/garidzorigoo@gmail.com")

(setq mu4e-get-mail-command "mailsync")
(setq mu4e-drafts-folder "/[Gmail]/Drafts")
(setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
(setq mu4e-trash-folder  "/[Gmail]/Trash")

;; dont save message to Sent msg, GMail/IMAP will take care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
(setq mu4e-maildir-shortcuts
      '(("/INBOX"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; something about ourselves
;; I don't use a signature...
(setq
 user-mail-address "garidzorigoo@gmail.com"
 user-full-name    "Garid Z."
 message-signature "Garid Z."
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type  'ssl)
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
** COMMENT notmuch
#+begin_src emacs-lisp
(use-package notmuch)
#+end_src
** COMMENT eww web browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url               ; Use eww as the default browser
      shr-use-fonts                nil                          ; No special fonts
      shr-use-colors               nil                          ; No colours
      shr-indentation              2                            ; Left-side margin
      shr-width                    85                           ; Fold text to 85 columns
      eww-search-prefix "https://lite.duckduckgo.com/lite/?q=") ; Use another engine for searching
#+end_src
* Finish Notifier
#+begin_src emacs-lisp
(call-process-shell-command "notify-send \"Emacs\" \"Emacs server has inialized\" &") 
#+end_src

* Custom set variable:
[[https://www.youtube.com/watch?v=tw2-rI2bxSg&t=1s][Initial idea from Systems crafter]], [[https://emacs.stackexchange.com/a/18785/38482][and code structure from this answer on emacs stackexchange]], and need to set ~enble-local-eval~ to ~t~ ()

#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values '(dired-omit-files         . "\\`[.]?#\\|\\`[.][.]?\\'\\|\\.html\\'\\|\\.tex\\'"    )) ;; <-- wokr
#+end_src
