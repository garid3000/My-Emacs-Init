#+title:        My Emacs Configuration
#+author:       Garid Zorigoo
#+SETUPFILE:    ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org
#+startup:      show2levels
#+PROPERTY:     header-args :tangle init.el
#+auto_tangle:  t

* From shell you can run make run:
#+begin_src makefile :noeval :tangle Makefile
# make run to extract init.el from init.org from shell
run:
	emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "init.org")'
	chmod +x 'garid/edit_img.sh'
#+end_src

* Package Manager:
** Package Repositories 
I'm pulling packages from following 3 places (not sure that I need all three): 

1. [[https://melpa.org/packages/]]
2. [[https://elpa.gnu.org/packages/]]
3. [[https://elpa.nongnu.org/nongnu/]]

#+begin_src emacs-lisp
;; Package repos
(setq package-archives
      '(("melpa"        . "https://melpa.org/packages/"     )
        ("elpa"         . "https://elpa.gnu.org/packages/"  )
        ("nongnu"       . "https://elpa.nongnu.org/nongnu/" )))
#+end_src
** Initialize ~use-package~ manager
#+begin_src emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)
#+end_src
* Vi Movement Related
** vim-undo
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src
** evil
[[https://github.com/emacs-evil/evil][Evil]] stands for Extendable Vi Layer for Emacs.
It emulates vi motion inside Emacs. 

#+begin_src emacs-lisp
;; Vim Bindings
(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit  )
         ;; ("M-j"   . evil-scroll-line-down )  C-e
         ;; ("M-k"   . evil-scroll-line-up   )  C-y
         ;; ("M-d"   . evil-scroll-page-down )  G
         ;; ("M-u"   . evil-scroll-page-up   )  g g
         )
  :init (setq evil-want-keybinding      nil
              evil-undo-system         'undo-fu )

  ;; evil-want-C-i-jump     nil       ;; test I may need jumpy back and forth
  ;; for org-cycle (tab) working for terminal
  :config
  (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)
  ;; cuz https://emacs.stackexchange.com/a/73457/38482
  (evil-mode 1))
#+end_src
** evil-collection
[[https://github.com/emacs-evil/evil-collection][Evil-collection]] is sets of evil keybindings for various modes in Emacs.
Most notably I like to use magit, sometimes email.

- I may need to reconside using this. and do my own keybindings for the major modes.

#+begin_src emacs-lisp
;;; Vim Bindings Everywhere else
(use-package evil-collection
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src
** evil-surround
I sometimes use. It can wrap (visually) selected region with quotation mark or parenthesis.

#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode))
#+end_src
* Theme & Colors
** Font
#+begin_src emacs-lisp :results none
;; if my main machine use following fonts
;; On arch, I installed with =yay -s ttf-iosevka-term-ss06=
(when (eq system-type 'gnu/linux)
  (set-face-attribute       'default nil :font "Iosevka Term SS06" :height 120)
  (setq default-frame-alist '((font . "Iosevka Term SS06")))
  (set-fontset-font "fontset-default"
                    'japanese-jisx0208
                    '("DejaVu Sans" . "iso10646-1"))
  (message "hello from linux"))

;; for my openbsd machine use this font
;; On openbsd, I installed with =pkg_add iosevka=
(when (eq system-type 'berkeley-unix)
  (set-face-attribute       'default nil :font "Iosevka Term" :height 80)
  (setq default-frame-alist '((font . "Iosevka Term")))
  (set-fontset-font "fontset-default"
                    'japanese-jisx0208
                    '("DejaVu Sans" . "iso10646-1"))
  (message "hello from bsd"))
#+end_src

** Theme
#+begin_src emacs-lisp :results none
(custom-set-faces
 '(line-number        ((t (:background "gray15"   :foreground "#7c6f64"))))
 '(mode-line          ((t (:background "dim gray" :foreground "white"))))
 '(mode-line-inactive ((t (:background nil)))))

(use-package gruvbox-theme
  :config (load-theme 'gruvbox-dark-hard t))

(use-package evil-terminal-cursor-changer
  :config (evil-terminal-cursor-changer-activate))
#+end_src

** Transparency
#+begin_src emacs-lisp :results none
;;transparent emacs
(add-to-list 'default-frame-alist '(alpha 95 95))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (if (eq
     (if (numberp alpha)
         alpha
       (cdr alpha)) ; may also be nil
     100)
    (set-frame-parameter nil 'alpha '(95 . 95))
      (set-frame-parameter nil 'alpha '(100 . 100)))))
#+end_src
** Emacs Interface config
#+begin_src emacs-lisp
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode   -1)        ; Disable the toolbar
(tooltip-mode    -1)        ; Disable tooltips
(set-fringe-mode 15)        ; Give some breathing room
(menu-bar-mode   -1)        ; Disable the menu bar
#+end_src
** Display Number & cursor-line highlightnig
#+begin_src emacs-lisp
;; setting line
(use-package display-line-numbers
  :config
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
  )

(global-hl-line-mode 1)
#+end_src

* M-x related 
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ("C-j"   . vertico-next        ) ("M-j"   . vertico-next        )
              ("C-k"   . vertico-previous    ) ("M-k"   . vertico-previous    )
              ("C-f"   . vertico-exit        ) ("M-f"   . vertico-exit        )
              ("C-u"   . vertico-scroll-up   ) ("M-u"   . vertico-scroll-up   )
              ("C-d"   . vertico-scroll-down ) ("M-d"   . vertico-scroll-down )
              ("M-n"   . vertico-next        ) ("M-p"   . vertico-previous    ))
  :custom (vertico-cycle t)
  :init (vertico-mode))
#+end_src
** margin
#+begin_src emacs-lisp
;; brief explanations on M-x entries
(use-package marginalia
  :after vertico
  :ensure t
  :custom (marginalia-annotators
           '(marginalia-annotators-heavy
             marginalia-annotators-light nil))
  :init (marginalia-mode))
#+end_src
** consult
#+begin_src emacs-lisp
(use-package consult
  :bind (("M-f"  . consult-line)))
#+end_src
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  ;; (completion-styles '(orderless flex))
  ;; (completion-category-overrides
  '((file (styles basic partial-completion))))
#+end_src
** savehist
#+begin_src emacs-lisp
(use-package savehist
  :init (savehist-mode))
#+end_src
* Org
** Org mode configuration
#+begin_src emacs-lisp :noeval
(use-package org
  ;; :requires (org-tempo org-indent)
  ;; (require 'org-tempo)
  ;; (require 'org-indent)
  :bind (:map org-mode-map
              ("C-S-j" . org-next-visible-heading     )
              ("C-S-k" . org-previous-visible-heading ))

  :hook (org-mode . garid-custom/org-mode-hooked-func)
  :custom
  (org-ellipsis                      " ▼" );; folded subtree symbol
  (org-hide-emphasis-markers         t               )
  (org-log-done                      t               )
  (org-image-actual-width            '(800)          );; sets images size TODO for different size
  (org-src-tab-acts-natively         t               )
  (org-src-preserve-indentation      nil             );; scr-blk
  (org-edit-src-content-indentation  0               );; scr-blk
  (org-startup-folded                "fold"          );; folds property drawers, good for roam nodes
  (org-plantuml-jar-path             "/usr/share/java/plantuml/plantuml.jar" );; this may differ on different machines
  (org-file-apps '((auto-mode     . emacs              )
                   ("\\.gif\\'"   . "mpv    \"%s\""    )
                   ("\\.mp4\\'"   . "mpv    \"%s\""    )
                   ("\\.png\\'"   . "sxiv   \"%s\""    )
                   ("\\.svg\\'"   . "sxiv   \"%s\""    )
                   ("\\.jpeg\\'"  . "sxiv   \"%s\""    )
                   ("\\.jpg\\'"   . "sxiv   \"%s\""    )
                   ("\\.html\\'"  . "brave  \"%s\""    )
                   ("\\.pdf\\'"   . "sioyek \"%s\""    )
                   ("\\.mkv\\'"   . "mpv    \"%s\""    )
                   ("\\.xopp\\'"  . "xournalpp \"%s\"" )))


  (org-todo-keywords      '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|"
                                      "PROCESSED(p)" "DONE(d)" "CANCELLED(c)"    )))

  (org-todo-keyword-faces '(("TODO"       . org-warning )
                            ("STARTED"    . "orange"    )
                            ("WAITING"    . "yellow"    )
                            ("PROCESSED"  . "dim gray"  )
                            ("CANCELLED"  . (:foreground "gray30" :weight bold))))

  (org-latex-listings                   t                                      )
  (org-latex-format-headline-function   'garid-custom/latex-formattig-headings )
  (org-latex-active-timestamp-format     "\\textcolor{orange}{%s}"             )
  (org-latex-inactive-timestamp-format   "\\textcolor{Brown}{%s}"              )
  (org-latex-pdf-process                '("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))

  ;; org-highlight-latex-and-related     '(latex script entities) -- lets try this for performance

  ;;:init
  :config
  (plist-put    org-format-latex-options   :scale 1.7      )    ;; latex equation previewing
  (add-to-list 'org-latex-packages-alist   '("" "listings" ))
  (add-to-list 'org-latex-packages-alist   '("" "color"    ))

  (require 'org-tempo)
  ;; org tempo should I make it yassnippet?
  (add-to-list 'org-structure-template-alist '("el"   .  "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh"   .  "src sh"))
  (add-to-list 'org-structure-template-alist '("te"   .  "src text" ))
  (add-to-list 'org-structure-template-alist '("do"   .  "src dot" ))
  (add-to-list 'org-structure-template-alist '("do1"  .  "src dot :file /home/garid/orgfiles/... :exports results :tangle no :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("tm"   .  "src tmux" ))
  (add-to-list 'org-structure-template-alist '("tm1"  .  "src tmux :session tmuxSess1 :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("tm2"  .  "src tmux :session tmuxSess2 :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("py"   .  "src python"))
  (add-to-list 'org-structure-template-alist '("py1"  .  "src python :session pySess1 :results output :exports both :cache yes :eval never-export"))
  (add-to-list 'org-structure-template-alist '("py2"  .  "src python :session pySess2 :results output :exports both :cache yes :eval never-export"))
  (add-to-list 'org-structure-template-alist '("sq"   .  "sqlite"))
  (add-to-list 'org-structure-template-alist '("mk"   .  "src makefile :tangle no"))

  (require 'org-indent)
  )
#+end_src

** Org-babel languages related
#+begin_src emacs-lisp
(use-package ob-nim)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python     . t)    ;; (scad    . t)
   (emacs-lisp . t)    ;; (jupyter . t)
   (latex      . t)    ;; (rust    . t)
   (shell      . t)    ;; (lisp    . t)
   (dot        . t)    ;; (C       . t)
   (makefile   . t)    ;; (js      . t)
   (sqlite     . t)
   (gnuplot    . t)
   (nim        . t)
   (plantuml   . t)
   (maxima     . t)
   (calc       . t)
   ))
#+end_src

#+RESULTS:
: /usr/share/java/plantuml/plantuml.jar

** Org-bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :after  org
  :hook   (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list
           '("◉" "○" "●" "○"
             "●" "○" "●")))
#+end_src
** Org inline transparent image background                      :customFunc:
#+begin_src emacs-lisp
(defcustom org-inline-image-background nil
  "The color used as the default background for inline images.
When nil, use the default face background."
  :group 'org
  :type '(choice color (const nil)))

(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; Get this return result style from `create-image'.
    (append (list file type data-p)
            (list :background (or org-inline-image-background (face-background 'default)))
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)

(setq org-inline-image-background "white")
#+end_src

#+RESULTS:
: white

** Org toggle hide/shot hyperlink                               :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-link-n-emphasis ()
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (org-toggle-link-display)
    (font-lock-update))
#+end_src

** Org hooked function                                          :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-mode-hooked-func ()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (display-line-numbers-mode -1)
  )
#+end_src

* Org Zettelkasten like (roam & denote)
** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :ensure t
  :custom
  (org-roam-node-display-template (concat "${title:*} "
                                          (propertize "${tags:30}"
                                                      'face 'org-tag)))
  (org-roam-v2-ack t)
  (org-roam-directory "~/Pensieve/")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org"
                         ,(concat
                           "#+filetags: :nohtmlexport:\n"
                           "#+title: %<%Y-%m-%d>\n"
                           "#+auto_tangle: nil\n"
                           "#+startup: show2levels\n")))))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+auto_tangle: nil\n"))
      :unnarrowed t)

     ("r" "Research" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}__research.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :research:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+auto_tangle: nil\n"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+auto_tangle: nil\n"
                                  ))
      :unnarrowed t)


     ("p" "Programming language" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :plang:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+auto_tangle: nil\n"
                                  ))
      :unnarrowed t)


     ("m" "Meta (meaning access nodes)" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}__meta.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :meta:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+auto_tangle: nil\n"
                                  ))
      :unnarrowed t)


     ("P" "Project" plain
      "* Goals\n\n%?* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :Project:\n"
                                  "#+auto_tangle: nil"))
      :unnarrowed t)

     ))

  :config
  (require 'org-roam-dailies)
  (org-roam-setup)
  (org-roam-db-autosync-mode))
#+end_src

** Org-Roam (custom) function for inserting node                :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates
	 (list (append (car org-roam-capture-templates)
		       '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
** Org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src
** Denote
#+begin_src emacs-lisp
(use-package denote
  :custom
  (denote-directory       (expand-file-name "~/Documents/Personal"))
  (denote-known-keywords '(  "finance"  "failures"  "philosophy"  )))
#+end_src
** Bibliography
#+begin_src emacs-lisp
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography (list (concat (file-name-as-directory denote-directory)
                                              "20220101T010101--references__study.bib")))
  ;; (org-cite-global-bibliography '("~/Documents/Personal/20220101T010101--references__study.bib"))
  (org-cite-insert-processor    'citar                        )
  (org-cite-follow-processor    'citar                        )
  (org-cite-activate-processor  'citar                        )
  (citar-bibliography            org-cite-global-bibliography )
  (bibtex-dialect               'biblatex                     )
  ;; https://lucidmanager.org/productivity/emacs-bibtex-mode/
  (citar-library-paths           (list (concat (file-name-as-directory denote-directory) "lit/")) )
  ;; ("~/Documents/papers")
  )

(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir              "citar-notes")
  (citar-org-roam-note-title-template (concat "=${=key=}= - ${title}\n"
                                              "#+subtitle: Garid's notes on this article\n"
                                              "#+author: paper authors: ${author}\n"
                                              "#+filetags: :literature:\n\n"
                                              "*Ideas\n\n* Notes\n\n"))
  :config
  (citar-org-roam-mode)
  )

;;(citar-org-roam-note-title-template "=${=key=}= - ${title}\n#+subtitle: Garid's notes on this article\n#+author: paper authors: ${author}\n#+filetags: :literature:\n\n* Ideas\n\n* Notes\n\n")
#+end_src

* Org Time managements
** Org agenda files
#+begin_src emacs-lisp :results none
(setq org-agenda-files (directory-files-recursively denote-directory "\\.org$"))
#+end_src
** Org capturing related
#+begin_src emacs-lisp :results none
(require 'org-protocol)
(setq org-agenda-start-with-log-mode t
      org-default-notes-file (concat (file-name-as-directory denote-directory)
                                     "20230926T010607--todo__todo.org")
      org-capture-templates '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
                               "* TODO %?\n  %i\n  %a")

                              ("s" "Scheduled Todo" entry (file+headline org-default-notes-file "Scheduled")
                               "* TODO %?\n SCHEDULED: %t\n %i\n  %a")

                              ("r" "random" entry (file+headline org-default-notes-file "Random")
                               "* Later %?\n  %i\n  %a")

                              ("T" "Todo (xclip)" entry (file+headline org-default-notes-file "Tasks")
                               "* TODO [[%x]]\n  %i\n  %a")

                              ("p" "Protocol" entry (file+headline org-default-notes-file      "Inbox")
                               "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                              ("L" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
                               "* %? [[%:link][%:description]] \nCaptured On: %U")

                              ;;("j" "Journal" entry (file+datetree "~/org/journal.org")
                              ;; "* %?\nEntered on %U\n  %i\n  %a")

                              ("R" "Random (xclip)" entry (file+headline org-default-notes-file "Random")
                               "* Later [[%x]]\n  %i\n  %a")))
#+end_src
** Org timeblock
#+begin_src emacs-lisp
(use-package org-timeblock)
#+end_src

* Org Exports
** Org \LaTeX{} export heading format (e.g. Todo color)         :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/latex-formattig-headings
    (todo todo-type priority text tags _info)
  "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
  (concat
   (and todo
        ;; (format "{\\framebox{\\bfseries\\rfamily\\color{%s} %s}} "
        ;; (format "{\\bfseries\\rfamily\\color{%s} %s} "
        ;; (format "{\\rfamily\\color{%s} %s} "
        ;; (format "{\\color{%s} %s} "
        (format "{\\framebox{\\bfseries\\color{%s} %s}} "
                (pcase todo-type
                  ('todo "olive") ('done "teal")
                  ;;('todo "Black") ('done "Brown")
                  )
                todo))
   (and priority (format "\\framebox{\\#%c} " priority)) text
   (and tags
        (format "\\hfill{}\\textsc{%s}"
                (mapconcat #'org-latex--protect-text tags ":")))))
#+end_src

** XeLaTeX equation preview fix
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-preview-latex-default-process 'imagemagick)
  (setf (plist-get (cdr (assq 'imagemagick org-preview-latex-process-alist)) :latex-compiler)
        '("xelatex -interaction nonstopmode -output-directory %o %f")))
#+end_src
** Ox-hugo 
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure nil 
  :after ox)
#+end_src
** Org export directory
ref: [[https://emacs.stackexchange.com/a/7989/38482][this answer on emacs-stackexchange]]

#+begin_src emacs-lisp
(defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
#+end_src
** COMMENT website from org-roam directory
[[id:e7ee081e-a02b-4ab9-bccc-327a92bf2b09][create website from org-roam]]

#+begin_src emacs-lisp
(setq org-html-validation-link            nil ;; Don't show validation link
      org-html-head-include-scripts       nil ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
      )
#+end_src

#+RESULTS:
: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />

#+begin_src emacs-lisp :exports code :results verbatim
(setq
 org-publish-project-alist
 '(("Pensieve org -> html00"
    :base-directory "~/Pensieve"
    :publishing-function org-html-publish-to-html
    :publishing-directory "/tmp/garids_pensieve"
    :section-numbers nil
    :with-toc nil)
   ;;:html_head "<link rel=\"stylesheet\" href=\"/home/garid/org.css\">"
   ;; not sure why above line doesn't change css of thml output
   ;; that's why I copied from
   ;;https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/
   ;; above

   ("Pensieve export imgs"
    :base-directory "~/Pensieve/od-imgs/"
    :base-extension "jpg\\|gif\\|png\\|svg"
    :recursive t
    ;;:publishing-directory "/ssh:user@host:~/html/images/"
    :publishing-directory "/tmp/garids_pensieve/od-imgs"
    :publishing-function org-publish-attachment)
   ))
#+end_src

#+RESULTS:
: (("Pensieve org -> html00" :base-directory "~/Pensieve" :publishing-function org-html-publish-to-html :publishing-directory "/tmp/garids_pensieve" :section-numbers nil :with-toc nil) ("Pensieve export imgs" :base-directory "~/Pensieve/od-imgs/" :base-extension "jpg\\|gif\\|png\\|svg" :recursive t :publishing-directory "/tmp/garids_pensieve/od-imgs" :publishing-function org-publish-attachment))

** COMMENT latex
#+begin_src emacs-lisp
(use-package auctex)
#+end_src

* Org Misc:
** Org-download for handling images 
*** Org-download package itself
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :custom
  (org-download-display-inline-images  nil                                 )
  ;;(org-download-edit-cmd             "/home/garid/.garid/edit_img.sh %s" )
  (org-download-edit-cmd               (concat user-emacs-directory
                                               "garid/edit_img.sh %s"))

  :config
  ;; (defun my-org-download-set-dir ()     ;
  ;;   "Set `org-download-image-dir` to the directory of the current
  ;;       buffer's file."
  ;;   (setq-local
  ;;    org-download-image-dir (concat (file-name-directory (buffer-file-name))
  ;;                                   "/images/" (file-name-base buffer-file-name) "/")
  ;;    org-download-heading-lvl nil))  ;; suggestion by https://emacs.stackexchange.com/a/79298/38482

  (org-download-enable)
  ;;:hook ((org-mode . my-org-download-set-dir))
  )
#+end_src

*** Editing image software                                     :customFunc:
#+begin_src shell :tangle garid/edit_img.sh
#!/bin/sh

file=$(readlink -f "$1")
ext="${file##*.}"

# create empty file if the file doesn't exist
if [ ! -f "$file" ]; then
    convert -size 480x320 xc:white "$file";
    echo "created new $file"
fi

# open image-editor based on the file's extension
case "$ext" in
	jpeg) gimp      "$file" ;;
	jpg)  gimp      "$file" ;;
	png)  gimp      "$file" ;;
	svg)  inkscape  "$file" ;;
	xopp) xournalpp "$file" ;;
esac
#+end_src

** Org-auto-tangle for handling tangled source blocks
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook   (org-mode   .   org-auto-tangle-mode)
  :custom (org-auto-tangle-default    nil))
#+end_src

** Org-transclusion for documentation
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure nil
  :bind (:map org-mode-map
              ("<f12>"   . org-transclusion-add     )
              ("M-<f12>" . org-transclusion-add-all )
              ("<f11>"   . org-transclusion-mode    )))
#+end_src
** COMMENT org contacts
#+begin_src emacs-lisp
;; (global-display-fill-column-indicator-mode)
(use-package org-contacts
  :ensure t
  :custom (org-contacts-files
           '("~/roamnotes/20230417200051-org_contacs.org")))
#+end_src
** COMMENT org tmux babel
#+begin_src emacs-lisp
(use-package ob-tmux
  ;; Install package automatically (optional)
  :ensure t
  :custom
  (org-babel-default-header-args:tmux
   '((:results  .  "silent"  )
     (:session  .  "default" )
     (:socket   .  nil       )))
  ;; The tmux sessions are prefixed with the following string.
  ;; You can customize this if you like.
  (org-babel-tmux-session-prefix "ob-")
  ;; The terminal that will be used.
  ;; You can also customize the options passed to the terminal.
  ;; The default terminal is "gnome-terminal" with options "--".
  (org-babel-tmux-terminal "st")
  (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e"))
  ;; Finally, if your tmux is not in your $PATH for whatever reason, you
  ;; may set the path to the tmux binary as follows:
  (org-babel-tmux-location "/usr/bin/tmux"))
#+end_src
** COMMENT org-tree-slide
#+begin_src emacs-lisp
(use-package org-tree-slide)
#+end_src

* Development Environment / Programming
** Save place mode
#+begin_src emacs-lisp
(save-place-mode 1) ;; lets test it for few days
#+end_src
** Corfu
#+begin_src emacs-lisp
;; from https://github.com/Gavinok/emacs.d/blob/3ccc6e35feb2903442c9f7625fba081d93a2fa36/init.el#L614
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle            t          ) ;; Allows cycling through candidates
  (corfu-auto             t          ) ;; Enable auto completion
  (corfu-auto-prefix      2          )
  (corfu-auto-delay       0.0        )
  (corfu-popupinfo-delay '(0.5 . 0.2))
  (corfu-preview-current 'insert     ) ;; Do not preview current candidate
  (corfu-preselect-first  nil        )
  (corfu-on-exact-match   nil        ) ;; Don't auto expand tempel snippets

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator )
              ("TAB"        . nil                    ); corfu-next)
              ([tab]        . nil                    ); corfu-next)
              ;;("S-TAB"     . corfu-previous        )
              ("M-k"        . corfu-previous         )
              ("M-j"        . corfu-next             )
              ("S-<return>" . corfu-insert           )
              ("M-h"        . corfu-insert           )
              ("RET"        . nil                    )
              )

  :init
  (global-corfu-mode    )
  (corfu-history-mode   )
  (corfu-popupinfo-mode ) ; Popup completion info
  :config
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
				   corfu-quit-no-match t
				   corfu-auto nil)
              (corfu-mode))))
#+end_src
** Yassnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :custom
  (yas/triggers-in-field t) ;; Do I need this?
  ;; (setq yas-key-syntaxes (append yas-key-syntaxes '(yas-try-key-from-dot)))
  :config
  (yas-global-mode 1)

  (defcustom yas-new-snippet-default "\
  # -*- mode: snippet -*-
  # contributor: Garid Zorigoo <garidzorigoo@gmail.com>
  # name: $1
  # key: ${2:${1:$(yas--key-from-desc yas-text)}}
  # --
  $0`(yas-escape-text yas-selected-text)`"
    "Default snippet to use when creating a new snippet.
  If nil, don't use any snippet."
    :type 'string)
  )
#+end_src

#+RESULTS:
: t

** Parenthesis: (electric-pair-mode)
#+begin_src emacs-lisp
;; enable electric pair
(electric-pair-mode 1)

;; disables <> (cuz I use < for most of my snippets)
(setq electric-pair-inhibit-predicate
      (lambda (c)
        (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))
#+end_src
** Git related
#+begin_src emacs-lisp
(use-package magit)
(use-package git-gutter
  :config (global-git-gutter-mode))
#+end_src

** Treesitter
from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][mastering emacs article]].
#+begin_src emacs-lisp
(setq major-mode-remap-alist
      '((bash-mode . bash-ts-mode)
        (python-mode . python-ts-mode)))
#+end_src
** Eglot for the LSPs
#+begin_src emacs-lisp
(use-package eglot)
#+end_src
** rg
#+begin_src emacs-lisp
(use-package rg)
#+end_src
** COMMENT LSP-bridges
#+begin_src emacs-lisp
(use-package markdown-mode)
;;(use-package posframe)
(add-to-list 'load-path "/home/garid/otherGit/lsp-bridge/")
(require 'lsp-bridge)
(setq lsp-bridge-enable-profile t)
(setq lsp-bridge-python-lsp-server "pyright")
;; (setq lsp-bridge-python-lsp-server "pyright")
(global-lsp-bridge-mode)

(define-key acm-mode-map (kbd "M-j") 'acm-select-next)
(define-key acm-mode-map (kbd "M-k") 'acm-select-prev)
(define-key acm-mode-map (kbd "M-d") 'acm-doc-toggle)
(define-key acm-mode-map (kbd "M-f") 'acm-filter)
(define-key acm-mode-map (kbd "M-H") 'acm-hide)
(define-key acm-mode-map (kbd "M-g M-g") 'acm-select-first)
(define-key acm-mode-map (kbd "M-G")     'acm-select-last)
(define-key acm-mode-map (kbd "<tab>") nil)
(define-key acm-mode-map (kbd "TAB")   nil)
(setq acm-backend-lsp-candidate-min-length               2               
      acm-backend-yas-candidate-min-length               2               
      acm-backend-elisp-candidate-min-length             2             
      acm-backend-codeium-candidate-min-length           2           
      acm-backend-search-file-words-candidate-min-length 2)
#+end_src

#+RESULTS:
: 2

** COMMENT scad
#+begin_src emacs-lisp
(use-package scad-mode)
#+end_src
** COMMENT c
#+begin_src emacs-lisp
(setq-default c-basic-offset 4)
#+end_src
** COMMENT eldoc
from [[https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc][mastering emacs article]].
#+begin_src emacs-lisp
(defun mp-flycheck-eldoc (callback &rest _ignored)
  "Print flycheck messages at point by calling CALLBACK."
  (when-let ((flycheck-errors (and flycheck-mode (flycheck-overlay-errors-at (point)))))
    (mapc
     (lambda (err)
       (funcall callback
                (format "%s: %s"
                        (let ((level (flycheck-error-level err)))
                          (pcase level
                            ('info (propertize "I" 'face 'flycheck-error-list-info))
                            ('error (propertize "E" 'face 'flycheck-error-list-error))
                            ('warning (propertize "W" 'face 'flycheck-error-list-warning))
                            (_ level)))
                        (flycheck-error-message err))
                :thing (or (flycheck-error-id err)
                           (flycheck-error-group err))
                :face 'font-lock-doc-face))
     flycheck-errors)))


(use-package eglot
  :preface (defun mp-eglot-eldoc ()
             (setq eldoc-documentation-strategy
                   'eldoc-documentation-compose-eagerly))
  :hook ((eglot-managed-mode . mp-eglot-eldoc)))
#+end_src
** COMMENT toggling
#+begin_src emacs-lisp
;; (hs-toggle-hiding)
(evil-define-key 'normal python-mode-map (kbd "<tab>") #'hs-toggle-hiding)

#+end_src
** COMMENT vertical line fill-column
#+begin_src emacs-lisp
(setq fill-column 79)
#+end_src
** COMMENT python stuff
#+begin_src emacs-lisp
;; (add-hook 'python-mode-hook '(corfu-mode -1) t)
;; (add-hook 'python-mode-hook '(hs-minor-mode 1) t)
;; (add-hook 'python-mode-hook '(lsp-bridge-mode) t)


(use-package python
  :hook
  (python-mode . (lambda ()
                   ;; (setq indent-tabs-mode nil)
                   ;; (setq tab-width 4)
                   ;; (setq python-indent-offset 4)
                   (corfu-mode -1)
                   (hs-minor-mode 1)
                   (lsp-bridge-mode 1)
                   (display-fill-column-indicator-mode 1)
                   (setq fill-column 79)
                   ;; (skj 1)
                   )))
;; (corfu-mode -1)


(use-package python-cell
  :hook
  (python-mode . (lambda ()
                   (setq python-cell-cellbreak-regexp "^[[:space:]]*#[[:space:]]==")
                   ))
  )

;;
;; (define-key python-cell-mode-map (kbd "M-J") nil)
;; (define-key python-cell-mode-map (kbd "M-K") nil)
#+end_src
** COMMENT zig stuff
#+begin_src emacs-lisp
(use-package zig-mode
  :hook
  (zig-mode . (lambda ()
                   (corfu-mode -1)
                   ;; (hs-minor-mode 1)
                   (lsp-bridge-mode 1)
                   (display-fill-column-indicator-mode 1)
                   (setq fill-column 79)
                   ;; (skj 1)
                   )))
  )
#+end_src
* Garid
** Open PDF exported by LaTeX externally                        :customFunc:
#+begin_src emacs-lisp
(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

;; (defun gry/org-open-pdf ()        ;; old version that served me for very long time
;;   (interactive)
;;   (call-process-shell-command
;;    (concat "zathura "
;; 	   (replace-in-string ".org" ".pdf &" buffer-file-name))))

(defun gry/org-open-pdf ()
  (interactive)
  (call-process-shell-command
   (concat "xdg-open "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file (buffer)
           "/export_tex/"                               ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".pdf &"                                     ;; adds extension
           )))
#+end_src

** My Custom LaTeX writting system (aka TeQ)                    :customFunc:
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.config/emacs/Emacs-TeQ"))

(register-input-method
 "TeQ-Math" "Emacs-Teq-Latex" 'quail-use-package
 "TeQ-"     "TeQ-Math input"
 "Emacs-TeQ.el")

(fset 'gry-calc-horizontal-concat
      (kmacro-lambda-form [?v ?t tab ?v ?t ?| ?v ?t] 0 "%d"))

;;(load "~/.config/emacs/garid/garids-abbrev-typos.el")	;; garid typos
;; (setq path-to-ctags "/usr/bin/ctags")
#+end_src

#+RESULTS:
: #[256 "\211\301=\203
:  \301\300B\207\302\300\"\207" [([118 116 tab 118 116 124 118 116] 0 "%d") kmacro--extract-lambda kmacro-exec-ring-item] 4 "Keyboard macro.
: 
: (fn &optional ARG)" "pkmacro"]

** Custom Aligner function (with untabify)                      :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/align-regexp-and-untabify (beg end)
  (interactive "r")
  (align-regexp beg end
                (concat "\\(\\s-*\\)" (read-string "Align regexp: ")))
  (untabify beg end))
#+end_src
** noTabs:
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
;; Align with spaces only
(defadvice align-regexp (around align-regexp-with-spaces)
  "Never use tabs for alignment."
  (let ((indent-tabs-mode nil)) ad-do-it))
(ad-activate 'align-regexp)
#+end_src

#+RESULTS:
: align-regexp
** Toggling between 3 inputs (eng, mon, teq)                    :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/toggle-eng-mon-teq-input-methods ()
  (interactive)
  (if (string= default-input-method nil )
      (set-input-method "cyrillic-mongolian")
    (if (string= default-input-method "TeQ-Math")
	(set-input-method "cyrillic-mongolian")
      (if (string= default-input-method "cyrillic-mongolian")
	  (set-input-method "TeQ-Math")))))
#+end_src
** COMMENT Distraction
#+begin_src emacs-lisp
(defun gry/distraction-free-on ()
  (interactive)
  (writeroom-mode 1)
  (turn-off-evil-mode)
  (display-line-numbers-mode -1)
  (set-face-attribute 'default nil :font "Iosevka Etoile" :height 140))
;; (set-face-attribute 'default nil :font "Terminus" :height 140)

(defun gry/distraction-free-off ()
  (interactive)
  (writeroom-mode -1)
  (turn-on-evil-mode)
  (display-line-numbers-mode 1)
  (set-face-attribute 'default nil :font "Iosevka Gry" :height 120))
#+end_src
* Keybinding
** which key
#+begin_src emacs-lisp
(use-package which-key
  :custom
  ;;(which-key-popup-type 'frame)
  (which-key-popup-type 'side-window)
  (which-key-side-window-location 'left)

  (which-key-idle-delay 2)
  (which-key-idle-secondary-delay 0.01)

  ;; (which-key-show-major-mode )
  ;; (which-key-side-window-max-height 0.5)
  :config (which-key-mode)
  )
#+end_src

** Global keybinding configuation:
*** Global keybinding table
#+name: tbl-global-keybindings
| key     | function                                      | description                          |
|---------+-----------------------------------------------+--------------------------------------|
| M-q     | delete-window                                 | delete window                        |
| M-Q     | kill-current-buffer                           | delete buffer                        |
| M-J     | other-window                                  | jump to other window                 |
| M-W     | evil-window-vnew                              | divide window veritically (on right) |
| M-E     | evil-window-vsplit                            | divide window veritically (on left)  |
| M-]     | comint-dynamic-complete-filename              | complete file path                   |
| M-s     | avy-goto-char                                 | jump to character                    |
| M-S     | avy-goto-char-2                               | jump to character (with 2 char)      |
| C-/     | comment-line                                  | set selected lines comment           |
| C-\vert | garid-custom/toggle-eng-mon-teq-input-methods | change toggle input (Eng-Mon-Teq)    |

Note to myself: after changing Table-[[tbl-global-keybindings]], I need to update [[convert-global-keybindings]]

*** Parse/convert global keybinding table into elisp
#+caption: adsf
#+name: convert-global-keybindings
#+begin_src elisp :var tab=tbl-global-keybindings :wrap src emacs-lisp :tangle no
(concat
 (mapconcat
  (lambda (row)
    (format
     "(global-set-key (kbd \"%s\") '%s)"
     ;; needed to use regexp cuz | (as \vert) used in the table
     (replace-regexp-in-string (regexp-quote "\\vert") "|" (nth 0 row) nil 'literal)
     (nth 1 row)
     ))
  tab "\n"))
#+end_src

#+RESULTS: convert-global-keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-q") 'delete-window)
(global-set-key (kbd "M-Q") 'kill-current-buffer)
(global-set-key (kbd "M-J") 'other-window)
(global-set-key (kbd "M-W") 'evil-window-vnew)
(global-set-key (kbd "M-E") 'evil-window-vsplit)
(global-set-key (kbd "M-]") 'comint-dynamic-complete-filename)
(global-set-key (kbd "M-s") 'avy-goto-char)
(global-set-key (kbd "M-S") 'avy-goto-char-2)
(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-|") 'garid-custom/toggle-eng-mon-teq-input-methods)
#+end_src
** new general config
*** general
#+begin_src emacs-lisp
(use-package general
  :config (general-evil-setup t)

  ;; Keybindings for everywhere
  (general-create-definer garids-keybind/for-all-modes
    :keymaps  '(normal visual emacs)
    :prefix         "SPC"
    :global-prefix  "C-SPC")

  ;; Keybindings inside Org-mode-map
  (general-create-definer garids-keybind/in-org-mode
    :states '(normal visual)
    :keymaps '(org-mode-map)
    :prefix        "SPC"
    :global-prefix "C-SPC")
  )
#+end_src
*** keybinds for all modes
#+name: tbl-global-general-keybindings
| key(s) | lambda | function                                                | short description          |
|--------+--------+---------------------------------------------------------+----------------------------|
| SPC    |        | execute-extended-command                                | M-x                        |
| d      |        | dired-jump                                              | directory                  |
| f      |        | find-file                                               | find-file                  |
| n      |        | dired-sidebar-jump-to-sidebar                           | side-tree show             |
| N      |        | dired-sidebar-hide-sidebar                              | side-tree hide             |
| ZQ     |        | kill-emacs                                              | kill emacs                 |
| mg     |        | magit-status                                            | (m)a(g)it                  |
| e      |        | eshell                                                  | (e)shell                   |
| vt     |        | vterm                                                   | (v)ir-(t)erm               |
| <      |        | recompile                                               | recompile                  |
| l      |        | consult-buffer                                          | (l)ist-buffer              |
| L      |        | :ignore t                                               | buffer+...                 |
| Lr     |        | revert-buffer-quick                                     | l-(r)eread                 |
| Le     |        | eval-buffer                                             | l-(e)val                   |
| Li     |        | ibuffer                                                 | l-(i)buffer                |
| Ln     |        | rename-buffer                                           | l-(r)ename                 |
| L<     |        | switch-to-prev-buffer                                   | l-(<)prev                  |
| L>     |        | switch-to-next-buffer                                   | l-(>)next                  |
| Ld     |        | crux-delete-file-and-buffer                             | l-(d)elete                 |
| Lc     |        | clone-indirect-buffer                                   | l-(c)lone                  |
| Ls     |        | crux-create-scratch-buffer                              | l-(s)cratch-buffer         |
| C      |        | :ignore t                                               | C calc related             |
| Ca     |        | calc                                                    | C-(a) calc                 |
| Ce     |        | calc-embedded                                           | C-(e) embedded             |
| Cf     |        | full-calc                                               | C-(f) full                 |
| c      |        | :ignore t                                               | consult+...                |
| co     |        | consult-org-heading                                     | c-(o)rg                    |
| ci     |        | consult-imenu                                           | c-(i)menu                  |
| cm     |        | consult-man                                             | c-(m)an                    |
| cr     |        | consult-ripgrep                                         | c-(r)ipgrep                |
| cf     |        | consult-flymake                                         | c-(f)lymake                |
| cp     |        | consult-project-buffer                                  | c-(p)roject                |
| cd     |        | consult-dir                                             | c-(d)ir                    |
| b      |        | :ignore t                                               | bookmark+...               |
| bm     |        | consult-bookmark                                        | b-(m)ark-consult           |
| bs     |        | bookmark-set                                            | b-(s)et                    |
| bd     |        | bookmark-delete                                         | b-(d)elete                 |
| br     |        | bookmark-rename                                         | b-(r)ename                 |
| p      |        | :ignore t                                               | project+...                |
| pf     |        | project-find-file                                       | p-(f)ind-file              |
| pd     |        | consult-flymake                                         | p-(d)iagnostic             |
| pr     |        | xref-find-references                                    | p-(r)eferences             |
| pz     |        | project-switch-project                                  | p-(z)ump-to-other-proj     |
| ps     |        | project-find-regexp                                     | p-(s)earch-in-proj         |
| pk     |        | project-kill-buffers                                    | p-(k)ill-buf-proj          |
| pl     |        | consult-project-buffer                                  | p-(l)ist-buf-proj          |
| v      |        | :ignore t                                               | project+...                |
| vq     |        | format-all-buffer                                       | v-(q)-format-buffer        |
| vr     |        | project-query-replace-regexp                            | v-(r)eplace                |
| D      |        | :ignore t                                               | Denote+...                 |
| Dr     |        | denote-rename-file                                      | D-rename                   |
| Df     |        | denote-open-or-create                                   | D-find                     |
| DD     | y      | (dired denote-directory)                                | D-Dired                    |
| h      |        | :ignore t                                               | Help+...                   |
| hh     |        | describe-symbol                                         | Help-Symbol (elisp)        |
| hH     |        | describe-key                                            | Help-Keybinding            |
| s      |        | :ignore t                                               | system+...                 |
| so     |        | :ignore t                                               | system+open+...            |
| soe    | y      | (find-file "~/.config/emacs/init.org")                  | so-(e)macs confg org       |
| soE    | y      | (find-file "~/.config/emacs/init.el")                   | so-(E)macs confg el        |
| sob    | y      | (find-file (nth 0 org-cite-global-bibliography))        | so-(b)ibliography          |
| soc    | y      | (find-file org-default-notes-file)                      | so-(o)rg capture           |
| srf    | y      | (recentf-open-files)                                    | s-(r)ecent-(f)iles         |
| sl     |        | :ignore t                                               | s-(l)ine related           |
| sl5    | y      | (setq display-line-numbers-width 5)                     | sl-5 digit line number     |
| sl4    | y      | (setq display-line-numbers-width 4)                     | sl-4 digit line number     |
| sl3    | y      | (setq display-line-numbers-width 3)                     | sl-3 digit line number     |
| slm    |        | scroll-lock-mode                                        | sl-(m)ode scroll-lock-mode |
| slv    |        | global-display-fill-column-indicator-mode               | vertical-line              |
| st     |        | gry/open-term-at                                        | (t)erminal                 |
| sT     |        | toggle-transparency                                     | (T)oggle-transparency      |
| sns    |        | crux-create-scratch-buffer                              | (n)ew-(s)cratch-buf        |
| scl    | y      | (global-command-log-mode) (clm/open-command-log-buffer) | (c)md-(l)og                |
| sw     |        | whitespace-mode                                         | (w)hitespace               |
| sco    |        | corfu-mode                                              | (c)orfu-(m)ode             |
| se     |        | eglot                                                   | (e)glot                    |
| rg     |        | rg                                                      | (r)ip-(g)rep               |
| y      |        | :ignore t                                               | (y)assnippet+...           |
| yn     |        | yas-new-snippet                                         | y-(n)ew                    |
| yv     |        | yas-visit-snippet-file                                  | y-(v)isit                  |
| yd     |        | yas-describe-tables                                     | y-(d)esc-table             |
| yc     |        | consult-yasnippet                                       | y-(c)onsult                |
| z      |        | :ignore t                                               | conveniences+...           |
| za     |        | garid-custom/align-regexp-and-untabify                  | align                      |
| zr     |        | replace-regexp                                          | replace in buf             |
| zh     |        | highlight-symbol-at-point                               | highlight word             |
| zH     |        | unhighlight-regexp                                      | highlight word off         |
| zs     |        | :ignore t                                               | (s)pellcheker+...          |
| zsw    |        | ispell-word                                             | zs-(w)ord                  |
| zsr    |        | ispell-region                                           | zs-(r)egion                |
| zsC    |        | ispell-comments-and-strings                             | zs-(C)omment-full          |
| zsc    |        | ispell-comment-or-string-at-point                       | zs-(c)omment-here          |
| zsb    |        | ispell-buffer                                           | zs-(b)uffer                |
| zsm    |        | ispell-message                                          | zs-(m)essage               |
| zsq    |        | ispell-kill-ispell                                      | zs-(q)uit                  |
| o      |        | :ignore t                                               | (o)rg                      |
| oa     |        | org-agenda                                              | o-(a)genda                 |
| otb    |        | org-timeblock                                           | o-(t)ime-(b)lock           |
| oc     |        | org-capture                                             | o-(c)apture                |
| oT     |        | :ignore t                                               | (T)able+...                |
| oTm    |        | orgtbl-mode                                             | oT-(m)ode                  |
| oTc    |        | orgtbl-create-or-convert-from-region                    | oT-(c)reate                |
| oTT    |        | org-table-toggle-column-width                           | oT-(T)oggle-hide-column    |
| oTC    |        | org-table-toggle-coordinate-overlays                    | oT-(C)oordinate            |
| r      |        | :ignore t                                               | (r)oam+...                 |
| ruim   |        | org-roam-ui-mode                                        | rui-(m)ode ui-in-browser   |
| rf     |        | org-roam-node-find                                      | r-(f)ind                   |
| rl     |        | org-roam-buffer-toggle                                  | r-(l)toggle                |
| rL     |        | org-roam-buffer-display-dedicated                       | r-(L)dedicated             |
| ri     |        | org-roam-node-insert                                    | r-(i)nsert                 |
| rI     |        | garid-custom/org-roam-node-insert-immediate             | r-(I)nsert-immediate       |
| rd     |        | :ignore t                                               | roam (d)aily+...           |
| rdc    |        | org-roam-dailies-capture-today                          | rd-(c)apture               |
| rdr    |        | org-roam-dailies-goto-today                             | rd-(t)oday                 |
| rdt    |        | org-roam-dailies-goto-tomorrow                          | rd-(T)omorrow              |
| rdy    |        | org-roam-dailies-goto-yesterday                         | rd-(y)esterday             |
| rdd    |        | org-roam-dailies-goto-date                              | rd-(d)ate  goto date       |
| rd>    |        | org-roam-dailies-goto-next-note                         | rd-(>)next                 |
| rd<    |        | org-roam-dailies-goto-previous-note                     | rd-(<)prev                 |

*** keybinds for in-orgmode
#+name: tbl-orgmode-general-keybindings
| key(s) | lambda | function                                        | short description           |
|--------+--------+-------------------------------------------------+-----------------------------|
| om     |        | org-refile                                      | o-(m)ove-subtree            |
| onm    |        | org-num-mode                                    | o-(n)um-(m)ode              |
| oo     |        | org-open-at-point                               | o-(o)pen                    |
| op     |        | org-latex-preview                               | o-(p)review                 |
| oy     |        | org-copy-subtree                                | o-(y)ank-subtree            |
| ,      |        | org-ctrl-c-ctrl-c                               | C-c C-c                     |
| ot     |        | :ignore t                                       | (t)odo+...                  |
| otT    |        | org-todo                                        | ot-(T)odo                   |
| ott    | y      | (org-todo "TODO"      )                         | ot-(t)odo                   |
| ots    | y      | (org-todo "STARTED"   )                         | ot-(s)chedule               |
| otw    | y      | (org-todo "WAITING"   )                         | ot-(w)ait                   |
| otd    | y      | (org-todo "DONE"      )                         | ot-(d)one                   |
| otc    | y      | (org-todo "CANCELLED" )                         | ot-(c)ancel                 |
| otp    | y      | (org-todo "PROCESSED" )                         | ot-(p)rocessed              |
| otn    | y      | (org-todo ""          )                         | ot-(n)one                   |
| ota    | y      | (org-archive-subtree-default-with-confirmation) | ot-(a)rchive TOOD           |
| os     |        | org-schedule                                    | o-(s)chedule                |
| od     | y      | (org-deadline ""           )                    | o-(d)eadline                |
| of     |        | :ignore t                                       | (f)ind+...                  |
| ofh    | y      | (consult-org-heading)                           | of-(h)eading                |
| ofn    | y      | (consult-line "#+name"       )                  | of-(n)amed table/eq/src     |
| ofs    | y      | (consult-line "#+begin_"  )                     | of-(s)ource src-block       |
| ox     |        | :ignore t                                       | e(x)port+...                |
| oxb    |        | org-beamer-export-to-pdf                        | ox-(b)eamer                 |
| oxB    | y      | (org-beamer-export-to-pdf nil t)                | ox-(B)eamer subtree         |
| oxp    |        | org-latex-export-to-pdf                         | ox-(p)df latex              |
| oxP    | y      | (org-latex-export-to-pdf nil t)                 | ox-(P)df latex subtree      |
| oxo    |        | gry/org-open-pdf                                | ox-(o)pen exported pdf      |
| ol     |        | :ignore t                                       | (l)ink+...                  |
| old    |        | garid-custom/org-toggle-link-n-emphasis         | ol-(d)escription show/hide  |
| oli    | y      | (org-insert-link)                               | ol-(i)nsert                 |
| ol>    |        | org-next-link                                   | ol-(>)next link             |
| ol<    |        | org-previous-link                               | ol-(<)prev link             |
| olo    |        | org-open-at-point                               | ol-(o)pen (same as SPC o o) |
| op     |        | org-latex-preview                               | o-(p)review                 |
| oi     |        | :ignore t                                       | (i)mg+...                   |
| oip    |        | org-download-clipboard                          | oi-(p)aste-clipboard        |
| oiP    |        | org-download-image                              | oi-(P)aste from path        |
| oid    |        | org-download-delete                             | oi-(d)elete file            |
| oie    |        | org-download-edit                               | oi-(e)dit externally        |
| oir    |        | org-download-rename-at-point                    | oi-(r)ename file            |
| oit    |        | org-toggle-inline-images                        | oi-(t)oggle shot/hide image |
| ois    |        | :ignore t                                       | (s)ize in when toggled      |
| oisn   | y      | (setq org-image-actual-width '(800))            | ois-(n)ormal                |
| oisb   | y      | (setq org-image-actual-width '(1500))           | ois-(b)ig                   |
| oiss   | y      | (setq org-image-actual-width '(400))            | ois-(s)mall                 |
| oI     |        | :ignore t                                       | o-(I)nsert+....             |
| oIb    |        | org-cite-insert                                 | oI-(c)ite                   |
| oIf    |        | org-footnote-new                                | oI-(f)ootnote               |
| oIF    |        | org-footnote-action                             | oI-(F)ootnote-action        |
| j      |        | org-next-block                                  | (j) jump to next src-block  |
| k      |        | org-previous-block                              | (k) jump to prev src-block  |

*** convert tables actual keybinding
#+header: :var tbl_all_kbind=tbl-global-general-keybindings 
#+header: :var tbl_org_kbind=tbl-orgmode-general-keybindings
#+begin_src elisp :wrap src emacs-lisp :tangle no
(concat
 "(garids-keybind/for-all-modes\n"
 (mapconcat (lambda (row) (format "  \"%s\" '(%s :which-key \"%s\")"
                                  (nth 0 row)
                                  (if (string= (nth 1 row) "y")
                                      (format "(lambda () (interactive) %s )" (nth 2 row)) ;; for anon functions
                                    (nth 2 row))                                           ;; for normal functions
                                  (nth 3 row)))
            tbl_all_kbind "\n"
            )
 "\n)\n\n"
 "(garids-keybind/in-org-mode\n"
 (mapconcat (lambda (row) (format "  \"%s\" '(%s :which-key \"%s\")"
                                  (nth 0 row)
                                  (if (string= (nth 1 row) "y")
                                      (format "(lambda () (interactive) %s )" (nth 2 row)) ;; for anon functions
                                    (nth 2 row))                                           ;; for normal functions
                                  (nth 3 row)))
            tbl_org_kbind "\n"
            )
 "\n)\n"
 )
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(garids-keybind/for-all-modes
  "SPC" '(execute-extended-command :which-key "M-x")
  "d" '(dired-jump :which-key "directory")
  "f" '(find-file :which-key "find-file")
  "n" '(dired-sidebar-jump-to-sidebar :which-key "side-tree show")
  "N" '(dired-sidebar-hide-sidebar :which-key "side-tree hide")
  "ZQ" '(kill-emacs :which-key "kill emacs")
  "mg" '(magit-status :which-key "(m)a(g)it")
  "e" '(eshell :which-key "(e)shell")
  "vt" '(vterm :which-key "(v)ir-(t)erm")
  "<" '(recompile :which-key "recompile")
  "l" '(consult-buffer :which-key "(l)ist-buffer")
  "L" '(:ignore t :which-key "buffer+...")
  "Lr" '(revert-buffer-quick :which-key "l-(r)eread")
  "Le" '(eval-buffer :which-key "l-(e)val")
  "Li" '(ibuffer :which-key "l-(i)buffer")
  "Ln" '(rename-buffer :which-key "l-(r)ename")
  "L<" '(switch-to-prev-buffer :which-key "l-(<)prev")
  "L>" '(switch-to-next-buffer :which-key "l-(>)next")
  "Ld" '(crux-delete-file-and-buffer :which-key "l-(d)elete")
  "Lc" '(clone-indirect-buffer :which-key "l-(c)lone")
  "Ls" '(crux-create-scratch-buffer :which-key "l-(s)cratch-buffer")
  "C" '(:ignore t :which-key "C calc related")
  "Ca" '(calc :which-key "C-(a) calc")
  "Ce" '(calc-embedded :which-key "C-(e) embedded")
  "Cf" '(full-calc :which-key "C-(f) full")
  "c" '(:ignore t :which-key "consult+...")
  "co" '(consult-org-heading :which-key "c-(o)rg")
  "ci" '(consult-imenu :which-key "c-(i)menu")
  "cm" '(consult-man :which-key "c-(m)an")
  "cr" '(consult-ripgrep :which-key "c-(r)ipgrep")
  "cf" '(consult-flymake :which-key "c-(f)lymake")
  "cp" '(consult-project-buffer :which-key "c-(p)roject")
  "cd" '(consult-dir :which-key "c-(d)ir")
  "b" '(:ignore t :which-key "bookmark+...")
  "bm" '(consult-bookmark :which-key "b-(m)ark-consult")
  "bs" '(bookmark-set :which-key "b-(s)et")
  "bd" '(bookmark-delete :which-key "b-(d)elete")
  "br" '(bookmark-rename :which-key "b-(r)ename")
  "p" '(:ignore t :which-key "project+...")
  "pf" '(project-find-file :which-key "p-(f)ind-file")
  "pd" '(consult-flymake :which-key "p-(d)iagnostic")
  "pr" '(xref-find-references :which-key "p-(r)eferences")
  "pz" '(project-switch-project :which-key "p-(z)ump-to-other-proj")
  "ps" '(project-find-regexp :which-key "p-(s)earch-in-proj")
  "pk" '(project-kill-buffers :which-key "p-(k)ill-buf-proj")
  "pl" '(consult-project-buffer :which-key "p-(l)ist-buf-proj")
  "v" '(:ignore t :which-key "project+...")
  "vq" '(format-all-buffer :which-key "v-(q)-format-buffer")
  "vr" '(project-query-replace-regexp :which-key "v-(r)eplace")
  "D" '(:ignore t :which-key "Denote+...")
  "Dr" '(denote-rename-file :which-key "D-rename")
  "Df" '(denote-open-or-create :which-key "D-find")
  "DD" '((lambda () (interactive) (dired denote-directory) ) :which-key "D-Dired")
  "h" '(:ignore t :which-key "Help+...")
  "hh" '(describe-symbol :which-key "Help-Symbol (elisp)")
  "hH" '(describe-key :which-key "Help-Keybinding")
  "s" '(:ignore t :which-key "system+...")
  "so" '(:ignore t :which-key "system+open+...")
  "soe" '((lambda () (interactive) (find-file "~/.config/emacs/init.org") ) :which-key "so-(e)macs confg org")
  "soE" '((lambda () (interactive) (find-file "~/.config/emacs/init.el") ) :which-key "so-(E)macs confg el")
  "sob" '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)) ) :which-key "so-(b)ibliography")
  "soc" '((lambda () (interactive) (find-file org-default-notes-file) ) :which-key "so-(o)rg capture")
  "srf" '((lambda () (interactive) (recentf-open-files) ) :which-key "s-(r)ecent-(f)iles")
  "sl" '(:ignore t :which-key "s-(l)ine related")
  "sl5" '((lambda () (interactive) (setq display-line-numbers-width 5) ) :which-key "sl-5 digit line number")
  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4) ) :which-key "sl-4 digit line number")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3) ) :which-key "sl-3 digit line number")
  "slm" '(scroll-lock-mode :which-key "sl-(m)ode scroll-lock-mode")
  "slv" '(global-display-fill-column-indicator-mode :which-key "vertical-line")
  "st" '(gry/open-term-at :which-key "(t)erminal")
  "sT" '(toggle-transparency :which-key "(T)oggle-transparency")
  "sns" '(crux-create-scratch-buffer :which-key "(n)ew-(s)cratch-buf")
  "scl" '((lambda () (interactive) (global-command-log-mode) (clm/open-command-log-buffer) ) :which-key "(c)md-(l)og")
  "sw" '(whitespace-mode :which-key "(w)hitespace")
  "sco" '(corfu-mode :which-key "(c)orfu-(m)ode")
  "se" '(eglot :which-key "(e)glot")
  "rg" '(rg :which-key "(r)ip-(g)rep")
  "y" '(:ignore t :which-key "(y)assnippet+...")
  "yn" '(yas-new-snippet :which-key "y-(n)ew")
  "yv" '(yas-visit-snippet-file :which-key "y-(v)isit")
  "yd" '(yas-describe-tables :which-key "y-(d)esc-table")
  "yc" '(consult-yasnippet :which-key "y-(c)onsult")
  "z" '(:ignore t :which-key "conveniences+...")
  "za" '(garid-custom/align-regexp-and-untabify :which-key "align")
  "zr" '(replace-regexp :which-key "replace in buf")
  "zh" '(highlight-symbol-at-point :which-key "highlight word")
  "zH" '(unhighlight-regexp :which-key "highlight word off")
  "zs" '(:ignore t :which-key "(s)pellcheker+...")
  "zsw" '(ispell-word :which-key "zs-(w)ord")
  "zsr" '(ispell-region :which-key "zs-(r)egion")
  "zsC" '(ispell-comments-and-strings :which-key "zs-(C)omment-full")
  "zsc" '(ispell-comment-or-string-at-point :which-key "zs-(c)omment-here")
  "zsb" '(ispell-buffer :which-key "zs-(b)uffer")
  "zsm" '(ispell-message :which-key "zs-(m)essage")
  "zsq" '(ispell-kill-ispell :which-key "zs-(q)uit")
  "o" '(:ignore t :which-key "(o)rg")
  "oa" '(org-agenda :which-key "o-(a)genda")
  "otb" '(org-timeblock :which-key "o-(t)ime-(b)lock")
  "oc" '(org-capture :which-key "o-(c)apture")
  "oT" '(:ignore t :which-key "(T)able+...")
  "oTm" '(orgtbl-mode :which-key "oT-(m)ode")
  "oTc" '(orgtbl-create-or-convert-from-region :which-key "oT-(c)reate")
  "oTT" '(org-table-toggle-column-width :which-key "oT-(T)oggle-hide-column")
  "oTC" '(org-table-toggle-coordinate-overlays :which-key "oT-(C)oordinate")
  "r" '(:ignore t :which-key "(r)oam+...")
  "ruim" '(org-roam-ui-mode :which-key "rui-(m)ode ui-in-browser")
  "rf" '(org-roam-node-find :which-key "r-(f)ind")
  "rl" '(org-roam-buffer-toggle :which-key "r-(l)toggle")
  "rL" '(org-roam-buffer-display-dedicated :which-key "r-(L)dedicated")
  "ri" '(org-roam-node-insert :which-key "r-(i)nsert")
  "rI" '(garid-custom/org-roam-node-insert-immediate :which-key "r-(I)nsert-immediate")
  "rd" '(:ignore t :which-key "roam (d)aily+...")
  "rdc" '(org-roam-dailies-capture-today :which-key "rd-(c)apture")
  "rdr" '(org-roam-dailies-goto-today :which-key "rd-(t)oday")
  "rdt" '(org-roam-dailies-goto-tomorrow :which-key "rd-(T)omorrow")
  "rdy" '(org-roam-dailies-goto-yesterday :which-key "rd-(y)esterday")
  "rdd" '(org-roam-dailies-goto-date :which-key "rd-(d)ate  goto date")
  "rd>" '(org-roam-dailies-goto-next-note :which-key "rd-(>)next")
  "rd<" '(org-roam-dailies-goto-previous-note :which-key "rd-(<)prev")
)

(garids-keybind/in-org-mode
  "om" '(org-refile :which-key "o-(m)ove-subtree")
  "onm" '(org-num-mode :which-key "o-(n)um-(m)ode")
  "oo" '(org-open-at-point :which-key "o-(o)pen")
  "op" '(org-latex-preview :which-key "o-(p)review")
  "oy" '(org-copy-subtree :which-key "o-(y)ank-subtree")
  "," '(org-ctrl-c-ctrl-c :which-key "C-c C-c")
  "ot" '(:ignore t :which-key "(t)odo+...")
  "otT" '(org-todo :which-key "ot-(T)odo")
  "ott" '((lambda () (interactive) (org-todo "TODO"      ) ) :which-key "ot-(t)odo")
  "ots" '((lambda () (interactive) (org-todo "STARTED"   ) ) :which-key "ot-(s)chedule")
  "otw" '((lambda () (interactive) (org-todo "WAITING"   ) ) :which-key "ot-(w)ait")
  "otd" '((lambda () (interactive) (org-todo "DONE"      ) ) :which-key "ot-(d)one")
  "otc" '((lambda () (interactive) (org-todo "CANCELLED" ) ) :which-key "ot-(c)ancel")
  "otp" '((lambda () (interactive) (org-todo "PROCESSED" ) ) :which-key "ot-(p)rocessed")
  "otn" '((lambda () (interactive) (org-todo ""          ) ) :which-key "ot-(n)one")
  "ota" '((lambda () (interactive) (org-archive-subtree-default-with-confirmation) ) :which-key "ot-(a)rchive TOOD")
  "os" '(org-schedule :which-key "o-(s)chedule")
  "od" '((lambda () (interactive) (org-deadline ""           ) ) :which-key "o-(d)eadline")
  "of" '(:ignore t :which-key "(f)ind+...")
  "ofh" '((lambda () (interactive) (consult-org-heading) ) :which-key "of-(h)eading")
  "ofn" '((lambda () (interactive) (consult-line "#+name"       ) ) :which-key "of-(n)amed table/eq/src")
  "ofs" '((lambda () (interactive) (consult-line "#+begin_"  ) ) :which-key "of-(s)ource src-block")
  "ox" '(:ignore t :which-key "e(x)port+...")
  "oxb" '(org-beamer-export-to-pdf :which-key "ox-(b)eamer")
  "oxB" '((lambda () (interactive) (org-beamer-export-to-pdf nil t) ) :which-key "ox-(B)eamer subtree")
  "oxp" '(org-latex-export-to-pdf :which-key "ox-(p)df latex")
  "oxP" '((lambda () (interactive) (org-latex-export-to-pdf nil t) ) :which-key "ox-(P)df latex subtree")
  "oxo" '(gry/org-open-pdf :which-key "ox-(o)pen exported pdf")
  "ol" '(:ignore t :which-key "(l)ink+...")
  "old" '(garid-custom/org-toggle-link-n-emphasis :which-key "ol-(d)escription show/hide")
  "oli" '((lambda () (interactive) (org-insert-link) ) :which-key "ol-(i)nsert")
  "ol>" '(org-next-link :which-key "ol-(>)next link")
  "ol<" '(org-previous-link :which-key "ol-(<)prev link")
  "olo" '(org-open-at-point :which-key "ol-(o)pen (same as SPC o o)")
  "op" '(org-latex-preview :which-key "o-(p)review")
  "oi" '(:ignore t :which-key "(i)mg+...")
  "oip" '(org-download-clipboard :which-key "oi-(p)aste-clipboard")
  "oiP" '(org-download-image :which-key "oi-(P)aste from path")
  "oid" '(org-download-delete :which-key "oi-(d)elete file")
  "oie" '(org-download-edit :which-key "oi-(e)dit externally")
  "oir" '(org-download-rename-at-point :which-key "oi-(r)ename file")
  "oit" '(org-toggle-inline-images :which-key "oi-(t)oggle shot/hide image")
  "ois" '(:ignore t :which-key "(s)ize in when toggled")
  "oisn" '((lambda () (interactive) (setq org-image-actual-width '(800)) ) :which-key "ois-(n)ormal")
  "oisb" '((lambda () (interactive) (setq org-image-actual-width '(1500)) ) :which-key "ois-(b)ig")
  "oiss" '((lambda () (interactive) (setq org-image-actual-width '(400)) ) :which-key "ois-(s)mall")
  "oI" '(:ignore t :which-key "o-(I)nsert+....")
  "oIb" '(org-cite-insert :which-key "oI-(c)ite")
  "oIf" '(org-footnote-new :which-key "oI-(f)ootnote")
  "oIF" '(org-footnote-action :which-key "oI-(F)ootnote-action")
  "j" '(org-next-block :which-key "(j) jump to next src-block")
  "k" '(org-previous-block :which-key "(k) jump to prev src-block")
)
#+end_src

*** COMMENT old
#+begin_src emacs-lisp
(garids-keybind/for-all-modes
  "SPC" '(execute-extended-command              :which-key "M-x"                   )
  "d"   '(dired-jump                            :which-key "(d)ired"               )
  "f"   '(find-file                             :which-key "(f)ind-file"           )
  "n"   '(dired-sidebar-jump-to-sidebar         :which-key "(n)-side-tree"         )
  "N"   '(dired-sidebar-hide-sidebar            :which-key "(N)-side-tree-close"   )
  "ZQ"  '(kill-emacs                            :which-key "quit"                  )
  "l"   '(consult-buffer                        :which-key "(l)ist-buffers"        )
  "Lr"  '(revert-buffer-quick                   :which-key "(L-r)evert"            )
  "Le"  '(eval-buffer                           :which-key "(L-e)val"              )
  "Lb"  '(ibuffer                               :which-key "(L-(b)uffer"           )
  "Li"  '(ibuffer                               :which-key "(L-i)buffer"           )
  "Ln"  '(rename-buffer                         :which-key "(L-n)ame"              )
  "Lp"  '(switch-to-prev-buffer                 :which-key "(L-p)rev"              )
  "LP"  '(switch-to-next-buffer                 :which-key "(L-P)next"             )
  "Ld"  '(crux-delete-file-and-buffer           :which-key "(L-d)delete"           )
  "ca"  '(calc                                  :which-key "(ca)lc"                )

  "mg"   '(magit-status                         :which-key "(m)a(g)it"             )

  "co"  '(consult-org-heading                   :which-key "(c-o)rg"               )
  "cm"  '(consult-imenu                         :which-key "(c-i(m)enu"            )
  "cM"  '(consult-man                           :which-key "(c-M)an"               )
  "cr"  '(consult-ripgrep                       :which-key "(c-r)ipgrep"           )
  "cf"  '(consult-flymake                       :which-key "(c-f)lymake"           )
  "cp"  '(consult-project-buffer                :which-key "(c-p)roject"           )
  "cd"  '(consult-dir                           :which-key "(c-d)ir"               )

  "bm"  '(consult-bookmark                      :which-key "(b)ook(m)ark-consult"  )
  "bs"  '(bookmark-set                          :which-key "(b)m-(s)et"            )
  "bd"  '(bookmark-delete                       :which-key "(b)m-(d)elete"         )
  "br"  '(bookmark-rename                       :which-key "(b)m-(r)ename"         )

  ;; "cf"  '(consult-git-grep                   :which-key "(c-f)gitgrep"          )
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "mg"   '(magit-status                         :which-key "(m)a(g)it"             ) ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;"mm"   '(mu4e                               :which-key "(m)-mu4e"              )
  ;;"mM"   '(notmuch                            :which-key "(m)-notmuch"           )
  ;;"mn"   '(mu4e-compose-new                   :which-key "(m)4e-(n)ew"           )

  ;;"wo"  '(eww-open-in-new-buffer              :which-key "(w)eb-(o)pen"          )
  ;;"ws"  '(eww-search-words                    :which-key "(w)eb-(s)earch"        )
  ;; "wi"  '(evil-insert                        :which-key "(w)eb-(i)nsert"        )

  "pf"  '(project-find-file                     :which-key "(p-f)ile"              )
  "pd"  '(consult-flymake                       :which-key "(p-d)iagnostic"        )
  "pr"  '(xref-find-references                  :which-key "(p-r)eferences"        )
  "pz"  '(project-switch-project                :which-key "(p-z)"                 )
  ;;"pd"  '(project-find-dir                    :which-key "(p-d)ir"               )
  ;;"pc"  '(project-compile                     :which-key "(p-c)ompile"           )
  ;;"pe"  '(project-eshell                      :which-key "(p-e)shell"            )
  "ps"  '(project-find-regexp                   :which-key "(p-s)find-regexp"      )
  "vq"  '(format-all-buffer                     :which-key "(q)-format-buffer"     )
  "vr"  '(project-query-replace-regexp          :which-key "(p-r)eplace"           )
  "pk"  '(project-kill-buffers                  :which-key "(p-k)ill-buffers"      )
  "pl"  '(consult-project-buffer                :which-key "(p-l)ist-buffers"      )
  "pL"  '(project-list-buffers                  :which-key "(p-L)ist-buffers"      )
  ;;"pp"  '(gry/project-send                      :which-key "(p-p)send"           )

  "e"   '(eshell                                :which-key "(e)shell"              )
  ;;"E"   '(elfeed                                :which-key "(E)lfeed"            )
  "vt"  '(vterm                                 :which-key "(v)ir-(t)erm"          )

  "oe"  '((lambda () (interactive) (find-file "~/.config/emacs/init.org"))           :which-key "open emacs conf org")
  "ob"  '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography))) :which-key "open bibliography")
  "oE"  '((lambda () (interactive) (find-file "~/.config/emacs/init.el"))            :which-key "open emacs conf el")
  "oC"  '((lambda () (interactive) (find-file org-default-notes-file))               :which-key "open Capture file")

  "<"     '(recompile           :which-key "recompile")
  "ruim"  '(org-roam-ui-mode :which-key "(r-ui)-(m)ode")

  "Dr"  '(denote-rename-file :which-key "(D)enote-(D)ired")
  "Dn"  '(denote-open-or-create :which-key "(D)e-(N)ote")
  "DD"  '((lambda () (interactive) (dired denote-directory)) :which-key "(D)enote-(D)ired")


  "h"   '(describe-symbol :which-key "Describe-Sym")
  "H"   '(describe-key    :which-key "Describe-Key")

  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4)) :which-key "(s)ys-number(l)ine-(4)")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3)) :which-key "(s)ys-number(l)ine-(3)")
  "srf" '((lambda () (interactive) (recentf-open-files))                :which-key "(s-r)ecent-(f)iles")
  "st"  '(gry/open-term-at              :which-key "(s-t)erminal")
  "sT"  '(toggle-transparency           :which-key "(s-T)oggle-transparency")
  ;;"sd"  '(gry/distraction-free-on       :which-key "(s-d)istraction-free-on")
  ;;"sD"  '(gry/distraction-free-off      :which-key "(s-D)istraction-free-off")
  "sns" '(crux-create-scratch-buffer    :which-key "(s-n)ew-(s)cratch-buf")
  ;;"ss"  '((lambda () (interactive) (shell-command "flameshot gui --path ~/Pictures/ss/"))     :which-key "(s-s)creenshot")
  "slm" '(scroll-lock-mode                                              :which-key "(s)croll-(l)ock-(m)ode")
  "scl"  '((lambda () (interactive)
             (command-log-mode)
             (global-command-log-mode)
             (clm/open-command-log-buffer))
           :which-key "(s-c)md-(l)og")

  "svl" '(global-display-fill-column-indicator-mode     :which-key "(s-v)ertical-(l)ine" )
  "sw" '(whitespace-mode                                :which-key "(s-w)hitespace"      )

  "sco" '(corfu-mode                                    :which-key "(s-c)orfu-(m)ode"    )
  "se"  '(eglot                                         :which-key "(s-e)glot"           )
  ;;"sim" '(set-input-mode                              :which-key "(s-i)nput-mode"      )
  "sib" '(clone-indirect-buffer                         :which-key "(s-i)ndirect-(b)uffer")

  "rg"  '(rg                                            :which-key "(r)ip-(g)rep"        )

  "yn"  '(yas-new-snippet                               :which-key "(y)as-(n)ew"         )
  "yv"  '(yas-visit-snippet-file                        :which-key "(y)as-(v)isit"       )
  "yd"  '(yas-describe-tables                           :which-key "(y)as-(d)esc-table"  )
  "yc"  '(consult-yasnippet                             :which-key "(y)as-(c)onsult"     )

  "ce"  '(calc-embedded                                 :which-key "(c)alc-(e)mbedded"   )
  "cF"  '(full-calc                                     :which-key "(c)alc-(F)ull"       )

  "za"  '(garid-custom/align-regexp-and-untabify                         :which-key "(z)-reg-(a)lign"     )
  "zr"  '(replace-regexp                                :which-key "(z)-reg-(r)eplace"   )
  "zh" '(highlight-symbol-at-point                      :which-key "(z)-(h)ighlight"     )
  "zH" '(unhighlight-regexp                             :which-key "(z)-(H)ighlight-off" )

  "oTm" '(orgtbl-mode                           :which-key "(o-T)able-(m)ode")
  "oTc" '(orgtbl-create-or-convert-from-region  :which-key "(o-T)able-(c)reate")


  )

;; "cc"  '(lsp-bridge-diagnostic-jump-next     :which-key "lsp-bridge-"           )
;; "Lw"  '(consult-buffer-other-window         :which-key "(L-w)indow"            )
;; "Lf"  '(consult-buffer-other-frame          :which-key "(L-f)rame"             )
;; "Fw"  '(find-file-other-window              :which-key "(F)ile-other-(w)indow" )
;; "Ff"  '(find-file-other-frame               :which-key "(F)ile-other-(f)rame"  )

;;"gp"  '(hydra-garid_gtd_step1_is_actionable/body      :which-key "(g)pt-(p)rocessing"  )
#+end_src
*** COMMENT keybinds inside org-mode
#+begin_src emacs-lisp
(garids-keybind/in-org-mode

 "om"  '(org-refile          :which-key "(o-m)ove-subtree")
 ","   '(org-ctrl-c-ctrl-c   :which-key "C-c C-c")

 "otT"  '(org-todo                                         :which-key "(o-t)odo-(T)"             )
 "otb"  '(org-timeblock                                    :which-key "(o-t)ime-(b)lock"         )
 "ott"  '((lambda () (interactive) (org-todo "TODO"))      :which-key "(o-t)odo-(t)odo"          )
 "ots"  '((lambda () (interactive) (org-todo "STARTED"))   :which-key "(o-t)odo-(s)chedule"      )
 "otw"  '((lambda () (interactive) (org-todo "WAITING"))   :which-key "(o-t)odo-(w)ait"          )
 "otd"  '((lambda () (interactive) (org-todo "DONE"))      :which-key "(o-t)odo-(d)one"          )
 "otc"  '((lambda () (interactive) (org-todo "CANCELLED")) :which-key "(o-t)odo-(c)ancel"        )
 "otp"  '((lambda () (interactive) (org-todo "PROCESSED")) :which-key "(o-t)odo-(p)rocessed"     )
 "otn"  '((lambda () (interactive) (org-todo ""))          :which-key "(o-t)odo-(n)one"          )
 "ota"  '((lambda () (interactive) (org-archive-subtree-default-with-confirmation))
          :which-key "(o-t)odo-(a)rchive")

 "os"  '(org-schedule                                      :which-key "(o-s)chedule"             )
 "oa"  '(org-agenda                                        :which-key "(o-a)genda"               )
 "od" '((lambda () (interactive) (org-deadline ""))        :which-key "(o-d)eadline"             )

 "onm"  '(org-num-mode                                     :which-key "(o-n)um-(m)ode"           )

 "oft" '((lambda () (interactive) (consult-line "name tab"))    :which-key "(o-f)ind-(t)able"    )
 "ofe" '((lambda () (interactive) (consult-line "name eq"))     :which-key "(o-f)ind-(e)q"       )
 "off" '((lambda () (interactive) (consult-line "name fig"))    :which-key "(o-f)ind-(f)ig"      )
 "ofd" '((lambda () (interactive) (consult-line "downloaded"))  :which-key "(o-f)ind-(d)ownload" )
 "ofn" '((lambda () (interactive) (consult-line "name"))        :which-key "(o-f)ind-(n)ame"     )
 "ofs" '((lambda () (interactive) (consult-line "begin_src"))   :which-key "(o-f)ind-(s)ource"   )


 "op"   '(org-latex-preview                    :which-key "(o-p)review")
 "oy"   '(org-copy-subtree                     :which-key "(o-y)ank-subtree")


 "oxb"  '(org-beamer-export-to-pdf             :which-key "(o-x)-(b)eamer")
 "oxB"   '((lambda () (interactive) (org-beamer-export-to-pdf nil t))
           :which-key "(o-x)port-subtree-(P)df")
 "oxp"  '(org-latex-export-to-pdf              :which-key "(o-x)port-(p)df")
 "oxP"   '((lambda () (interactive) (org-latex-export-to-pdf nil t))
           :which-key "(o-x)port-subtree-(P)df")


 "oxo"  '(gry/org-open-pdf                             :which-key "(o-x)-(P)df-open"            )
 "old"  '(garid-custom/org-toggle-link-n-emphasis      :which-key "(o-l)ink-(d)isplay"          )
 "oli"  '((lambda () (interactive) (org-insert-link))  :which-key "(o-l)ink-(i)nsert"           )
 "oip"  '(org-download-clipboard                       :which-key "(o-i)mage-(p)aste-clipboard" )
 "oiP"  '(org-download-image                           :which-key "(o-i)mage-(P)aste-url"       )
 "oid"  '(org-download-delete                          :which-key "(o-i)mage-(d)elete"          )
 "oie"  '(org-download-edit                            :which-key "(o-i)mage-(e)dit"            )
 "oir"  '(org-download-rename-at-point                 :which-key "(o-i)mage-download-(r)ename" )
 "oit"  '(org-toggle-inline-images                     :which-key "(o-i)mage-(t)oggle"          )
 "oib"  '(org-cite-insert                              :which-key "(o-i)nsert-(c)ite"           )
 "oif"  '(org-footnote-new                             :which-key "(o-i)nsert-(f)ootnote"       )
 "oiF"  '(org-footnote-action                          :which-key "(o-i)nsert-(F)ootnote-action")

 "oisn"  '((lambda () (interactive) (setq org-image-actual-width '(800)))      :which-key "(o-i-s)ize-(n)ormal")
 "oisb"  '((lambda () (interactive) (setq org-image-actual-width '(1500)))     :which-key "(o-i-s)ize-(b)ig")
 "oiss"  '((lambda () (interactive) (setq org-image-actual-width '(400)))      :which-key "(o-i-s)ize-(s)mall")

 "oc"  '(org-capture                           :which-key "(o-c)apture"           )
 "oo"  '(org-open-at-point                     :which-key "(o-o)pen"              )

 ;;orgroams
 "rl"  '(org-roam-buffer-toggle                :which-key "(r-l)toggle"           )
 "rL"  '(org-roam-buffer-display-dedicated     :which-key "(r-L)dedicated"        )
 "rf"  '(org-roam-node-find                    :which-key "(r-f)ind"              )
 "ri"  '(org-roam-node-insert                  :which-key "(r-i)nsert"            )
 "rI"  '(garid-custom/org-roam-node-insert-immediate        :which-key "(r-I)nsert-immediate"  )

 ;;org-roam-dailies
 "rn" '(org-roam-dailies-capture-today         :which-key "(r-daily-n)ew-capture" )
 "rr" '(org-roam-dailies-goto-today            :which-key "(r-daily-t)oday"       )
 "rt" '(org-roam-dailies-goto-tomorrow         :which-key "(r-daily-T)omorrow"    )
 "ry" '(org-roam-dailies-goto-yesterday        :which-key "(r-daily-y)esterday"   )
 "rD" '(org-roam-dailies-capture-date          :which-key "(r-daily-d)ate"        )
 "rd" '(org-roam-dailies-goto-date             :which-key "(r-daily-goto-(D)ate"  )
 "r>" '(org-roam-dailies-goto-next-note        :which-key "(r-daily->)next"       )
 "r<" '(org-roam-dailies-goto-previous-note    :which-key "(r-daily-<)prev")


  ;; org code movement
  "j"   '(org-next-block     :which-key "")
  "k"   '(org-previous-block :which-key "")
  "J"   '(org-next-link      :which-key "")
  "K"   '(org-previous-link  :which-key "")


 )
#+end_src

** COMMENT general main
#+begin_src emacs-lisp
(use-package general
    :config
    (general-evil-setup t)

    ;; Main leader key ;;
    (general-create-definer rune/leader-keys
      :keymaps       '(normal insert visual emacs)
      :prefix        "SPC"
      :global-prefix "C-SPC")

    ;; Secondary leader key ;;
    (general-create-definer rune/leader-keys-other
      :keymaps       '(normal insert visual emacs)
      :prefix        "M-SPC"
      :global-prefix "C-M-SPC"))
#+end_src
** COMMENT general main1
*** My Emacs configuration cheatsheet
**** My custom key-binding cheatsheet
#+ATTR_HTML: :border 2 :rules all :frame border
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| where                   | key binding | mnemonic                                  | description                                                 |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| basic emacs movment     |             |                                           |                                                             |
| any                     | SPC d       | (*_d_*)irectory explorer                  |                                                             |
| any                     | SPC f       | (*_f_*)ind file                           |                                                             |
| any                     | SPC l       | (*_l_*)ist buffer                         | choose buffer and open it                                   |
| any                     | SPC n       |                                           | Open file explorer on left side                             |
| any                     | SPC N       |                                           | Hide file explorer on left side                             |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| bookmark related        |             |                                           |                                                             |
| any                     | SPC b m     | (*_b_*)ook (*_m_*)ark                     | choose bookmark and open it                                 |
| any                     | SPC b s     | (*_b_*)ook (*_s_*)et                      | set bookmark                                                |
| any                     | SPC b d     | (*_b_*)ook (*_d_*)delete                  | delete bookmark                                             |
| any                     | SPC b r     | (*_b_*)ook (*_r_*)ename                   | rename bookmark                                             |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Opening certain files   |             |                                           |                                                             |
| any                     | SPC o e     | (*_o_*)pen (*_e_*)macs conf               | ~/.config/emacs/init.org                                    |
| any                     | SPC o E     | (*_o_*)pen (*_E_*)macs conf               | ~/.config/emacs/init.el                                     |
| any                     | SPC o b     | (*_o_*)pen (*_b_*)ibliography file        | ~/Documents/Personal/20220101T010101--references__study.bib |
| any                     | SPC o C     | (*_o_*)pen (*_C_*)apture file             | ~/Documents/Personal/20230926T010607--todo__todo.org        |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| TODO  related           |             |                                           |                                                             |
| org                     | SPC o c     | (*_o_*)rg (*_c_*)apture                   | capture your thought, todo                                  |
| org                     | SPC o t t   | (*_o_*)rg (*_t_*)odo set (*_t_*)odo       | set subtree -> TODO                                         |
| org                     | SPC o t w   | (*_o_*)rg (*_t_*)odo set (*_w_*)aiting    | set subtree -> WAITING                                      |
| org                     | SPC o t d   | (*_o_*)rg (*_t_*)odo set (*_d_*)one       | set subtree -> DONE                                         |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Calendar related        |             |                                           |                                                             |
| org                     | SPC o s     | (*_o_*)rg (*_s_*)chedule                  | add schedule to subtree                                     |
| org                     | SPC o d     | (*_o_*)rg (*_d_*)eadline                  | add schedule to deadline                                    |
| org                     | SPC o a     | (*_o_*)rg (*_a_*)genda                    | open org agenda                                             |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Export related          |             |                                           |                                                             |
| org                     | SPC o x p   | (*_o_*)rg e(*_x_*)port (*_p_*)df          | compile org file to PDF (latex)                             |
| org                     | SPC o x P   | (*_o_*)rg e(*_x_*)port (*_P_*)df          | compile org subtree (section) to PDF (latex)                |
| org                     | SPC o x o   | (*_o_*)rg e(*_x_*)ported (*_o_*)pen       | open the latex compiled pdf file                            |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Visual related          |             |                                           |                                                             |
| org                     | SPC o n m   | (*_o_*)rg (*_n_*)um (*_m_*)ode            | show number on header                                       |
| org                     | SPC o l d   | (*_o_*)rg (*_l_*)ink (*_d_*)escription    | toggle show/hiding hyperlink                                |
| org                     | SPC o l i   | (*_o_*)rg (*_l_*)ink (*_i_*)nsert         | org insert link/hyperlink                                   |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Visual image related    |             |                                           |                                                             |
| org                     | SPC o i p   | (*_o_*)rg (*_i_*)mg (*_p_*)aste           | paste copied image (from clipboard)                         |
| org                     | SPC o i P   | (*_o_*)rg (*_i_*)mg (*_P_*)aste from url  | paste URL(or file path) image                               |
| org (on img link)       | SPC o i d   | (*_o_*)rg (*_i_*)mg (*_d_*)elete          | delete image-at-point                                       |
| org (on img link)       | SPC o i e   | (*_o_*)rg (*_i_*)mg (*_e_*)dit            | edit image-at-point (via gimp/inkscape)                     |
| org                     | SPC o i t   | (*_o_*)rg (*_i_*)mg (*_t_*)oggle visible  | toggle show/hide image in buffer                            |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Insert citation related |             |                                           |                                                             |
| org                     | SPC o i b   | (*_o_*)rg (*_i_*)nsert (*_b_*)ibliography | insert citation                                             |
| org                     | SPC o i f   | (*_o_*)rg (*_i_*)nsert (*_f_*)ootnote     | insert footnote                                             |
| org                     | SPC o i F   | (*_o_*)rg (*_i_*)nsert (*_F_*)ootnote     | insert footnote (action???)                                 |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
| Others                  |             |                                           |                                                             |
| org (on link)           | SPC o o     | (*_o_*)rg (*_o_*)pen                      | org open hyperlink                                          |
| org                     | SPC o y     | (*_o_*)rg (*_y_*)ank subtree              | copy current subtree                                        |
|-------------------------+-------------+-------------------------------------------+-------------------------------------------------------------|
**** common org keybindins (might be from evil)
These are basically uncustomized keybindings I use quite often.
~C-c .~  (means ~Ctrl+c~ and then ~.~)

#+ATTR_HTML: :border 2 :rules all :frame border
|---------------------+----------------+--------------------+-----------------------------------------------|
| where               | key binding    | mnemonic           | description                                   |
|---------------------+----------------+--------------------+-----------------------------------------------|
| Structural movement |                |                    |                                               |
| org                 | C-j            | j (down)           | (same level) jump to next heading             |
| org                 | C-k            | k (up)             | (same level) jump to previous heading         |
| org                 | C-S-j          | j (down)           | (any level) jump to next visible heading      |
| org                 | C-S-k          | k (up)             | (any level) jump to previous visible heading  |
|---------------------+----------------+--------------------+-----------------------------------------------|
| Structural edit     |                |                    |                                               |
| org (on heading)    | ~M-h~ or ~M-l~ | h, l (left, right) | move increase/decrease depth level of heading |
| org (on heading)    | ~M-h~ or ~M-l~ | k, j (left, right) | move (switch) up/down heading                 |
|---------------------+----------------+--------------------+-----------------------------------------------|
| Inserting           |                |                    |                                               |
| org                 | M-RET          |                    | insert new heading                            |
| org                 | C-c C-l        |                    | insert link (same as ~SPC o l i~)             |
| org                 | C-c \vert      |                    | insert table                                  |
| org                 | C-c .          |                    | insert timestamp (active)                     |
| org                 | C-c !          |                    | insert timestamp (inactive)                   |
| org                 | C-c !          |                    | insert timestamp (inactive)                   |
|---------------------+----------------+--------------------+-----------------------------------------------|

**** Snippets in org mode
These are snippets that I've defined (not all). To use it, you write the ~key~ (e.g. ~<cn~ and press ~TAB~ key).
Also these will only work inside ORG file.
|--------------+--------------------------+----------------------------------------------------------|
| key          | mnemonic                 | description                                              |
|--------------+--------------------------+----------------------------------------------------------|
|              | shoulbe at top           |                                                          |
| ~<ti~        | (ti)tle                  | insert title (shoulbe at top)                            |
| ~<hdr-start~ | (h)ea(d)e(r)-(start)     | opening state (fold org file to the 2, or 3th sub-level) |
| ~<da~        | (da)te                   | insert date (shoulbe at top)                             |
|--------------+--------------------------+----------------------------------------------------------|
|              | anywhere                 |                                                          |
| ~<ba~        | (b)egin (a)bstract       | insert abstract block                                    |
| ~<cn~        | (c)aption (n)ame         | insert image caption and name (is for later reference)   |
| ~<n~         | (n)ame                   | name (is for later reference)                            |
| ~<img-w~     | (img)-(w)idth            | set image width in latex export                          |
| ~<oxt~       | (o)rg-(x)port-(t)emplate | insert latex template                                    |
| ~<pb~        | (p)rint-(b)ibliography   | shoulbe at end                                           |
| ~<s~         | (s)ource                 | insert source block                                      |
| ~<ta~        | (ta)ble                  | insert example table                                     |
|--------------+--------------------------+----------------------------------------------------------|

*** COMMENT Actual implementation
#+begin_src emacs-lisp
;; Main Keychords
(rune/leader-keys
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "SPC" '(execute-extended-command              :which-key "M-x"                   )    ;;
  ;; "d"   '(dired-jump                            :which-key "(d)ired"               )    ;;
  ;; "f"   '(find-file                             :which-key "(f)ind-file"           )    ;;
  ;; ;;"Fw"  '(find-file-other-window              :which-key "(F)ile-other-(w)indow" )    ;;
  ;; ;;"Ff"  '(find-file-other-frame               :which-key "(F)ile-other-(f)rame"  )    ;;
  ;;                                                                                       ;;
  ;; "n"   '(dired-sidebar-jump-to-sidebar         :which-key "(n)-side-tree"         )    ;;
  ;; "N"   '(dired-sidebar-hide-sidebar            :which-key "(N)-side-tree-close"   )    ;;
  ;;                                                                                       ;;
  ;; "ZQ"  '(kill-emacs                            :which-key "quit"                  )    ;;
  ;; "l"   '(consult-buffer                        :which-key "(l)ist-buffers"        )    ;;
  ;; "Lr"  '(revert-buffer-quick                   :which-key "(L-r)evert"            )    ;;
  ;; ;;"Lw"  '(consult-buffer-other-window         :which-key "(L-w)indow"            )    ;;
  ;; ;;"Lf"  '(consult-buffer-other-frame          :which-key "(L-f)rame"             )    ;;
  ;; "Le"  '(eval-buffer                           :which-key "(L-e)val"              )    ;;
  ;; "Lb"  '(ibuffer                               :which-key "(L-(b)uffer"           )    ;;
  ;; "Li"  '(ibuffer                               :which-key "(L-i)buffer"           )    ;;
  ;; "Ln"  '(rename-buffer                         :which-key "(L-n)ame"              )    ;;
  ;; "Lp"  '(switch-to-prev-buffer                 :which-key "(L-p)rev"              )    ;;
  ;; "LP"  '(switch-to-next-buffer                 :which-key "(L-P)next"             )    ;;
  ;; "Ld"  '(crux-delete-file-and-buffer           :which-key "(L-d)delete"           )    ;;
  ;;                                                                                       ;;
  ;;                                                                                       ;;
  ;; ;; "cc"  '(lsp-bridge-diagnostic-jump-next       :which-key "lsp-bridge-"           ) ;;
  ;; "ca"  '(calc                                  :which-key "(ca)lc"                )    ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "co"  '(consult-org-heading                   :which-key "(c-o)rg"               )       ;;
  ;; "cm"  '(consult-imenu                         :which-key "(c-i(m)enu"            )       ;;
  ;; "cM"  '(consult-man                           :which-key "(c-M)an"               )       ;;
  ;; "cr"  '(consult-ripgrep                       :which-key "(c-r)ipgrep"           )       ;;
  ;; ;; "cf"  '(consult-git-grep                   :which-key "(c-f)gitgrep"          )       ;;
  ;; "cf"  '(consult-flymake                       :which-key "(c-f)lymake"           )       ;;
  ;; "cp"  '(consult-project-buffer                :which-key "(c-p)roject"           )       ;;
  ;; "cd"  '(consult-dir                           :which-key "(c-d)ir"               )       ;;
  ;;                                                                                          ;;
  ;; "bm"  '(consult-bookmark                      :which-key "(b)ook(m)ark-consult"  )       ;;
  ;; "bs"  '(bookmark-set                          :which-key "(b)m-(s)et"            )       ;;
  ;; "bd"  '(bookmark-delete                       :which-key "(b)m-(d)elete"         )       ;;
  ;; "br"  '(bookmark-rename                       :which-key "(b)m-(r)ename"         )       ;;
  ;;                                                                                          ;;
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;
  ;; ;; "mg"   '(magit-status                         :which-key "(m)a(g)it"             ) ;; ;;
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;
  ;; ;;"mm"   '(mu4e                               :which-key "(m)-mu4e"              )       ;;
  ;; ;;"mM"   '(notmuch                            :which-key "(m)-notmuch"           )       ;;
  ;; ;;"mn"   '(mu4e-compose-new                   :which-key "(m)4e-(n)ew"           )       ;;
  ;;                                                                                          ;;
  ;; ;;"wo"  '(eww-open-in-new-buffer              :which-key "(w)eb-(o)pen"          )       ;;
  ;; ;;"ws"  '(eww-search-words                    :which-key "(w)eb-(s)earch"        )       ;;
  ;; ;; "wi"  '(evil-insert                        :which-key "(w)eb-(i)nsert"        )       ;;
  ;;                                                                                          ;;
  ;; "pf"  '(project-find-file                     :which-key "(p-f)ile"              )       ;;
  ;; "pd"  '(consult-flymake                       :which-key "(p-d)iagnostic"        )       ;;
  ;; "pr"  '(xref-find-references                  :which-key "(p-r)eferences"        )       ;;
  ;; "pz"  '(project-switch-project                :which-key "(p-z)"                 )       ;;
  ;; ;;"pd"  '(project-find-dir                    :which-key "(p-d)ir"               )       ;;
  ;; ;;"pc"  '(project-compile                     :which-key "(p-c)ompile"           )       ;;
  ;; ;;"pe"  '(project-eshell                      :which-key "(p-e)shell"            )       ;;
  ;; "ps"  '(project-find-regexp                   :which-key "(p-s)find-regexp"      )       ;;
  ;; "vq"  '(format-all-buffer                     :which-key "(q)-format-buffer"     )       ;;
  ;; "vr"  '(project-query-replace-regexp          :which-key "(p-r)eplace"           )       ;;
  ;; "pk"  '(project-kill-buffers                  :which-key "(p-k)ill-buffers"      )       ;;
  ;; "pl"  '(consult-project-buffer                :which-key "(p-l)ist-buffers"      )       ;;
  ;; "pL"  '(project-list-buffers                  :which-key "(p-L)ist-buffers"      )       ;;
  ;; ;;"pp"  '(gry/project-send                      :which-key "(p-p)send"             )     ;;
  ;;                                                                                          ;;
  ;; "e"   '(eshell                                :which-key "(e)shell"              )       ;;
  ;; "E"   '(elfeed                                :which-key "(E)lfeed"              )       ;;
  ;; "vt"  '(vterm                                 :which-key "(v)ir-(t)erm"          )       ;;
  ;;                                                                                          ;;
  ;; ;; "oto" '((lambda () (interactive) (find-file "~/orgfiles/Task.org"))                   ;;
  ;; ;; :which-key "(o)-(t)ask-(o)pen")                                                       ;;
  ;; "oe"  '((lambda () (interactive) (find-file "~/.config/emacs/init.org"))                 ;;
  ;;         :which-key "(o)pen-(e)macs-init.org")                                            ;;
  ;; ;;"ob"  '((lambda () (interactive) (find-file "~/Documents/bib/references.bib"))         ;;
  ;; ;;        :which-key "(o)pen-(b)ookmark")                                                ;;
  ;; "ob"  '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)))       ;;
  ;;         :which-key "(o)pen-(b)ookmark")                                                  ;;
  ;; "oE"  '((lambda () (interactive) (find-file "~/.config/emacs/init.el"))                  ;;
  ;;         :which-key "(o)pen-(E)macs-init.el")                                             ;;
  ;;                                                                                          ;;
  ;; "oC"  '((lambda () (interactive) (find-file org-default-notes-file))                     ;;
  ;;         :which-key "(o)pen-(C)apture")                                                   ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;"oC"  '((lambda () (interactive) (find-file "~/roamnotes/20230417200051-org_contacs.org"))
  ;;        :which-key "(o)pen-(E)macs-init.el")


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "<"   '(recompile           :which-key "recompile") ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "om"  '(org-refile          :which-key "(o-m)ove-subtree")                                        ;;
  ;; ","   '(org-ctrl-c-ctrl-c   :which-key "C-c C-c")                                                 ;;
  ;;                                                                                                   ;;
  ;; "otT"  '(org-todo                                         :which-key "(o-t)odo-(T)"             ) ;;
  ;; "otb"  '(org-timeblock                                    :which-key "(o-t)ime-(b)lock"         ) ;;
  ;; "ott"  '((lambda () (interactive) (org-todo "TODO"))      :which-key "(o-t)odo-(t)odo"          ) ;;
  ;; "ots"  '((lambda () (interactive) (org-todo "STARTED"))   :which-key "(o-t)odo-(s)chedule"      ) ;;
  ;; "otw"  '((lambda () (interactive) (org-todo "WAITING"))   :which-key "(o-t)odo-(w)ait"          ) ;;
  ;; "otd"  '((lambda () (interactive) (org-todo "DONE"))      :which-key "(o-t)odo-(d)one"          ) ;;
  ;; "otc"  '((lambda () (interactive) (org-todo "CANCELLED")) :which-key "(o-t)odo-(c)ancel"        ) ;;
  ;; "otp"  '((lambda () (interactive) (org-todo "PROCESSED")) :which-key "(o-t)odo-(p)rocessed"     ) ;;
  ;; "otn"  '((lambda () (interactive) (org-todo ""))          :which-key "(o-t)odo-(n)one"          ) ;;
  ;; "ota"  '((lambda () (interactive) (org-archive-subtree-default-with-confirmation))                ;;
  ;;          :which-key "(o-t)odo-(a)rchive")                                                         ;;
  ;;                                                                                                   ;;
  ;; "os"  '(org-schedule                                      :which-key "(o-s)chedule"             ) ;;
  ;; "oa"  '(org-agenda                                        :which-key "(o-a)genda"               ) ;;
  ;; "od" '((lambda () (interactive) (org-deadline ""))        :which-key "(o-d)eadline"             ) ;;
  ;;                                                                                                   ;;
  ;; "onm"  '(org-num-mode                                     :which-key "(o-n)um-(m)ode"           ) ;;
  ;;                                                                                                   ;;
  ;; "oft" '((lambda () (interactive) (consult-line "name tab"))    :which-key "(o-f)ind-(t)able"    ) ;;
  ;; "ofe" '((lambda () (interactive) (consult-line "name eq"))     :which-key "(o-f)ind-(e)q"       ) ;;
  ;; "off" '((lambda () (interactive) (consult-line "name fig"))    :which-key "(o-f)ind-(f)ig"      ) ;;
  ;; "ofd" '((lambda () (interactive) (consult-line "downloaded"))  :which-key "(o-f)ind-(d)ownload" ) ;;
  ;; "ofn" '((lambda () (interactive) (consult-line "name"))        :which-key "(o-f)ind-(n)ame"     ) ;;
  ;; "ofs" '((lambda () (interactive) (consult-line "begin_src"))   :which-key "(o-f)ind-(s)ource"   ) ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; "ost"  '((lambda () (interactive)
  ;;                     (org-set-tags-command) ; sets images size
  ;;                     )                                                                                      :which-key "afs")

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "oTm" '(orgtbl-mode                           :which-key "(o-T)able-(m)ode")   ;;
  ;; "oTc" '(orgtbl-create-or-convert-from-region  :which-key "(o-T)able-(c)reate") ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "op"   '(org-latex-preview                    :which-key "(o-p)review")                                         ;;
  ;; "oy"   '(org-copy-subtree                     :which-key "(o-y)ank-subtree")                                    ;;
  ;;                                                                                                                 ;;
  ;;                                                                                                                 ;;
  ;; "oxb"  '(org-beamer-export-to-pdf             :which-key "(o-x)-(b)eamer")                                      ;;
  ;; "oxB"   '((lambda () (interactive) (org-beamer-export-to-pdf nil t))                                            ;;
  ;;           :which-key "(o-x)port-subtree-(P)df")                                                                 ;;
  ;; "oxp"  '(org-latex-export-to-pdf              :which-key "(o-x)port-(p)df")                                     ;;
  ;; "oxP"   '((lambda () (interactive) (org-latex-export-to-pdf nil t))                                             ;;
  ;;           :which-key "(o-x)port-subtree-(P)df")                                                                 ;;
  ;;                                                                                                                 ;;
  ;;                                                                                                                 ;;
  ;; "oxo"  '(gry/org-open-pdf                             :which-key "(o-x)-(P)df-open"            )                ;;
  ;; "old"  '(garid-custom/org-toggle-link-n-emphasis                   :which-key "(o-l)ink-(d)isplay"          )                ;;
  ;; "oli"  '((lambda () (interactive) (org-insert-link))  :which-key "(o-l)ink-(i)nsert"           )                ;;
  ;; "oip"  '(org-download-clipboard                       :which-key "(o-i)mage-(p)aste-clipboard" )                ;;
  ;; "oiP"  '(org-download-image                           :which-key "(o-i)mage-(P)aste-url"       )                ;;
  ;; "oid"  '(org-download-delete                          :which-key "(o-i)mage-(d)elete"          )                ;;
  ;; "oie"  '(org-download-edit                            :which-key "(o-i)mage-(e)dit"            )                ;;
  ;; "oir"  '(org-download-rename-at-point                 :which-key "(o-i)mage-download-(r)ename" )                ;;
  ;; "oit"  '(org-toggle-inline-images                     :which-key "(o-i)mage-(t)oggle"          )                ;;
  ;; "oib"  '(org-cite-insert                              :which-key "(o-i)nsert-(c)ite"           )                ;;
  ;; "oif"  '(org-footnote-new                             :which-key "(o-i)nsert-(f)ootnote"       )                ;;
  ;; "oiF"  '(org-footnote-action                          :which-key "(o-i)nsert-(F)ootnote-action")                ;;
  ;;                                                                                                                 ;;
  ;; "oisn"  '((lambda () (interactive) (setq org-image-actual-width '(800)))      :which-key "(o-i-s)ize-(n)ormal") ;;
  ;; "oisb"  '((lambda () (interactive) (setq org-image-actual-width '(1500)))     :which-key "(o-i-s)ize-(b)ig")    ;;
  ;; "oiss"  '((lambda () (interactive) (setq org-image-actual-width '(400)))      :which-key "(o-i-s)ize-(s)mall")  ;;
  ;;                                                                                                                 ;;
  ;; "oc"  '(org-capture                           :which-key "(o-c)apture"           )                              ;;
  ;; "oo"  '(org-open-at-point                     :which-key "(o-o)pen"              )                              ;;
  ;;                                                                                                                 ;;
  ;; ;;orgroams                                                                                                      ;;
  ;; "rl"  '(org-roam-buffer-toggle                :which-key "(r-l)toggle"           )                              ;;
  ;; "rL"  '(org-roam-buffer-display-dedicated     :which-key "(r-L)dedicated"        )                              ;;
  ;; "rf"  '(org-roam-node-find                    :which-key "(r-f)ind"              )                              ;;
  ;; "ri"  '(org-roam-node-insert                  :which-key "(r-i)nsert"            )                              ;;
  ;; "rI"  '(garid-custom/org-roam-node-insert-immediate        :which-key "(r-I)nsert-immediate"  )                              ;;
  ;;                                                                                                                 ;;
  ;; ;;org-roam-dailies                                                                                              ;;
  ;; "rn" '(org-roam-dailies-capture-today         :which-key "(r-daily-n)ew-capture" )                              ;;
  ;; "rr" '(org-roam-dailies-goto-today            :which-key "(r-daily-t)oday"       )                              ;;
  ;; "rt" '(org-roam-dailies-goto-tomorrow         :which-key "(r-daily-T)omorrow"    )                              ;;
  ;; "ry" '(org-roam-dailies-goto-yesterday        :which-key "(r-daily-y)esterday"   )                              ;;
  ;; "rD" '(org-roam-dailies-capture-date          :which-key "(r-daily-d)ate"        )                              ;;
  ;; "rd" '(org-roam-dailies-goto-date             :which-key "(r-daily-goto-(D)ate"  )                              ;;
  ;; "r>" '(org-roam-dailies-goto-next-note        :which-key "(r-daily->)next"       )                              ;;
  ;; "r<" '(org-roam-dailies-goto-previous-note    :which-key "(r-daily-<)prev")                                     ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;"rp"  '((lambda () (interactive)
  ;;          (find-file "~/roamnotes/20230329145157-gtd_projects_multi_steps.org"))
  ;;        :which-key "(r)oam-(p)roject")

  ;;"rw"  '((lambda () (interactive)
  ;;          (find-file "~/roamnotes/20220908065223-phd.org"))
  ;;        :which-key "(r-w)writing")

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "ruim"   '(org-roam-ui-mode :which-key "(r-ui)-(m)ode")      ;;
  ;;                                                              ;;
  ;; "Dn" '(denote-open-or-create :which-key "(D)e-(N)ote")       ;;
  ;; "DD"  '((lambda () (interactive)                             ;;
  ;;           (dired denote-directory))                          ;;
  ;;         :which-key "(D)enote-(D)ired")                       ;;
  ;;                                                              ;;
  ;; "Dr"  '(;;(lambda () (interactive) (dired denote-directory)) ;;
  ;;         denote-rename-file                                   ;;
  ;;         :which-key "(D)enote-(D)ired")                       ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;; org code movement                      ;;
  ;; "j"   '(org-next-block     :which-key "") ;;
  ;; "k"   '(org-previous-block :which-key "") ;;
  ;; "J"   '(org-next-link      :which-key "") ;;
  ;; "K"   '(org-previous-link  :which-key "") ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; "h"   '(describe-symbol :which-key "Describe-Sym")                                                                         ;;
  ;; "H"   '(describe-key    :which-key "Describe-Key")                                                                         ;;
  ;;                                                                                                                            ;;
  ;; "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4)) :which-key "(s)ys-number(l)ine-(4)")                 ;;
  ;; "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3)) :which-key "(s)ys-number(l)ine-(3)")                 ;;
  ;; "srf" '((lambda () (interactive) (recentf-open-files))                :which-key "(s-r)ecent-(f)iles")                     ;;
  ;; "st"  '(gry/open-term-at              :which-key "(s-t)erminal")                                                           ;;
  ;; "sT"  '(toggle-transparency           :which-key "(s-T)oggle-transparency")                                                ;;
  ;; ;;"sd"  '(gry/distraction-free-on       :which-key "(s-d)istraction-free-on")                                              ;;
  ;; ;;"sD"  '(gry/distraction-free-off      :which-key "(s-D)istraction-free-off")                                             ;;
  ;; "sns" '(crux-create-scratch-buffer    :which-key "(s-n)ew-(s)cratch-buf")                                                  ;;
  ;; ;;"ss"  '((lambda () (interactive) (shell-command "flameshot gui --path ~/Pictures/ss/"))     :which-key "(s-s)creenshot") ;;
  ;; "slm" '(scroll-lock-mode                                              :which-key "(s)croll-(l)ock-(m)ode")                 ;;
  ;; "scl"  '((lambda () (interactive)                                                                                          ;;
  ;;            (command-log-mode)                                                                                              ;;
  ;;            (global-command-log-mode)                                                                                       ;;
  ;;            (clm/open-command-log-buffer))                                                                                  ;;
  ;;          :which-key "(s-c)md-(l)og")                                                                                       ;;
  ;;                                                                                                                            ;;
  ;; "svl" '(global-display-fill-column-indicator-mode     :which-key "(s-v)ertical-(l)ine" )                                   ;;
  ;; "sw" '(whitespace-mode                                :which-key "(s-w)hitespace"      )                                   ;;
  ;;                                                                                                                            ;;
  ;; "sco" '(corfu-mode                                    :which-key "(s-c)orfu-(m)ode"    )                                   ;;
  ;; "se"  '(eglot                                         :which-key "(s-e)glot"           )                                   ;;
  ;; ;;"sim" '(set-input-mode                              :which-key "(s-i)nput-mode"      )                                   ;;
  ;; "sib" '(clone-indirect-buffer                         :which-key "(s-i)ndirect-(b)uffer")                                  ;;
  ;;                                                                                                                            ;;
  ;; "rg"  '(rg                                            :which-key "(r)ip-(g)rep"        )                                   ;;
  ;;                                                                                                                            ;;
  ;; "yn"  '(yas-new-snippet                               :which-key "(y)as-(n)ew"         )                                   ;;
  ;; "yv"  '(yas-visit-snippet-file                        :which-key "(y)as-(v)isit"       )                                   ;;
  ;; "yd"  '(yas-describe-tables                           :which-key "(y)as-(d)esc-table"  )                                   ;;
  ;; "yc"  '(consult-yasnippet                             :which-key "(y)as-(c)onsult"     )                                   ;;
  ;;                                                                                                                            ;;
  ;; "ce"  '(calc-embedded                                 :which-key "(c)alc-(e)mbedded"   )                                   ;;
  ;; "cF"  '(full-calc                                     :which-key "(c)alc-(F)ull"       )                                   ;;
  ;;                                                                                                                            ;;
  ;; "za"  '(garid-custom/align-regexp-and-untabify                         :which-key "(z)-reg-(a)lign"     )                                   ;;
  ;; "zr"  '(replace-regexp                                :which-key "(z)-reg-(r)eplace"   )                                   ;;
  ;; "zh" '(highlight-symbol-at-point                      :which-key "(z)-(h)ighlight"     )                                   ;;
  ;; "zH" '(unhighlight-regexp                             :which-key "(z)-(H)ighlight-off" )                                   ;;
  ;;                                                                                                                            ;;
  ;; ;;"gp"  '(hydra-garid_gtd_step1_is_actionable/body      :which-key "(g)pt-(p)rocessing"  )                                 ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  )
#+end_src

#+RESULTS:

** COMMENT the other keybinding
#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Secondary leader key ;;                     ;;
;; (general-create-definer rune/leader-keys-other ;;
;;   :keymaps       '(normal insert visual emacs) ;;
;;   :prefix        "M-SPC"                       ;;
;;   :global-prefix "C-M-SPC")                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rune/leader-keys-other

;; "M-SPC"  '(comint-dynamic-complete-filename  :which-key "com"			)
#+end_src
* System:
** Recent files
#+begin_src emacs-lisp
;; recent files configuration
(recentf-mode 1)
(setq
 recentf-max-menu-items  30
 recentf-max-saved-items 30)
#+end_src
** COMMENT Sys term open
#+begin_src emacs-lisp
(defun gry/open-term-at ()
  (interactive)
  (shell-command (concat "term-at " buffer-file-name)))
#+end_src

term-at shell script
#+begin_src shell :tangle no
#!/bin/bash

# Open System termianl $TERMINAL at $1:
# nohup for exitting terminal that executed this script
# other wise terminal that executed this script just hangs there

# if $1 is directory; -> cd to this dir
if [[ -d $1 ]]; then             
	notify-send "term-at" "Openning Terminal\n at: $1"
	cd "$1" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is file; -> cd to parent dir
elif [[ -f $1 ]]; then
	notify-send "term-at" "Openning Terminal\n near: $1"
	cd "$(dirname "$1")" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is neither directory nor file -> fail
else
	notify-send "term-at" "$1\nwas not found\nOpening at Home"
	st || return 1
	return 0
fi
#+end_src
** Make long file faster?
[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][this article]]

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)
;; I may need to disable the line-display on org mode

#+end_src

* Dired
** Change ls in bsd:
#+begin_src emacs-lisp
(when (eq system-type 'berkeley-unix)
  (setq insert-directory-program "gls"))

;; cna be include ~:if .....~ in usepackage below
#+end_src
** Core dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :hook ((dired-mode . denote-dired-mode)
         (dired-mode . dired-omit-mode))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer
    (kbd "C-s") 'dired-omit-mode ;; same keybinding with my lf config
    " " 'nil
    (kbd "N") 'mkdir)
  )
#+end_src
** Icons - Dired
#+begin_src emacs-lisp
(use-package all-the-icons
  :config
  (add-to-list
   'all-the-icons-extension-icon-alist
   '("m"  all-the-icons-fileicon "matlab"  :face all-the-icons-orange)))

(use-package all-the-icons-dired)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
** Dired additionals
I don't use these not much  
#+begin_src emacs-lisp
(use-package dired-single)
(use-package dired-sidebar)
(use-package dired-preview)
#+end_src
* Misc Packages
** crux
#+begin_src emacs-lisp
(use-package crux)
#+end_src
** command-log-mode
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
** format-all
#+begin_src emacs-lisp
(use-package format-all)
#+end_src
** popper
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type)
         ;;:map popper-mode-map
         ;;("ESC" . quit-window)
         )
  :init
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "\\*eldoc\\*"
                                   "\\*xref\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   help-mode
                                   compilation-mode))
  (popper-mode      +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src

** emacs-everywhere
#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src
** graphviz
#+begin_src emacs-lisp
(use-package graphviz-dot-mode)
#+end_src
* COMMENT Unused
** COMMENT Mail & contacts:
*** COMMENT mu4e
#+begin_src emacs-lisp
;; (delete 'mu4e evil-collection-mode-list)
;; (delete 'mu4e-conversation evil-collection-mode-list)

(require 'mu4e)

;; default
(setq mu4e-maildir
      "/home/garid/.local/share/mail/garidzorigoo@gmail.com")

(setq mu4e-get-mail-command "mailsync")
(setq mu4e-drafts-folder "/[Gmail]/Drafts")
(setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
(setq mu4e-trash-folder  "/[Gmail]/Trash")

;; dont save message to Sent msg, GMail/IMAP will take care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
(setq mu4e-maildir-shortcuts
      '(("/INBOX"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; something about ourselves
;; I don't use a signature...
(setq
 user-mail-address "garidzorigoo@gmail.com"
 user-full-name    "Garid Z."
 message-signature "Garid Z."
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type  'ssl)
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
*** COMMENT notmuch
#+begin_src emacs-lisp
(use-package notmuch)
#+end_src
*** COMMENT org-contacts
#+begin_src emacs-lisp
(setq mu4e-org-contacts-file "/home/garid/roamnotes/20230417200051-org_contacs.org")
(add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
(add-to-list 'mu4e-view-actions    '("org-contact-add" . mu4e-action-add-org-contact) t)
#+end_src
** COMMENT browser
#+begin_src emacs-lisp
;; (setq browse-url-browser-function 'browse-url-chromium)
;; (defun gry/open-html-in-browser ()
;;   (interactive) (shell-command (concat "brave " buffer-file-name)))
#+end_src
** COMMENT eww web browser
#+begin_src emacs-lisp
(setq
  browse-url-browser-function 'eww-browse-url ; Use eww as the default browser
  shr-use-fonts  nil                          ; No special fonts
  shr-use-colors nil                          ; No colours
  shr-indentation 2                           ; Left-side margin
  shr-width 85                                ; Fold text to 85 columns
  eww-search-prefix "https://lite.duckduckgo.com/lite/?q=")    ; Use another engine for searching
#+end_src
** COMMENT mastadon
#+begin_src emacs-lisp
(use-package mastodon
  :ensure t
  :config
  (mastodon-discover))
(setq mastodon-instance-url "https://emacs.ch"
      mastodon-active-user "garid3000")
#+end_src
** COMMENT simple-httpd
#+begin_src emacs-lisp
(use-package simple-httpd
  :ensure t)
#+end_src
** COMMENT translate
#+begin_src emacs-lisp
(use-package go-translate)
(setq gts-translate-list '(("en" "ja")))
(setq gts-default-translator
      (gts-translator
       :picker	(gts-prompt-picker)
       :engines (list (gts-bing-engine) (gts-google-engine))
       :render	(gts-buffer-render)))
#+end_src
** COMMENT writeroom
#+begin_src emacs-lisp
(use-package writeroom-mode
  :ensure t
  :bind (:map writeroom-mode-map
              ("<backspace>" . ignore) ("<deletechar>"   . ignore)
              ("<delete>"    . ignore) ("<M-backspace>"  . ignore)
              ("<M-DEL>"     . ignore) ("<up>"           . ignore)
              ("<down>"      . ignore) ("<left>"         . ignore)
              ("<right>"     . ignore)))


(use-package writeroom-mode
  :ensure t
  :custom ((setq org-hyperscheduler-readonly-mode nil)))
#+end_src
** COMMENT spray
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode)))
#+end_src
** COMMENT write good
#+begin_src emacs-lisp
(add-to-list 'load-path "/home/garid/.config/emacs/writegood-mode")
(use-package writegood-mode)
#+end_src
** COMMENT Motionwindon
#+begin_src emacs-lisp
(use-package ace-window)
#+end_src
** COMMENT academic
#+begin_src emacs-lisp
(use-package academic-phrases)
#+end_src
** COMMENT hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
** COMMENT emacs restart
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src
** COMMENT consult-dir
I maybe will replace with something like zoxide
#+begin_src emacs-lisp
(use-package consult-dir)
#+end_src
* Finish Notifier
#+begin_src emacs-lisp
(call-process-shell-command "notify-send \"Emacs\" \"Emacs server has inialized\" &") 
#+end_src

* COMMENT Custom set variable:
#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ignored-local-variable-values
   '((eval setq org-download-image-dir
	   (concat "./od-imgs/"
		   (file-name-base buffer-file-name)))))
 '(package-selected-packages
   '(consult-eglot laas zoom zig-mode xelb writeroom-mode which-key vterm vertico-posframe use-package undo-fu typescript-mode tree-sitter-langs toc-org tmr svg-tag-mode sudo-utils sr-speedbar sqlite spray shrink-path selectric-mode scad-mode rust-mode ripgrep rg restart-emacs rainbow-delimiters pyvenv python-x python-mode prescient ppp popup-kill-ring popper pfuture ox-hugo org-web-tools org-tree-slide org-tanglesync org-sidebar org-present org-pomodoro org-noter-pdftools org-hyperscheduler org-fragtog org-edna org-download org-contrib org-contacts org-bullets org-auto-tangle org-agenda-property orderless olivetti ob-tmux ob-rust notmuch nord-theme no-littering multi-term mew matlab-mode mastodon marginalia macrostep latex-math-preview kind-icon keyfreq jupyter ivy-posframe ibuffer-sidebar hydra highlight-indentation hide-lines helpful gtags-mode gruvbox-theme graphviz-dot-mode grammarly go-translate go-mode gnuplot ggtags general geiser-mit format-all forge flyspell-lazy flymake-python-pyflakes flycheck-aspell evil-tex evil-terminal-cursor-changer evil-org evil-nerd-commenter evil-collection eterm-256color eshell-git-prompt eradio emms-player-simple-mpv embark-consult emacsql-sqlite emacs-everywhere elfeed-score eglot edwina dumb-jump dracula-theme dired-single dired-sidebar dired-open dired-hide-dotfiles desktop-environment deft darkroom csv-mode crux corfu-terminal corfu-doc consult-yasnippet consult-org-roam company-ctags company-box command-log-mode citar-org-roam citar-embark cfrs cdlatex bui browse-kill-ring bibtex-completion auto-package-update async-await arduino-mode all-the-icons-dired all-the-icons-completion agtags ace-window 2048-game))
 '(safe-local-variable-values
   '((eval setq org-download-image-dir
	   (concat "./"
		   (file-name-base buffer-file-name))))))
#+end_src
* Custom set variable:
[[https://www.youtube.com/watch?v=tw2-rI2bxSg&t=1s][Initial idea from Systems crafter]], [[https://emacs.stackexchange.com/a/18785/38482][and code structure from this answer on emacs stackexchange]], and need to set ~enble-local-eval~ to ~t~ ()

#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values '(dired-omit-files         . "\\`[.]?#\\|\\`[.][.]?\\'\\|\\.html\\'\\|\\.tex\\'"    )) ;; <-- wokr
;;??(add-to-list 'safe-local-variable-values '(org-download-image-dir   . (concat "./od-imgs/" (file-name-base buffer-file-name))))
(add-to-list 'safe-local-variable-values '(org-download-heading-lvl . nil                                                    ))
;;(put 'org-download-image-dir             'safe-local-variable #'stringp)  <--- didn't work 
;;(put 'org-download-image-dir             'safe-local-variable (lambda (_) t)) <--didn' work

;(setq enable-local-eval t)
;;(setq enable-local-eval :safe) ;;https://emacs.stackexchange.com/a/38/38482
#+end_src
