#+startup:      show2levels
#+title:        My Emacs Configuration
#+author:       Garid Z.
#+creator:      Garid Z.
#+email:        garidzorigoo@gmail.com
#+auto_tangle:  t
#+property:     header-args :tangle init.el
#+setupfile:    ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org
#+options:      toc:t tags:nil  todo:t  tasks:t
#+html_head:    <link rel="stylesheet" type="text/css" href="https://unpkg.com/chota"/>


* From shell you can run make run:
#+begin_src makefile :eval no :tangle Makefile
# make run to extract init.el from init.org from shell
run:
	emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "init.org")'
	chmod +x 'garid/edit_img.sh'
	chmod +x 'garid/open_external_term.sh'
	git submodule foreach git pull origin master

refresh-packages:
	emacs --batch --eval "(setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\") (\"elpa\" . \"https://elpa.gnu.org/packages/\") (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")))" --eval "(package-refresh-contents)"
#+end_src

* Package manager:
** Package Repositories 
I'm pulling packages from following 3 places (not sure that I need all three): 

1. [[https://melpa.org/packages/]]
2. [[https://elpa.gnu.org/packages/]]
3. [[https://elpa.nongnu.org/nongnu/]]

#+begin_src emacs-lisp
;; Package repos
(setq package-archives
      '(("melpa"   . "https://melpa.org/packages/"     )
        ("elpa"    . "https://elpa.gnu.org/packages/"  )
        ("nongnu"  . "https://elpa.nongnu.org/nongnu/" )))
#+end_src

** Initialize use-package manager
#+begin_src emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)
#+end_src

** Straight.el initialization
:PROPERTIES:
:ID:       2bc28375-3cf3-4784-8a34-ecb1a2b0c24a
:END:
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Vi-movement and it's friends
** =undo-tree=
undo-tree is Emacs's undo & redo helper with built-in tree graph of versions.

#+begin_src emacs-lisp
(use-package undo-tree
  :delight " udt"
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src

** =evil=: vi-movements
#+begin_src emacs-lisp
;; Vim Bindings
(use-package evil
  :ensure t
  ;; :bind (;; ("<escape>" . keyboard-escape-quit  )  commented on nov21
  ;;        ;; ("M-j"      . evil-scroll-line-down )  C-e
  ;;        ;; ("M-k"      . evil-scroll-line-up   )  C-y
  ;;        ;; ("M-d"      . evil-scroll-page-down )  G
  ;;        ;; ("M-u"      . evil-scroll-page-up   )  g g
  ;;        )
  :custom
  (evil-want-keybinding     nil)
  (evil-undo-system         'undo-tree)
  (evil-want-C-i-jump       t)
  ;; evil-want-C-i-jump     nil       ;; test I may need jumpy back and forth

  ;; not much related with evil but related to movement
  (scroll-step           1)
  (scroll-margin         7)
  (scroll-conservatively 9999)

  :config
  ;;(evil-define-key 'normal  org-mode-map   (kbd "TAB") #'org-cycle) ;; for org-cycle (tab) working for terminal
  (evil-define-key 'normal 'prog-mode-map  (kbd "K")   'eldoc)      ;; or 'eldoc-box-help-at-point
  (evil-mode 1))
#+end_src
** =evil-collection=: vi-movements everywhere
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src
** =evil-surround=: easily surround selected region
I sometimes use. It can wrap (visually) selected region with quotation mark or parenthesis.

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :hook
  (latex-mode . (lambda ()  ;; adds to latex-mode-hook
                  (push '(40  . ("\\left("       . "\\right)"  )) evil-surround-pairs-alist)
                  (push '(123 . ("\\left\\{"     . "\\right\\}")) evil-surround-pairs-alist)
                  (push '(91  . ("\\left["       . "\\right]"  )) evil-surround-pairs-alist)
                  (push '(47  . ("\\frac{"       . "}{ }"      )) evil-surround-pairs-alist)
                  (push '(63  . ("\\frac{ }{"    . " }"        )) evil-surround-pairs-alist)
                  (push '(94  . ("{"             . "}^{ }"     )) evil-surround-pairs-alist)
                  (push '(98  . ("\\boxed{"      . "}"         )) evil-surround-pairs-alist)
                  (push '(95  . ("\\underbrace{" . "}_{ }"     )) evil-surround-pairs-alist)
                  (push '(45  . ("\\overbrace{"  . "}_{ }"     )) evil-surround-pairs-alist)))

  :config
  (global-evil-surround-mode)
  ;; (add-hook 'latex-mode-hook (lambda ()
  ;;                              (push '(40  . ("\\left("    . "\\right)"   )) evil-surround-pairs-alist)
  ;;                              (push '(123 . ("\\left\\{"  . "\\right\\}" )) evil-surround-pairs-alist)
  ;;                              (push '(91  . ("\\left["    . "\\right]"   )) evil-surround-pairs-alist)
  ;;                              (push '(47  . ("\\frac{"    . "}{ }"       )) evil-surround-pairs-alist)
  ;;                              (push '(63  . ("\\frac{ }{" . " }"         )) evil-surround-pairs-alist)
  ;;                              (push '(94  . ("{"          . "}^{ }"      )) evil-surround-pairs-alist)
  ;;                              (push '(98  . ("\\boxed{"   . "}"          )) evil-surround-pairs-alist)
  ;;                              (push '(95  . ("\\underbrace{"   . "}_{ }" )) evil-surround-pairs-alist)
  ;;                              (push '(45  . ("\\overbrace{"    . "}_{ }" )) evil-surround-pairs-alist)
  ;;                              ))
  )
#+end_src

** =evil-textobj-tree-sitter=: tree-sitter based visual selection:
#+begin_src emacs-lisp
(use-package evil-textobj-tree-sitter
  :ensure t
  :after evil
  :config
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer" ))
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner" ))
  (define-key evil-inner-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"    ))
  (define-key evil-outer-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"    ))
  (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))
#+end_src

* Theme & colors
** Fonts
#+begin_src emacs-lisp
(when (member "Iosevka" (font-family-list))
  (set-face-attribute 'default        nil :font "Iosevka" :height 120)
  (set-face-attribute 'fixed-pitch    nil :family "Iosevka"))

(when (member "Iosevka Term SS06" (font-family-list))
  (set-face-attribute 'default        nil :font "Iosevka Term SS06" :height 120)
  (set-face-attribute 'fixed-pitch    nil :family "Iosevka Term SS06"))

(when (member "Iosevka Aile" (font-family-list))
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile" :height 1.18))
#+end_src

** Theme
#+begin_src emacs-lisp :results none
(use-package uwu-theme
  :ensure t
  :config
  (enable-theme 'uwu)

  ;; not related with this theme itself but generally relates to generally
  (set-face-background   'mode-line          "#2B3260")
  (set-face-background   'mode-line-inactive "#2B3244")
  (scroll-bar-mode       -1)        ; Disable visible scrollbar
  (tool-bar-mode         -1)        ; Disable the toolbar
  (tooltip-mode          -1)        ; Disable tooltips
  (menu-bar-mode         -1)        ; Disable the menu bar
  (setq-default tab-width 4)
  ;; (set-fringe-mode 15)         ; Give some breathing room

  (setq-default indent-tabs-mode nil)
  ;; Align with spaces only
  (defadvice align-regexp (around align-regexp-with-spaces)
    "Never use tabs for alignment."
    (let ((indent-tabs-mode nil)) ad-do-it))
  (ad-activate 'align-regexp)
  )
#+end_src
** =delight=
#+begin_src emacs-lisp
(use-package delight
  :ensure t)
#+end_src

** =evil-terminal-cursor-changer=:
#+begin_src emacs-lisp :results none
(use-package evil-terminal-cursor-changer
  :ensure t
  :config (evil-terminal-cursor-changer-activate))
#+end_src

** =display-line-numbers=: displaying number
#+begin_src emacs-lisp
;; setting line
(use-package display-line-numbers
  :ensure t
  :custom
  (display-line-numbers-type 'relative)
  (visible-bell              t)
  ;;(setq display-line-numbers-type 'relative)
  ;; (setq visible-bell t)
  :config
  (global-display-line-numbers-mode -1)
  (global-hl-line-mode               1)
  )
#+end_src

* Mini-buffer completion, selection, suggestion
** =vertico=
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ("C-j" . vertico-next          ) ("M-j" . vertico-next        )
              ("C-k" . vertico-previous      ) ("M-k" . vertico-previous    )
              ("C-f" . vertico-exit          ) ("M-f" . vertico-exit        )
              ("C-u" . vertico-scroll-up     ) ("M-u" . vertico-scroll-up   )
              ("C-d" . vertico-scroll-down   ) ("M-d" . vertico-scroll-down )
              ("M-p" . vertico-previous      ) ("M-n" . vertico-next        )
              ("M-h" . vertico-exit          )
              ("M-q" . vertico-quick-insert  ) ("C-q" . vertico-quick-exit  ))
  :init
  (require 'vertico-quick)
  :custom
  (vertico-cycle     t  )
  (vertico-count     15 )
  (vertico-resize    nil)
  :config
  (vertico-mode))
#+end_src
** =marginalia=
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy
                           marginalia-annotators-light nil))
  :init (marginalia-mode))
#+end_src
** =consult=: consulting
#+begin_src emacs-lisp
(use-package consult :ensure t)
#+end_src
** =orderless=: orderless completion
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless flex))
  '((file (styles basic partial-completion))))

;;(completion-styles '(orderless basic))
;; (completion-category-overrides
#+end_src
** =embark=: interacting with completion entries
#+begin_src emacs-lisp
(defun garid/embark-org-insert-ref-of-tbl-fig-src-eq (x)
  (interactive "sSearch Term: ")
  (insert
   (format "[[%s]]"
           (nth 1 (split-string
                   (replace-regexp-in-string "[^[:alnum:-]]" "" x)
                   ;;(replace-regexp-in-string "[^[:alnum:]_-\\: #+]" "" x)
                   )))))

(defun garid/embark-org-insert-ref-to-label-inside-eq (input-string)
  (interactive "sSearch Term: ")
  (insert
   (format "\\ref{%s}"
           (if (string-match "\\\\label{\\([^}]+\\)}" input-string)
               (match-string 1 input-string)
             nil
             ))))


(use-package embark
  :ensure t
  :bind (("C-."    . embark-act                                     )
         ("M-."    . embark-dwim                                    )
         ("C-h B"  . embark-bindings                                )

         :map embark-general-map
         ("G"      . my/embark-google-search                        )
         ("t"      . garid/embark-org-insert-ref-of-tbl-fig-src-eq  )
         ("e"      . garid/embark-org-insert-ref-to-label-inside-eq ))

  :init
  (setq prefix-help-command #'embark-prefix-help-command))
#+end_src

** =savehist=:
#+begin_src emacs-lisp
(use-package savehist
  :ensure t
  :config (savehist-mode))
#+end_src
* Org
** =org=: org-mode configuration
:PROPERTIES:
:ID:       20241013T000803.808543
:END:
#+caption: org config
#+name: lst_org
#+begin_src emacs-lisp :eval no
(use-package org
  :demand
  :delight " org"
  :bind (:map
         org-mode-map
         ("C-S-j" . org-next-visible-heading     )
         ("C-S-k" . org-previous-visible-heading ))

  ;; :hook (org-mode . garid-custom/org-mode-hooked-func)
  :custom
  ;; theme/styling ...............................................................................
  (org-ellipsis                     " ▼"   )
  (org-hide-emphasis-markers         t      )
  (org-image-actual-width            '(800) )
  (org-startup-folded         "show2levels" ) ;; fold
  (org-src-fontify-natively          t      )
  (org-highlight-latex-and-related          '(latex entities native)       )

  ;; org-src
  (org-src-tab-acts-natively         t      )  ;; org-src
  (org-src-preserve-indentation      nil    )  ;; org-src
  (org-edit-src-content-indentation  0      )  ;; org-src

  ;; openning file links ..........................................................................
  (org-file-apps '((auto-mode                  . emacs                       )
                   ;; ("\\.html\\'"            . "brave   \"%s\""            )
                   ;; ("\\.html\\'"            . "thorium-browser   \"%s\""  )
                   ("\\.gif\\'"                . "mpv     \"%s\""            )
                   ("\\.mp4\\'"                . "mpv     \"%s\""            )
                   ("\\.png\\'"                . "sxiv    \"%s\""            )
                   ("\\.svg\\'"                . "inkview \"%s\""            )
                   ("\\.jpeg\\'"               . "sxiv    \"%s\""            )
                   ("\\.jpg\\'"                . "sxiv    \"%s\""            )
                   ("\\.pdf\\'"                . "sioyek  \"%s\""            )
                   ("\\.pdf::\\([0-9]+\\)?\\'" . "sioyek  \"%s\" --page %1"  )
                   ("\\.mkv\\'"                . "mpv     \"%s\""            )
                   ("\\.xopp\\'"               . "xournalpp \"%s\""          )))

  ;; todo and calendar like ....................................................................
  (org-todo-keywords      '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "PRJT(p)" "VAGUE(v)"
                                      "|"       "DONE(d)" "CNCL(c)")))

  (org-todo-keyword-faces '(("TODO"  . org-warning      )
                            ("PRJT"  . "tomato"         )
                            ("NEXT"  . "orange"         )
                            ("WAIT"  . "gold"           )
                            ("DONE"  . "dim gray"       )
                            ("VAGUE" . "medium purple"  )
                            ("CNCL"  . (:foreground "gray30" :weight bold))))

  (org-log-done              t)
  (org-tags-column         -90)   ;; how many spaces left padding for tags
  (org-tag-alist           '((:startgroup . nil)
                             ("@rsch" . ?r) ("@bps" . ?w) ("@home" . ?h)
                             (:endgroup . nil)
                             ("psm"  . ?p) ("4bc"   . ?4) ("idea"     . ?i)
                             ("lit"  . ?l) ("yak"   . ?y) ("tool"     . ?T)
                             ("tdbt" . ?t) ("rndm"  . ?R) ("meet"     . ?m)
                             ("qstn" . ??) ("prjt"  . ?P) ("msg/mail" . ?M)
                             ("Life" . ?L) ("write" . ?W) ("errand"   . ?e)
                             ("hkdn" . ?H) ("read" . ?R)
                             ))

  (org-structure-template-alist
   '(("ba" . "abstract")
     ("mk" . "src makefile :tangle no")
     ("sq" . "sqlite")
     ("py2" . "src python :session pySess2 :results output :exports both :eval no-export")
     ("py1" . "src python :session pySess1 :results output :exports both :eval no-export")
     ("py" . "src python")
     ("do1" . "src src dot :file (concat org-download-image-dir \"/tmp.svg\") :exports results :eval no-export")
     ("do" . "src dot")
     ("te" . "src text")
     ("sh" . "src sh :eval no-export :shebang \"#!/bin/sh\"")
     ("go1" . "src go :exports both :eval never-export")
     ("go" . "src go")
     ("el" . "src emacs-lisp")
     ("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("e" . "example")
     ("E" . "export")
     ("h" . "export html")
     ("l" . "export latex")
     ("q" . "quote")
     ("s" . "src")
     ("v" . "verse")))
  :config
  (plist-put    org-format-latex-options   :scale 1.7      )    ;; latex equation previewing
  (add-to-list 'org-latex-packages-alist   '("" "listings" ))
  (add-to-list 'org-latex-packages-alist   '("" "color"    ))

  (org-babel-do-load-languages
   'org-babel-load-languages '((python     . t) (emacs-lisp . t)
                               (latex      . t) (shell      . t)
                               (dot        . t) (makefile   . t)
                               (sqlite     . t) (gnuplot    . t)
                               (nim        . t) (plantuml   . t)
                               (maxima     . t) (calc       . t)
                               (awk        . t) (go         . t)
                               (asymptote  . t) (ditaa      . t)
                               (nix        . t) (lua        . t)
                               ;; (asymptote  . t)
                               ))

  (font-lock-add-keywords 'org-mode
                          '(("\\(\\(?:\\\\\\(?:label\\|ref\\|eqref\\)\\)\\){\\(.+?\\)}"
                             (1 font-lock-keyword-face)
                             (2 font-lock-constant-face))))
  ;; image backgroud for transparent images
  (defcustom org-inline-image-background nil
    "The color used as the default background for inline images. When nil, use the default face background."
    :group 'org
    :type '(choice color (const nil)))

  (defun create-image-with-background-color (args)
    "Specify background color of Org-mode inline image through modify `ARGS'."
    (let* ((file (car args))
           (type (cadr args))
           (data-p (caddr args))
           (props (cdddr args)))
      ;; Get this return result style from `create-image'.
      (append (list file type data-p)
              (list :background (or org-inline-image-background (face-background 'default)))
              props)))

  (advice-add 'create-image :filter-args
              #'create-image-with-background-color)

  (setq org-inline-image-background "white")


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; setting latex preview
  (setq org-preview-latex-default-process 'imagemagick)
  (setf (plist-get (cdr (assq 'imagemagick org-preview-latex-process-alist)) :latex-compiler)
        '("xelatex -interaction nonstopmode -output-directory %o %f"))
  )
#+end_src

** =org-attach=
#+begin_src emacs-lisp
(use-package org-attach
  :after org
  :ensure nil
  :custom
  (org-id-method                       'ts)
  (org-attach-id-to-path-function-list '(my/org-attach-dir-calculator
                                          org-attach-id-ts-folder-format
                                          org-attach-id-uuid-folder-format))
  :config
  (defun my/org-attach-dir-calculator (id)
    "id"
    (and (< 9 (length id))
         (buffer-file-name)
         (format "%s/subtree_id_%s"
                 (car                     ;; 4. "20241002T190027"
                  (split-string           ;; 3. ( "20241002T190027"  "denote-getting-id-of-current-file__elisp_org" )
                   (file-name-base        ;; 2. "20241002T190027--denote-getting-id-of-current-file__elisp_org.org"
                    (buffer-file-name))   ;; 1. "/home/garid/BrainDump/denote/20241002T190027--denote-getting-id-of-current-file__elisp_org.org"
                   "--"))                 ;;     3. split-string related
                 id)))


  (defun my/org-attach-dir (input-fname)
    ""
    (concat
     "data/"
     (file-name-as-directory
      (my/org-attach-dir-calculator (org-id-get-create)))
     input-fname))

  ;; (setq org-id-method 'ts)
  ;; (setq org-attach-id-to-path-function-list
  ;;       '(my/org-attach-dir-calculator
  ;;         org-attach-id-ts-folder-format
  ;;         org-attach-id-uuid-folder-format))
  )
#+end_src

** org-babel languages related
#+begin_src emacs-lisp
;;(use-package plantuml-mode
;;  :custom
;;  (plantuml-executable-path "plantuml")
;;  (plantuml-default-exec-mode 'executable))


(use-package ob-plantuml
  :ensure nil
  :after (org)
  :config
  ;;(org-plantuml-jar-path        "/home/garid/.config/emacs/plantuml.jar" )
  (setq org-plantuml-executable-path "plantuml")
  (setq org-plantuml-exec-mode 'plantuml)
  )
(use-package ob-nim       :after org)
(use-package ob-go        :after org)
(use-package ob-asymptote :after org)
(use-package ob-nix       :after org)
#+end_src

** =org-bullet=: changing bullets in org file
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :after  org
  :hook   (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list
           '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ")))
#+end_src
* Org Zettelkasten like (roam & denote)
#+begin_src emacs-lisp
(setq garids-brain-dumping-directory "~/BrainDump/")
#+end_src

** =denote=: Prot's simple noting package
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :custom
  (denote-excluded-files-regexp "export_.*")
  (denote-directory       (concat garids-brain-dumping-directory "denote"))
  (denote-known-keywords  '(  "finance"  "failures"  "philosophy"        ))
  (denote-templates       '((biblio . "* Abstract\n\n* Review")
                            (plain  . nil)))

  :config
  (defun garid-custom/denote-node-insert-immediate(start end)
    ;; create emtpy denote note on the regions
    (interactive "r")
    (let* ((tmp-str-marked              (string-trim (buffer-substring start end) ))
           (tmp-cur-time-of-this-note  (current-time)))
      (delete-region start end)
      (denote tmp-str-marked '("future") nil "tmp"
              (format-time-string "%Y-%m-%d %H:%M:%S" tmp-cur-time-of-this-note))

      (save-buffer)
      (kill-buffer)

      (insert (format "[[denote:%s][%s]]"
                      (format-time-string "%Y%m%dT%H%M%S" tmp-cur-time-of-this-note)
                      tmp-str-marked
                      ))
      ))

  )
#+end_src

** =consult-denote=: consulting with denote
#+begin_src emacs-lisp
(use-package consult-denote :ensure t)
#+end_src
** =citar=: citation
#+begin_src emacs-lisp
(use-package citar
  :after org
  :no-require
  :custom
  (org-cite-global-bibliography (list (concat (file-name-as-directory denote-directory)
                                              "20220101T010101--references__study.bib")))
  (org-cite-insert-processor    'citar                        )
  (org-cite-follow-processor    'citar                        )
  (org-cite-activate-processor  'citar                        )
  (citar-bibliography            org-cite-global-bibliography )
  (bibtex-dialect               'biblatex                     )
  (citar-library-paths           (list (concat (file-name-as-directory denote-directory) "lit/")) )
  (citar-file-open-functions '(("html" . citar-file-open-external)
                               ("pdf" . citar-file-open-external)
                               (t . find-file)))
  :hook
  (org-mode   . citar-capf-setup)
  (LaTeX-mode . citar-capf-setup)
  )
#+end_src
** =citar-denote=: citation in denote
#+begin_src emacs-lisp
(use-package citar-denote
  :ensure t
  :demand t ;; Ensure minor mode loads
  :after (:any citar denote)
  :custom
  ;; Package defaults
  (citar-denote-file-type             'org                )
  (citar-denote-keyword               "bib"               )
  (citar-denote-signature             nil                 )
  ;;(citar-denote-subdir              nil                 )  
  (citar-denote-subdir                "litnotes"          )  ;; usefull
  (citar-denote-template              'biblio             )  ;; 'biblio is defined at denote
  (citar-denote-title-format          "author-year-title" )
  (citar-denote-title-format-andstr   "and"               )
  (citar-denote-title-format-authors  1                   )
  (citar-denote-use-bib-keywords      nil                 )
  :preface
  (bind-key "C-c w n" #'citar-denote-open-note)
  :init
  (citar-denote-mode)
  ;; Bind all available commands
  :bind (("C-c w d" . citar-denote-dwim                 )
         ("C-c w e" . citar-denote-open-reference-entry )
         ("C-c w a" . citar-denote-add-citekey          )
         ("C-c w k" . citar-denote-remove-citekey       )
         ("C-c w r" . citar-denote-find-reference       )
         ("C-c w l" . citar-denote-link-reference       )
         ("C-c w f" . citar-denote-find-citation        )
         ("C-c w x" . citar-denote-nocite               )
         ("C-c w y" . citar-denote-cite-nocite          )
         ("C-c w z" . citar-denote-nobib                )))
#+end_src
* Org Time managements
** =calendar=
#+begin_src emacs-lisp
(use-package calendar
  :ensure nil
  :custom
  (calendar-week-start-day 1))
#+end_src
** =org-agenda=: the agenda
#+begin_src emacs-lisp :results none
(use-package org-agenda
  :after   org ;; should I write after calendar?
  :ensure   nil
  ;; :bind (:map org-agenda-mode-map
  ;;             ("j" . evil-next-line    )
  ;;             ("k" . evil-previous-line)
  ;;             )
  :custom
  (org-agenda-files '("~/BrainDump/gtd/main.org"))
  (org-agenda-span 90)
  (org-agenda-custom-commands
   '(("i" "Inbox"                tags-todo "+TODO=\"VAGUE\"" ((org-agenda-files (file-expand-wildcards "~/BrainDump/gtd/inbox.org"))))
     ("n" "Next actions"         tags-todo "+TODO=\"TODO\"")
     ("p" "Projects"             tags-todo "+TODO=\"PRJT\"")
     ("w" "Waiting"              tags-todo "+TODO=\"WAIT\"")
     ("s" "Someday"              tags-todo "+TODO=\"TODO\"|TODO=\"PRJT\"" ((org-agenda-files (file-expand-wildcards "~/BrainDump/gtd/someday.org"))))
     ("o" "Actions and Projects" tags-todo "+TODO=\"TODO\"|TODO=\"PRJT\"")))

  (org-agenda-prefix-format '((agenda   . "  %-25:c%?-12t% s" )
                              (timeline . "  % s"             )
                              (todo     . "  %-12:c"          )
                              (tags     . "  %-25:c"          )
                              (search   . "  %-12:c"          )))

  ;;(org-agenda-tags-column -120)
  ;;(org-agenda-tags-column -90)
  (org-agenda-tags-column 'auto)
  (org-agenda-sorting-strategy '((agenda habit-down time-up priority-down category-keep)
                                 (todo priority-down todo-state-up category-keep)
                                 (tags priority-down todo-state-up category-keep)
                                 (search category-keep)))

  ;; M-x org-agenda # to show the stuck projects
  (org-stuck-projects '("+TODO=\"PRJT\"" ("TODO") nil "") )

  (org-refile-use-outline-path             'file)
  (org-outline-path-complete-in-steps      'nil)

  ;; (refile-targets                          (file-expand-wildcards "~/BrainDump/gtd/*.org"))
  ;; (org-refile-targets '(( refile-targets :todo . "PRJT" )))
  (org-refile-targets '(("~/BrainDump/gtd/main.org"      :maxlevel . 3)
                        ("~/BrainDump/gtd/someday.org"   :level    . 1)
                        ("~/BrainDump/gtd/reference.org" :maxlevel . 1)))


  (org-capture-templates
   '(("i" "Inbox"      entry (file          "~/BrainDump/gtd/inbox.org"           )  "* VAGUE %?\nAdded: %U\n"                                          :empty-lines 1 :prepend t)
     ("I" "Inbox from" entry (file          "~/BrainDump/gtd/inbox.org"           )  "* VAGUE %?\nAdded: %U\nFrom: %a"                                  :empty-lines 1 :prepend t)
     ("n" "Next"       entry (file+headline "~/BrainDump/gtd/main.org"    "Single")  "** NEXT  %?\nAdded: %U\n"                                         :empty-lines 1 :prepend t)
     ("p" "Project"    entry (file+headline "~/BrainDump/gtd/main.org"    "Project")  "* PRJT  %?\n:PROPERTIES:\n:CATEGORY: %^{Id}\n:END:\nAdded: %U\n" :empty-lines 1 :prepend t)
     ("s" "Someday"    entry (file+headline "~/BrainDump/gtd/someday.org" "Someday")  "* TODO  %?\nAdded: %U\n"                                         :empty-lines 1 :prepend t)
     ))

  :config
  (add-hook 'org-agenda-finalize-hook (lambda () (org-agenda-write "/tmp/current-agenda-text")))
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
  )
#+end_src
** =casual-agenda=: casual agenda based on transient
#+begin_src emacs-lisp
(use-package casual-agenda
  :ensure t
  :after org-agenda
  :bind (:map org-agenda-mode-map
         ("<f7>" . casual-agenda-tmenu)))
#+end_src
** =org-timeblock=: agenda to SVG
#+begin_src emacs-lisp
(use-package org-timeblock :after org)
#+end_src
* Org Exporting related
** =ox-reveal=
#+begin_src emacs-lisp
(use-package ox-reveal
  :after org
  :ensure t)
#+end_src
** =latex=
#+begin_src emacs-lisp
(use-package latex
  :ensure nil
  :config
  ;;(add-hook 'LaTeX-mode-hook (function (lambda() (set-input-method "TeQ-Math"))))
  (add-hook 'latex-mode-hook (function (lambda() (set-input-method "TeQ-Math")))))
#+end_src

** Latex related
#+begin_src emacs-lisp
(use-package auctex)
(use-package cdlatex)
#+end_src
** =ox=
ref: [[https://emacs.stackexchange.com/a/7989/38482][this answer on emacs-stackexchange]]

#+begin_src emacs-lisp
(use-package ox
  :ensure nil
  :after org
  :config
  (defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

  (defadvice org-export-output-file-name (before org-add-export-dir activate)
    "Modifies org-export to place exported files in a different directory"
    (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
        (progn
          (make-directory pub-dir)
          (make-symbolic-link "../data" (concat (file-name-as-directory pub-dir) "data")))
        )))
  )
#+end_src

** =ox-latex= 
#+begin_src emacs-lisp
(use-package ox-latex
  :ensure nil
  :after org
  :custom
  (org-latex-src-block-backend              'listings                                             )
  (org-latex-format-headline-function       'garid-custom/latex-formattig-headings                )
  (org-latex-active-timestamp-format         "\\textcolor{Brown}{%s}"                             )
  (org-latex-inactive-timestamp-format       "\\textcolor{Brown}{%s}"                             )
  (org-latex-pdf-process
   '("latexmk -shell-escape -f -xelatex -%latex -interaction=nonstopmode -output-directory=%o %f" ))
  ;; -output-driver=\"xdvipdfmx -z 0\"
  ;;'("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f" ))
  ;; (org-highlight-latex-and-related     '(latex script entities))
  ;; (org-highlight-latex-and-related      nil)
  :config
  (add-to-list 'org-latex-classes '("extarticle" "\\documentclass{extarticle}"
                                    ("\\section{%s}"       . "\\section*{%s}")
                                    ("\\subsection{%s}"    . "\\subsection*{%s}")
                                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                    ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                                    ("\\subparagraph{%s}"  . "\\subparagraph*{%s}")))

  ;; function -------------------------------------------------------------------------------------
  (defun garid-custom/latex-formattig-headings
      (todo todo-type priority text tags _info)
    "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
    (concat
     (and todo
          (format "{\\framebox{\\bfseries\\color{%s} %s}} "
                  (pcase todo-type
                    ('todo "olive") ('done "teal")
                    ;;('todo "Black") ('done "Brown")
                    )
                  todo))
     (and priority (format "\\framebox{\\#%c} " priority)) text
     (and tags
          (format "\\hfill{}\\textsc{%s}"
                  (mapconcat #'org-latex--protect-text tags ":")))))
  )
#+end_src

** =ox-html=
#+begin_src emacs-lisp
(use-package ox-html
  :ensure nil
  :after org
  :custom
  ;; (org-html-validation-link              nil) ;; Don't show validation link
  ;; (org-html-head-include-scripts         nil) ;; Use our own scripts
  ;; (org-html-head-include-default-style   nil) ;; Use our own styles
  (org-html-head  "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/chota\"/>")
  ;; org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
  ;; org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg.css\"/>"
  )
#+end_src

** =ox-publish=
#+begin_src emacs-lisp :exports code :results verbatim
(use-package ox-publish
  :ensure nil
  :after org
  :custom
  (org-publish-project-alist `(("denote: org -> html"
                                :base-directory ,(denote-directory)
                                ;; :base-directory "~/Pensieve/"
                                :recursive t
                                :publishing-function   org-html-publish-to-html
                                :publishing-directory ,(concat (denote-directory) "website")
                                :exclude ".*daily/.*org"  ;;; for excluding -daily
                                ;; :section-numbers nil
                                :section-numbers  org-export-with-section-numbers
                                :with-toc         t
                                :html_link_home  "index.html"
                                ;;                                 :html-preamble "<div id=\"navbar\"> <ul>
                                ;;   <div class=\"stork-wrapper\">
                                ;;     <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
                                ;;     <a href=\"..\">Up/Back</a>                           &nbsp;
                                ;;     <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
                                ;;     <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
                                ;;     <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
                                ;;     <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
                                ;;     <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
                                ;;     <input data-stork=\"federalist\" class=\"stork-input\" />
                                ;;     <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
                                ;;   </div>
                                ;; </ul>
                                ;; <hr>
                                ;; </div>
                                ;; <script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
                                ;; <script>
                                ;; stork.register(
                                ;;     'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
                                ;; )
                                ;; </script>
                                ;; "
                                ))
                             )
  )
#+end_src

** =htmlize= - source code syntax in html export
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t
  :config
  (add-hook 'htmlize-before-hook (lambda () (indent-bars-mode -1))))
#+end_src
* Org Misc:
** =org-download= package itself
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :after org
  :custom
  (org-download-display-inline-images  nil)
  (org-download-edit-cmd (concat user-emacs-directory "garid/edit_img.sh %s"))
  (org-download-heading-lvl nil)                                                                            ;;
  ;;:hook ((org-mode . my-org-download-set-dir))

  :config
  (org-download-enable))
#+end_src

** org-download editing shell script                                        :shell_script:
#+begin_src shell :tangle garid/edit_img.sh :shebang "#!/bin/sh"
file=$(readlink -f "$1")
ext="${file##*.}"

# create empty file if the file doesn't exist
if [ ! -f "$file" ]; then
    convert -size 480x320 xc:white "$file";
    echo "created new $file"
fi

# open image-editor based on the file's extension
case "$ext" in
	jpeg) gimp      "$file" ;;
	jpg)  gimp      "$file" ;;
	png)  gimp      "$file" ;;
	svg)  inkscape  "$file" ;;
	xopp) xournalpp "$file" ;;
esac
#+end_src

** =org-auto-tangle=
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :defer  t
  :after org
  :delight " oat"
  :custom (org-auto-tangle-default    nil)
  :hook (org-mode . org-auto-tangle-mode)
  )
#+end_src

** =org-transclusion=
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :after org
  :bind (:map org-mode-map
              ("<f12>"   . org-transclusion-add     )
              ("M-<f12>" . org-transclusion-add-all )
              ("<f11>"   . org-transclusion-mode    )))
#+end_src

** =org-contacts=
#+begin_src emacs-lisp
(use-package org-contacts
  :ensure t
  :after (org denote)
  :custom
  (org-contacts-files '("~/BrainDump/denote/20240802T185223--contacts__info.org")))
#+end_src
* Programming languages
** =python=
#+begin_src emacs-lisp
(use-package python
  :ensure nil
  :config
  (defun garid/nix-shel-python-path-reload ()
    ""
    (interactive)
    (if (file-exists-p "/tmp/current-nix-shell-python-path")
        (progn
          (setq python-shell-exec-path
                (list (string-trim (f-read "/tmp/current-nix-shell-python-path"))))
          (message "python-path: updated to %s" (car python-shell-exec-path)))

      (message "/tmp/current-nix-shell-python-path doesn't exist."))))
#+end_src
** =graphviz-dot-mode=
#+begin_src emacs-lisp
(use-package graphviz-dot-mode :ensure t)
#+end_src

** =scad-mode=
#+begin_src emacs-lisp
(use-package scad-mode :ensure t)
#+end_src

** =lua-mode=
#+begin_src emacs-lisp
(use-package lua-mode :ensure t)
#+end_src

** =json-mode=
#+begin_src emacs-lisp
(use-package json-mode :ensure t)
#+end_src
** =nix-ts-mode=
#+begin_src emacs-lisp
(use-package nix-ts-mode :ensure t)
#+end_src
* Coding input
** =tempel=: snippet system
#+begin_src emacs-lisp
(use-package tempel
  :ensure t
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")
  :bind (("M-8" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))

  :init
  (setq tempel-path "~/.config/emacs/tempel/templates.eld")

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)
  )
#+end_src

#+begin_src emacs-lisp
(defun gry/choose-from-list-and-insert-it (asdf)
  (interactive)
  (insert (let ((choices asdf))
    (completing-read "Choose: " choices))))


(defun gry/choose-from-list-and-return-it (asdf)
  (interactive)
  (let ((choices asdf))
    (completing-read "Choose: " choices)))
#+end_src

** =elec-pair=: auto parenthesis pair
#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :custom
  (electric-pair-inhibit-predicate
   (lambda (c)
     (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))

  :config
  (electric-pair-mode 1))
#+end_src

* Coding output
** Tree-sitter
from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][mastering emacs article]].
#+begin_src emacs-lisp
(setq major-mode-remap-alist
      '((bash-mode   . bash-ts-mode)
        (python-mode . python-ts-mode)))
#+end_src
** =indent-bars=
#+begin_src emacs-lisp
(use-package indent-bars
  ;;:load-path "~/code/emacs/indent-bars"
  :ensure t
  :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :custom
  (indent-bars-treesit-support   t)
  (indent-bars-no-descend-string nil)
  (indent-bars-prefer-character  "|")
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
				      list list_comprehension
				      dictionary dictionary_comprehension
				      parenthesized_expression subscript)))
  :hook ((python-base-mode yaml-mode) . indent-bars-mode)
  ;;:hook ((python-base-mode yaml-mode) . indent-bars--ts-mode)
  )
#+end_src
* Coding lsp & jumping around
** =eglot=: lsp
#+begin_src emacs-lisp
(use-package eglot
  :config
  (add-to-list 'eglot-server-programs '(nix-ts-mode . ("nil"))))
#+end_src
** =consult-eglot=: consulting with lsp 
#+begin_src emacs-lisp
(use-package consult-eglot :ensure t)
#+end_src
** =eglot-booster=: faster eglot
#+begin_src emacs-lisp
(use-package eglot-booster
  :ensure t
  :straight (eglot-booster
             :type git
             :host github
             :repo "jdtsmith/eglot-booster")
  :config
  (eglot-booster-mode +1)
  )
#+end_src

** =corfu=: completion
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :ensure t
  :custom
  (corfu-cycle            t          ) ;; Allows cycling through candidates
  ;; (corfu-auto             t          ) ;; Enable auto completion nov23 C-M-i?
  ;; (corfu-auto-prefix      2          )
  ;; (corfu-auto-delay       0.1        )
  (corfu-popupinfo-delay '(0.8 . 0.2))
  (corfu-preview-current   nil       )
  (corfu-on-exact-match    nil       ) ;; Don't auto expand tempel snippets

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator )
              ("TAB"        . corfu-insert           )
              ([tab]        . corfu-insert           )
              ;;("S-TAB"     . corfu-previous        )
              ;; ("M-k"        . corfu-previous      )
              ;; ("M-j"        . corfu-next          )
              ("S-<return>" . corfu-insert           )
              ("M-h"        . corfu-insert           )
              ("RET"        . nil                    ))

  :init
  (setq tab-always-indent 'complete)
  ;;:config
  (global-corfu-mode    )
  (corfu-history-mode   )
  (corfu-popupinfo-mode )

  :hook
  (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t
        			             corfu-quit-no-match t
        			             corfu-auto nil)
                        (corfu-mode)))
  )
#+end_src
** =cape=: completion at point extensions
#+begin_src emacs-lisp
(use-package cape
  ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
  ;; Press C-c p ? to for help.
  :ensure t
  :bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
  ;; Alternatively bind Cape commands individually.
  ;; :bind (("C-c p d" . cape-dabbrev)
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ...)
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  ;; (add-hook 'completion-at-point-functions #'cape-elisp-block)
  (add-hook 'completion-at-point-functions #'cape-history)
)
#+end_src

** =abbrev=
#+begin_src emacs-lisp
(use-package abbrev
  :delight " abb"
  :defer 1
  :ensure nil
  ;;:custom
  ;;(abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))

  ;;(abbrev-mode 1)
  (setq-default abbrev-mode t)
  )
#+end_src
** =fancy-dabbrev=
#+begin_src emacs-lisp
(use-package fancy-dabbrev
  :delight " fda"
  :ensure t
  :config (global-fancy-dabbrev-mode))
#+end_src

* Coding convenient
** =rg=: ripgrep in Emacs
Probably requires external =rg= command.

#+begin_src emacs-lisp
(use-package rg
  :ensure t)
#+end_src

** =magit=: git control
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

** =git-gutter=: git diff shows on the side
Similar to vim-signify.
#+begin_src emacs-lisp
(use-package git-gutter
  :delight  " git"
  :ensure t
  :config (global-git-gutter-mode))
#+end_src

** =harpoon=
#+begin_src emacs-lisp
(use-package harpoon
  :ensure t)
#+end_src

* Bunch of functions
** Open PDF/HMTL exported by LaTeX externally                                 :customFunc:
#+begin_src emacs-lisp
(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

(defun gry/org-open-pdf ()
  (interactive)
  (call-process-shell-command
   (concat "xdg-open "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file/buffer
           "/export_tex/"                               ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".pdf &"                                     ;; adds extension
           )))

(defun gry/org-open-html ()
  (interactive)
  (call-process-shell-command
   ;; (concat "xdg-open "                               ;; try to open default PDF viewer
   (concat "$BROWSER "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file/buffer
           "/export_html/"                              ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".html &"                                    ;; adds extension
           )))
#+end_src

** My Custom LaTeX writing system (aka TeQ)                                   :customFunc:
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.config/emacs/Emacs-TeQ"))
(register-input-method "TeQ-Math" "Emacs-Teq-Latex" 'quail-use-package
                       "TeQ-"     "TeQ-Math input"
                       "Emacs-TeQ.el")
(fset 'gry-calc-horizontal-concat
      (kmacro-lambda-form [?v ?t tab ?v ?t ?| ?v ?t] 0 "%d"))
#+end_src

** Custom Aligner function (with untabify)                                    :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/align-regexp-and-untabify (beg end)
  (interactive "r")
  (align-regexp beg end
                (concat "\\(\\s-*\\)" (read-string "Align regexp: ")))
  (untabify beg end))
#+end_src
** Toggling between 3 inputs (eng, mon, teq)                                  :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/toggle-eng-mon-teq-input-methods ()
  (interactive)
  (if (string= default-input-method nil )
      (set-input-method "cyrillic-mongolian")
    (if (string= default-input-method "TeQ-Math")
	(set-input-method "cyrillic-mongolian")
      (if (string= default-input-method "cyrillic-mongolian")
	  (set-input-method "TeQ-Math")))))
#+end_src
** copy link in org at point                                                  :customFunc:
#+begin_src emacs-lisp
(defun code-from-internet/org-link-open-parent-with-dired-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         ;;(url (concat type ":" url))
         )
    ;; (kill-new url)
    (message (concat "Copied URL: " url))
    (dired-jump t (file-name-directory url))
    )
  )


(defun code-from-internet/org-link-copy-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url)))
  )
#+end_src
** put empty svg file at point                                                :customFunc:
#+begin_src emacs-lisp
(defun garid/put-emtpy-svg-img-at-point ()
  (interactive)
  ;;Part 1: creates org-image if non existense
  (unless (file-directory-p org-download-image-dir);; when not
    (make-directory org-download-image-dir))

  ;;Part 2: copy the template
  (copy-file;; "~/.config/emacs/org-templates/template.svg"
   (concat (file-name-directory user-init-file) "org-templates/template.svg")
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg")))

  ;;Part 3: insert the link to the buffer
  (insert
   "[[file:"
   (concat (file-name-as-directory org-download-image-dir)
           (format-time-string "%Y%m%d-%H%M%S.svg"))
   "]]"))
#+end_src
** Jumping ref's label in org or latex                                        :customFunc:
#+begin_src emacs-lisp
(defun garid/jump-label-def-of-ref-at-point-word ()
  ""
  (interactive)
  ;; jump to closing } part of:  \ref{...}
  (progn
    (search-forward "}")
    (backward-char 1))

  ;; copy and consult-line with thing inside of {} parenthesis of \ref{...}
  (let ((start (search-backward "{" nil t))
        (end (search-forward "}" nil t)))
    (if (and start end)
        (let ((content (buffer-substring-no-properties (1+ start) (1- end))))
          (consult-line (format "\\label{%s}" content))
          )
      (message "No matching braces found."))))
#+end_src
** Custom opening external terminal at current buffer                         :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/open-external-term-here ()
  (interactive)
  (call-process-shell-command
   (concat
    user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
;;(shell-command (concat user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
#+end_src

** Org toggle hide/shot hyperlink                                             :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-link-n-emphasis ()
  (interactive)
  (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
  (setq org-link-descriptive           org-hide-emphasis-markers) ;;(org-toggle-link-display) more in below
  (org-restart-font-lock)
  (font-lock-update))
#+end_src

** Org toggle hide/shot display images                                        :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-display-images-n-edraw ()
  (interactive)
  (org-toggle-inline-images)
  (if org-inline-image-overlays
      (edraw-org-link-image-mode +1)
    (edraw-org-link-image-mode -1)
    ))
#+end_src

* Writing & Reading
** Writing packages
#+begin_src emacs-lisp
(use-package selectric-mode       :ensure t)
(use-package typewriter-roll-mode :ensure t)
(use-package writeroom-mode       :ensure t)
(use-package focus                :ensure t)
#+end_src

** Writing Distraction free                                                   :customFunc:
#+begin_src emacs-lisp
(defun gry/distraction-free-on ()
  (interactive)
  (writeroom-mode             1)
  (typewriter-roll-mode       1)
  ;;(evil-insert)
  ;;(turn-off-evil-mode)
  ;;(selectric-mode             1)
  (display-line-numbers-mode  -1)
  (global-corfu-mode          -1)
  (cua-mode                   +1)
  (which-key-mode             -1)
  (vertico-mode               -1)
  (focus-mode                 +1)

  (cond
   ((member "xkcd Script"     (font-family-list)) (set-face-attribute 'default nil :font "xkcd Script"     :height 200))
   ((member "Virgil 3 YOFF"   (font-family-list)) (set-face-attribute 'default nil :font "Virgil 3 YOFF"   :height 140))
   ((member "Iosevka Aile"    (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Aile"    :height 200))
   ((member "Liberation Sans" (font-family-list)) (set-face-attribute 'default nil :font "Liberation Sans" :height 140))
   ((member "Courier New"     (font-family-list)) (set-face-attribute 'default nil :font "Courier New"     :height 140))
   ((member "Terminus"        (font-family-list)) (set-face-attribute 'default nil :font "Terminus"        :height 140))
   ((member "M+ 1p medium"    (font-family-list)) (set-face-attribute 'default nil :font "M+ 1p medium"    :height 140))
   ))

(defun gry/distraction-free-off ()
  (interactive)
  (cua-mode              -1)
  (writeroom-mode        -1)
  (typewriter-roll-mode  -1)
  (selectric-mode        -1)
  (global-corfu-mode     +1)
  ;;(turn-on-evil-mode)
  (which-key-mode        +1)
  (vertico-mode          +1)
  (focus-mode            -1)

  (cond
   ((member "Iosevka Term SS06" (font-family-list)) (set-face-attribute 'default nil :font "Iosevka Term SS06" :height 120))
   ((member "Iosevka"           (font-family-list)) (set-face-attribute 'default nil :font "Iosevka"           :height 150))
   ))

(setq gry-toggle-distraction-free-writing-state t)

(defun gry/toggle-distraction-free-writing ()
  (interactive)
  (setq gry-toggle-distraction-free-writing-state
        (not gry-toggle-distraction-free-writing-state))
  (if gry-toggle-distraction-free-writing-state
      (gry/distraction-free-on)
    (gry/distraction-free-off)))
#+end_src

** =pdf-tools=: reading pdf in Emacs
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :bind (:map pdf-view-mode-map
              ("t" . pdf-outline))
  :mode  ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install))
#+end_src

** =tmr=: timer may ring
#+begin_src emacs-lisp
(use-package tmr :ensure t)
#+end_src
** =spray=: spraying texts
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode))
    :hook ((spray-mode . gry/distraction-free-on))
)
#+end_src
** =edraw= svg drawing inline in org
#+begin_src emacs-lisp
(use-package edraw-mode
  :straight (edraw-mode
             :type git
             :host github
             ;;:brach "garidslatex"
             :brach "master"
             :repo "misohena/el-easydraw")


  :custom
  (edraw-editor-default-grid-interval 10)
  (edraw-default-shape-properties '((rect (fill            . #1="#f8f8f8")
                                          (stroke          . #2="#101010")
                                          (stroke-width    . 2))
                                    (ellipse (fill         . #1#)
                                             (stroke       . #2#)
                                             (stroke-width . 2))
                                    (path (fill            . "none")
                                          (stroke          . #2#)
                                          (stroke-width    . 2) ;;(marker-end . "arrow")   p > or p <
                                          )
                                    (text (fill            . #2#)
                                          (font-size       . 20)
                                          ;;(font-family     . "sans-serif")
                                          ;;(font-family     . "Linux Libertine")
                                          (font-family     . "xkcd Script")
                                          (text-anchor     . "middle"))
                                    (image)))
  (edraw-default-document-properties '((width .  900)
                                       (height . 400)
                                       (background . "#fff")))
  :config
  ;;(edraw-org-setup-default)

  (with-eval-after-load 'org
    (require 'edraw-org)
    (edraw-org-setup-default))
  ;; When using the org-export-in-background option (when using the
  ;; asynchronous export function), the following settings are
  ;; required. This is because Emacs started in a separate process does
  ;; not load org.el but only ox.el.
  (with-eval-after-load "ox"
    (require 'edraw-org)
    (edraw-org-setup-exporter))
  )
#+end_src
** checking (could be useful)
#+begin_src emacs-lisp
;; (use-package langtool   :ensure t) it required external jar / java  someday i will try
;; (use-package jinx          :ensure t)
(use-package mw-thesaurus  :ensure t :after org)
(use-package org-wc        :ensure t :after org)
#+end_src

** =captain=
#+begin_src emacs-lisp
(use-package captain
  :delight " cap"
  :after org
  :custom
  (sentence-end-double-space nil)

  :config ;; from https://emacs.stackexchange.com/q/54326/38482
  ;; don't capitalize in programming modes.
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq captain-predicate
                    (lambda () (nth 8 (syntax-ppss (point)))))))
  ;; Or for text modes, work all the time:
  (add-hook 'text-mode-hook
            (lambda ()
              (setq captain-predicate (lambda () t))))

  ;; Or don't work in source blocks in Org-mode:
  (add-hook 'org-mode-hook
            (lambda ()
              (setq captain-predicate
                    (lambda () (not (org-in-src-block-p))))))


  (add-hook 'latex-mode-hook (lambda () (captain-mode -1)))
  (global-captain-mode t)
  )
#+end_src

* Keybinding
** =which-key=: keybinding shower
#+begin_src emacs-lisp
(use-package which-key
  :delight
  :ensure t
  :custom
  (which-key-popup-type              'side-window               )
  (which-key-side-window-location    'right                     )
  (which-key-idle-delay               0.5                       )
  (which-key-idle-secondary-delay     0.01                      )
  (which-key-side-window-max-width    0.5                       )
  (which-key-sort-order              'which-key-key-order-alpha )
  :config (which-key-mode))
#+end_src

** Non sequential keybindings
*** Global keybinding table
#+caption: Global (aka from anywhere) non-sequential keybinding
#+name: tbl-global-keybindings
| key     | function                                      | description                         |
|---------+-----------------------------------------------+-------------------------------------|
| =M-q=     | =delete-window=                                 | delete window                       |
| =M-Q=     | =kill-current-buffer=                           | delete buffer                       |
| =M-J=     | =other-window=                                  | jump to other window                |
| =M-W=     | =evil-window-vnew=                              | divide window vertically (on right) |
| =M-E=     | =evil-window-vsplit=                            | divide window vertically (on left)  |
| =M-]=     | =comint-dynamic-complete-filename=              | complete file path                  |
| =M-f=     | =consult-line=                                  | search line in buffer               |
| =M-F=     | =zoom-window-zoom=                              | zoom window mode                    |
| =M-y=     | =consult-yank-from-kill-ring=                   | consult yank from kill ring         |
| =C-/=     | =comment-line=                                  | set selected lines comment          |
| =C-\vert= | =garid-custom/toggle-eng-mon-teq-input-methods= | change toggle input (Eng-Mon-Teq)   |
| =M-1=     | =harpoon-go-to-1=                               | harpoon-go-to-1                     |
| =M-2=     | =harpoon-go-to-2=                               | harpoon-go-to-2                     |
| =M-3=     | =harpoon-go-to-3=                               | harpoon-go-to-3                     |
| =M-4=     | =harpoon-go-to-4=                               | harpoon-go-to-4                     |
| =M-5=     | =harpoon-go-to-5=                               | harpoon-go-to-5                     |
| =M-6=     | =harpoon-go-to-6=                               | harpoon-go-to-6                     |
| =<f9>=    | =harpoon-quick-menu-hydra=                      | harpoon                             |
| =M-<f9>=  | =gry/toggle-distraction-free-writing=           | toggle distraction free writing     |

Note to myself: after changing Table-[[tbl-global-keybindings]], I need to update [[convert-global-keybindings]]
*** Convert global keybinding table into elisp
#+caption: adsf
#+name: convert-global-keybindings
#+begin_src elisp :var tab=tbl-global-keybindings :wrap src emacs-lisp :tangle no

(defun remove-equal-from-both-sides (str)
  "Remove the tilde (~) character from the beginning and end of STR."
  (if (string-match "\\`=\\(.*?\\)=\\'" str)  ;;
      ;; \\`~ front
      ;; \\(.*?\\) capture group
      ;; ~\\'  end?
      (match-string 1 str)
    str))

(concat
 (mapconcat
  (lambda (row)
    (format
     "(global-set-key (kbd \"%s\") '%s)"
     ;; needed to use regexp cuz | (as \vert) used in the table
     (replace-regexp-in-string (regexp-quote "\\vert") "|"
                               (remove-equal-from-both-sides (nth 0 row))
                               nil 'literal)
     (remove-equal-from-both-sides (nth 1 row))
     ;;(nth 1 row)
     ))
  tab "\n"))
#+end_src

#+RESULTS: convert-global-keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-q") 'delete-window)
(global-set-key (kbd "M-Q") 'kill-current-buffer)
(global-set-key (kbd "M-J") 'other-window)
(global-set-key (kbd "M-W") 'evil-window-vnew)
(global-set-key (kbd "M-E") 'evil-window-vsplit)
(global-set-key (kbd "M-]") 'comint-dynamic-complete-filename)
(global-set-key (kbd "M-f") 'consult-line)
(global-set-key (kbd "M-F") 'zoom-window-zoom)
(global-set-key (kbd "M-y") 'consult-yank-from-kill-ring)
(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-|") 'garid-custom/toggle-eng-mon-teq-input-methods)
(global-set-key (kbd "M-1") 'harpoon-go-to-1)
(global-set-key (kbd "M-2") 'harpoon-go-to-2)
(global-set-key (kbd "M-3") 'harpoon-go-to-3)
(global-set-key (kbd "M-4") 'harpoon-go-to-4)
(global-set-key (kbd "M-5") 'harpoon-go-to-5)
(global-set-key (kbd "M-6") 'harpoon-go-to-6)
(global-set-key (kbd "<f9>") 'harpoon-quick-menu-hydra)
(global-set-key (kbd "M-<f9>") 'gry/toggle-distraction-free-writing)
#+end_src

** Sequential keybindings (General.el keybinding configuration)
*** Sequential global keybindings
**** File and directory surfing
#+attr_latex: :placement [H]
#+caption: File and directory related commands
#+name: tbl-kbinding-file-n-dired
| key(s) | function                 | short description   | mode | lambda |
|--------+--------------------------+---------------------+------+--------|
| =SPC=    | =execute-extended-command= | M-x                 | -    |        |
| =f=      | =find-file=                | find-file           | -    |        |
| =d=      | =dired-jump=               | directory           | -    |        |
| =D=      | =:ignore t=                | Dired.............. | -    |        |
| =Ds=     | =dired=                    | simple              | -    |        |
| =Dp=     | =dired-preview-mode=       | preview             | -    |        |

**** Buffer and operations on buffer
#+attr_latex: :placement [H]
#+caption: buffer related commands
#+name: tbl-kbind-buffer-related
| key(s) | function                    | short description           | mode | lambda |
|--------+-----------------------------+-----------------------------+------+--------|
| =l=      | =consult-buffer=              | list-buffer                 | -    |        |
| =L=      | =:ignore t=                   | buffer..................... | -    |        |
| =Lr=     | =revert-buffer-quick=         | revert (reload)             | -    |        |
| =Le=     | =eval-buffer=                 | evaluate buffer             | -    |        |
| =Li=     | =ibuffer=                     | ibuffer                     | -    |        |
| =Ln=     | =rename-buffer=               | rename                      | -    |        |
| =L<=     | =switch-to-prev-buffer=       | <prev                       | -    |        |
| =L>=     | =switch-to-next-buffer=       | >next                       | -    |        |
| =Ld=     | =crux-delete-file-and-buffer= | delete                      | -    |        |
| =Lc=     | =clone-indirect-buffer=       | clone                       | -    |        |
| =Ls=     | =crux-create-scratch-buffer=  | scratch-buffer              | -    |        |
| =Lh=     | =buf-move-left=               | move left                   | -    |        |
| =Lj=     | =buf-move-down=               | move down                   | -    |        |
| =Lk=     | =buf-move-up=                 | move up                     | -    |        |
| =Ll=     | =buf-move-right=              | move right                  | -    |        |
| =LL=     | =tear-off-window=             | tear window to frame        | -    |        |

**** Convenient
#+attr_latex: :placement [H]
#+caption: Convenient commands
#+name: tbl-kbind-zconvenients
| key(s) | function                               | short description                 | mode | lambda |
|--------+----------------------------------------+-----------------------------------+------+--------|
| =z=      | =:ignore t=                              | conveniences....................  | -    |        |
| =za=     | =garid-custom/align-regexp-and-untabify= | align                             | -    |        |
| =zr=     | =replace-regexp=                         | replace                           | -    |        |
| =zh=     | =highlight-symbol-at-point=              | highlight-on                      | -    |        |
| =zH=     | =unhighlight-regexp=                     | highlight-off                     | -    |        |
|--------+----------------------------------------+-----------------------------------+------+--------|
| =zs=     | =:ignore t=                              | spell............................ | -    |        |
| =zsw=    | =ispell-word=                            | word                              | -    |        |
| =zsr=    | =ispell-region=                          | region                            | -    |        |
| =zsC=    | =ispell-comments-and-strings=            | comment-full                      | -    |        |
| =zsc=    | =ispell-comment-or-string-at-point=      | comment-here                      | -    |        |
| =zsb=    | =ispell-buffer=                          | buffer                            | -    |        |
| =zsm=    | =ispell-message=                         | message                           | -    |        |
| =zsq=    | =ispell-kill-ispell=                     | quit                              | -    |        |
| =zsl=    | =ispell-change-dictionary=               | language en/mn                    | -    |        |
| =zst=    | =mw-thesaurus-lookup-at-point=           | thesaurus current word            | -    |        |
| =zsT=    | =mw-thesaurus-lookup=                    | thesaurus                         | -    |        |
|--------+----------------------------------------+-----------------------------------+------+--------|
| =ZQ=     | =kill-emacs=                             | kill Emacs                        | -    |        |

**** System
#+attr_latex: :placement [H]
#+caption: system commmands
#+name: tbl-kbind-sys-related
| key(s) | function                                                                                   | short description             | mode | lambda |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =s=      | =:ignore t=                                                                                  | system....................... | -    |        |
| =srf=    | =recentf-open-files=                                                                         | recent-f.iles                 | -    |        |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =sl=     | =:ignore t=                                                                                  | line......................... | -    |        |
| =sl5=    | =(setq display-line-numbers-width 5)=                                                        | digit number                  | -    | y      |
| =sl4=    | =(setq display-line-numbers-width 4)=                                                        | digit number                  | -    | y      |
| =sl3=    | =(setq display-line-numbers-width 3)=                                                        | digit number                  | -    | y      |
| =slm=    | =scroll-lock-mode=                                                                           | scroll-lock-mode              | -    |        |
| =slv=    | =global-display-fill-column-indicator-mode=                                                  | vertical-line                 | -    |        |
| =sln=    | =display-line-numbers-mode=                                                                  | number toggle                 | -    |        |
| =slr=    | =ruler-mode=                                                                                 | ruler mode                    | -    |        |
| =scl=    | =(global-command-log-mode) (clm/open-command-log-buffer)=                                    | command log mode              | -    | y      |
| =sw=     | =whitespace-mode=                                                                            | whitespace                    | -    |        |
| =sg=     | =:ignore t=                                                                                  | garid                         | -    |        |
| =sgf=    | =gry/distraction-free-on=                                                                    | focus                         | -    |        |
| =sgr=    | =gry/distraction-free-off=                                                                   | reset                         | -    |        |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =O=      | =:ignore t=                                                                                  | open........................  | -    |        |
| =Oe=     | =(find-file "~/.config/emacs/init.org")=                                                     | emacs init.org                | -    | y      |
| =OE=     | =(find-file "~/.config/emacs/init.el")=                                                      | emacs init.el                 | -    | y      |
| =Ob=     | =(find-file (nth 0 org-cite-global-bibliography))=                                           | bibliography                  | -    | y      |
| =Op=     | =(find-file "~/BrainDump/bookshelf/")=                                                       | pdf                           | -    | y      |
| =Oc=     | =citar-open=                                                                                 | citaiton                      | -    |        |
| =OO=     | =(find-file org-default-notes-file)=                                                         | org capture                   | -    | y      |
| =Oi=     | =(find-file "~/BrainDump/gtd/inbox.org")=                                                    | inbox                         | -    | y      |
| =Om=     | =(find-file "~/BrainDump/gtd/main.org")=                                                     | main                          | -    | y      |
| =Or=     | =(find-file (concat denote-directory "/phd/20240814T113502--00-garids-phd-index__phd.org"))= | research index                | -    | y      |
|--------+--------------------------------------------------------------------------------------------+-------------------------------+------+--------|
| =t=      | =:ignore t=                                                                                  | terminal..................... | -    |        |
| =te=     | =eshell=                                                                                     | eshell emacs-shell            | -    |        |
| =tv=     | =vterm=                                                                                      | vterm  vterm                  | -    |        |
| =tx=     | =garid-custom/open-external-term-here=                                                       | xternal terminal              | -    |        |
| =tm=     | =tmr-with-description=                                                                       | timer                         | -    |        |
| =u=      | =:ignore=                                                                                    | undo ........................ | -    |        |
| =ut=     | =undo-tree-visualize=                                                                        | tree                          | -    |        |

**** Bookmark
#+attr_latex: :placement [H]
#+caption: bookmark
#+name: tbl-kbind-bookmarks
| key(s) | function                 | short description              | mode | lambda |
|--------+--------------------------+--------------------------------+------+--------|
| =b=      | =harpoon-quick-menu-hydra= | bookmark-harpoon               | -    |        |
| =B=      | =:ignore t=                | bookmark...................... | -    |        |
| =B1=     | =harpoon-go-to-1=          |                                | -    |        |
| =B2=     | =harpoon-go-to-2=          |                                | -    |        |
| =B3=     | =harpoon-go-to-3=          |                                | -    |        |
| =B4=     | =harpoon-go-to-4=          |                                | -    |        |
| =B5=     | =harpoon-go-to-5=          |                                | -    |        |
| =Ba=     | =harpoon-add-file=         | add-file                       | -    |        |

**** Help related
#+attr_latex: :placement [H]
#+caption: Help for emacs/elisp related
#+name: tbl-kbind-help
| key(s) | function                 | short description               | mode | lambda |
|--------+--------------------------+---------------------------------+------+--------|
| =h=      | =:ignore t=                | help........................... | -    |        |
| =hh=     | =describe-symbol=          | help symbol (elisp)             | -    |        |
| =hH=     | =describe-key=             | help keybinding                 | -    |        |
| =ho=     | =org-info=                 | org-info                        | -    |        |
| =hw=     | =which-key-show-top-level= | which-key                       | -    |        |
| =hm=     | =consult-man=              | man                             | -    |        |
| =hi=     | =Info-goto-node=           | read docs                       | -    |        |

**** Development commands
#+attr_latex: :placement [H]
#+caption: misc. development related
#+name: tbl-kbind-dev
| key(s) | function                      | short description                | mode | lambda |
|--------+-------------------------------+----------------------------------+------+--------|
| =mg=     | =magit-status=                  | magit                            | -    |        |
| =<=      | =recompile=                     | recompile                        | -    |        |
| =sco=    | =corfu-mode=                    | corfu-mode                       | -    |        |
| =se=     | =eglot=                         | eglot                            | -    |        |
| =rg=     | =rg=                            | ripgrep                          | -    |        |
| =g=      | =:ignore t=                     | git............................  | -    |        |
| =gS=     | =git-gutter:stage-hunk=         | stage hunkk                      | -    |        |
| =gs=     | =git-gutter:popup-hunk=         | popup hunk                       | -    |        |
| =gr=     | =git-gutter:update-all-windows= | refresh                          | -    |        |
| =gg=     | =git-gutter-mode=               | gutter-mode                      | -    |        |
| =gn=     | =git-gutter:next-hunk=          | jump-next                        | -    |        |
| =gp=     | =git-gutter:previous-hunk=      | jump-prev                        | -    |        |
| =gd=     | =magit-ediff-compare=           | magit-ediff-compare              | -    |        |
| =P=      | =:ignore=                       | python (inferior)............... | -    |        |
| =Pr=     | =python-shell-restart=          | restart                          | -    |        |
| =PP=     | =run-python=                    | run-python                       | -    |        |
| =Pk=     | =comint-send-eof=               | kill  (also C-c C-d)             | -    |        |

**** Consult related (picking & choosing stuff)
#+attr_latex: :placement [H]
#+caption: consult
#+name: tbl-global-general-keybindings-consult
| key(s) | function               | short description              | mode | lambda |
|--------+------------------------+--------------------------------+------+--------|
| =c=      | =:ignore t=              | consult....................... | -    |        |
| =co=     | =consult-org-heading=    | consult-org-heading    [ ofh ] | -    |        |
| =ci=     | =consult-imenu=          | consult-imenu                  | -    |        |
| =cm=     | =consult-man=            | consult-man                    | -    |        |
| =cr=     | =consult-ripgrep=        | consult-ripgrep         [ ps ] | -    |        |
| =cR=     | =consult-recent-file=    | consult-recent-files           | -    |        |
| =cf=     | =consult-flymake=        | consult-flymake                | -    |        |
| =cp=     | =consult-project-buffer= | consult-project-buffer  [ pl ] | -    |        |
| =cd=     | =consult-dir=            | consult-dir                    | -    |        |
| =cF=     | =consult-fd=             | consult-fd               [ F ] | -    |        |
| =F=      | =consult-fd=             | consult-fd              [ cF ] | -    |        |
| =ca=     | =consult-org-agenda=     | consult-org-agenda             | -    |        |
| =cg=     | =consult-git-grep=       | consult-git-grep        [ ps ] | -    |        |

**** Project related
#+attr_latex: :placement [H]
#+caption: Project (more like git-repo)
#+name: tbl-global-general-keybindings-project
| key(s) | function               | short description             | mode | lambda |
|--------+------------------------+-------------------------------+------+--------|
| =p=      | =:ignore t=              | project.....................  | -    |        |
| =pr=     | =xref-find-references=   | references                    | -    |        |
| =pR=     | =consult-eglot-symbols=  | references consult            | -    |        |
| =pd=     | =consult-flymake=        | diagnostic                    | -    |        |
| =pf=     | =project-find-file=      | find-file                     | -    |        |
| =pz=     | =project-switch-project= | jump-to-other-proj            | -    |        |
| =ps=     | =consult-git-grep=       | search git files              | -    |        |
| =pS=     | =project-find-regexp=    | search-in-proj                | -    |        |
| =pk=     | =project-kill-buffers=   | kill-buf-proj                 | -    |        |
| =pl=     | =consult-project-buffer= | list-buf-proj                 | -    |        |
| =pv=     | =consult-imenu=          | variables                     | -    |        |
| =v=      | =:ignore t=              | variables.................... | -    |        |
| =vq=     | =format-all-buffer=      | format-buffer                 | -    |        |
| =vr=     | =eglot-rename=           | rename variable               | -    |        |

**** Denote related
#+attr_latex: :placement [H]
#+caption: Denote
#+name: tbl-global-general-keybindings-denote
| key(s) | function                                    | short description            | mode | lambda |
|--------+---------------------------------------------+------------------------------+------+--------|
| =n=      | =:ignore t=                                   | note........................ | -    |        |
| =nr=     | =denote-rename-file=                          | rename                       | -    |        |
| =nf=     | =denote-open-or-create=                       | find                         | -    |        |
| =nd=     | =(dired denote-directory)=                    | dired                        | -    | y      |
| =nj=     | =denote-journal-extras-new-entry=             | journal                      | -    |        |
| =nJ=     | =denote-journal-extras-new-or-existing-entry= | Journal-find                 | -    |        |
| =nil=    | =denote-insert-link=                          | insert-link                  | -    |        |
| =nij=    | =denote-journal-extras-link-or-create-entry=  | insert-journal-link          | -    |        |
| =nt=     | =denote-template=                             | template                     | -    |        |
| =nI=     | =garid-custom/denote-node-insert-immediate=   | Insert-note                  | -    |        |
| =ns=     | =consult-denote-grep=                         | live-grep                    | -    |        |
| =nF=     | =consult-denote-find=                         | consult-denote-find          | -    |        |
| =nl=     | =:ignore t=                                   | denote link................. | -    |        |
| =nli=    | =denote-insert-link=                          | link insert                  | -    |        |
| =nlb=    | =denote-find-backlink=                        | find-backlink                | -    |        |
| =nlf=    | =denote-find-link=                            | find-forward-link            | -    |        |
| =nlB=    | =denote-backlinks=                            | backlink                     | -    |        |
| =nlF=    | =denote-link=                                 | forward-link                 | -    |        |
| =nla=    | =denote-add-links=                            | add-links regex              | -    |        |

**** org related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-mode-related
| key(s) | function                                                    | short description               | mode | lambda |
|--------+-------------------------------------------------------------+---------------------------------+------+--------|
| =o=      | =:ignore t=                                                   | org............................ | -    |        |
| =oo=     | =org-open-at-point=                                           | open                            | org  |        |
| =oO=     | =garid/jump-label-def-of-ref-at-point-word=                   | open ref def                    | org  |        |
| =od=     | =code-from-internet/org-link-open-parent-with-dired-at-point= | directory-open                  | org  |        |
| =,=      | =org-ctrl-c-ctrl-c=                                           | C-c C-c                         | org  |        |

**** org table related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-tbl-related
| key(s) | function                             | short description            | mode | lambda |
|--------+--------------------------------------+------------------------------+------+--------|
| =oT=     | =:ignore t=                            | table....................... | -    |        |
| =oTm=    | =orgtbl-mode=                          | mode                         | -    |        |
| =oTc=    | =orgtbl-create-or-convert-from-region= | create                       | -    |        |
| =oTT=    | =org-table-toggle-column-width=        | toggle-hide-column           | -    |        |
| =oTC=    | =org-table-toggle-coordinate-overlays= | coordinate                   | -    |        |
| =oTx=    | =org-table-export=                     | export as csv file           | org  |        |
| =oTs=    | =org-table-sum=                        | sum                          | org  |        |
| =oTi=    | =:ignore t=                            | insert...................... | org  |        |
| =oTic=   | =org-table-insert-column=              | column                       | org  |        |
| =oTir=   | =org-table-insert-row=                 | row                          | org  |        |

**** org-subtree operations
#+attr_latex: :placement [H]
#+caption: in org-file, frequent commands
#+name: tbl-orgmode-general-keybindings-freq
| key(s) | function                                        | short description            | mode | lambda |
|--------+-------------------------------------------------+------------------------------+------+--------|
| =os=     | =:ignore t=                                       | subtree..................... | org  |        |
| =osy=    | =org-copy-subtree=                                | yank (verbatim copy)         | org  |        |
| =osa=    | =(org-archive-subtree-default-with-confirmation)= | archive                      | org  | y      |
| =osY=    | =org-id-copy=                                     | yank (ID)                    | org  |        |
| =osv=    | =org-mark-element=                                | visually select element      | org  |        |
| =osm=    | =org-refile=                                      | move/refile                  | org  |        |
| =osd=    | =org-cut-subtree=                                 | delete (aka cut)             | org  |        |
| =ost=    | =org-toggle-narrow-to-subtree=                    | toggle narrow                | org  |        |
| =osT=    | =org-set-tags-command=                            | tags                         | org  |        |
| =osn=    | =org-num-mode=                                    | num-mode                     | org  |        |
| =oss=    | =org-sort=                                        | sort                         | org  |        |
| =osp=    | =org-set-property=                                | property                     | org  |        |
| =osI=    | =org-indent-mode=                                 | indent-mode                  | org  |        |
|--------+-------------------------------------------------+------------------------------+------+--------|
| =osi=    | =:ignore t=                                       | insert heading.............. | org  |        |
| =osia=   | =org-insert-heading-after-current=                | after                  C-RET | org  |        |
| =osih=   | =org-insert-heading=                              | heading                M-RET | org  |        |
| =osis=   | =org-insert-subheading=                           | subheading                   | org  |        |
| =osiH=   | =org-insert-todo-heading=                         | heading         todo M-S-RET | org  |        |
| =osiA=   | =org-insert-todo-heading-respect-content=         | After           todo C-S-RET | org  |        |
| =osiS=   | =org-insert-todo-subheading=                      | subheading      todo         | org  |        |

**** org-agenda/calendar/todo related
#+attr_latex: :placement [H]
#+caption: agenda-todo-schedule
#+name: tbl-orgmode-general-keybindings-todo
| key(s) | function      | short description            | mode | lambda |
|--------+---------------+------------------------------+------+--------|
| =oc=     | =org-capture=   | capture                      | -    |        |
| =ot=     | =org-todo=      | todo                         | org  |        |
|--------+---------------+------------------------------+------+--------|
| =oa=     | =:ignore t=     | agenda...................... | -    |        |
| =oag=    | =org-agenda=    | agenda                       | -    |        |
| =oab=    | =org-timeblock= | block                        | -    |        |
| =oas=    | =org-schedule=  | schedule                     | org  |        |
| =oad=    | =org-deadline=  | deadline                     | org  |        |
| =oac=    | =org-clock-in=  | clock in                     | org  |        |
| =oaC=    | =org-clock-out= | clock in                     | org  |        |

**** org jumping around or finding things
#+attr_latex: :placement [H]
#+caption: jumping or finding stuff in org file
#+name: tbl-orgmode-general-keybindings-find
| key(s) | function                        | short description         | mode | lambda |
|--------+---------------------------------+---------------------------+------+--------|
| =of=     | =:ignore t=                       | find..................... | org  |        |
| =ofh=    | =(consult-org-heading)=           | heading                   | org  | y      |
| =ofn=    | =(consult-line "^#+name"   )=     | named table/eq/src        | org  | y      |
| =ofr=    | =(consult-line "^#+result" )=     | result        /src        | org  | y      |
| =ofs=    | =(consult-line "^#+begin_" )=     | source src-block          | org  | y      |
| =ofl=    | =(consult-line "\\\\label{.*}" )= | label                     | org  | y      |
| =ofr=    | =(consult-line "\\\\ref{.*}" )=   | ref                       | org  | y      |
| =j=      | =org-next-block=                  | jump to next src-block    | org  |        |
| =k=      | =org-previous-block=              | jump to prev src-block    | org  |        |

**** org-export related
#+attr_latex: :placement [H]
#+caption: exporting org
#+name: tbl-orgmode-general-keybindings-export
| key(s) | function                         | short description             | mode | lambda |
|--------+----------------------------------+-------------------------------+------+--------|
| =ox=     | =:ignore t=                        | export....................... | org  |        |
| =oxh=    | =org-html-export-to-html=          | html                          | org  |        |
| =oxb=    | =org-beamer-export-to-pdf=         | beamer                        | org  |        |
| =oxp=    | =org-latex-export-to-pdf=          | pdf latex                     | org  |        |
| =oxH=    | =(org-html-export-to-html nil t)=  | Html                 subtree  | org  | y      |
| =oxB=    | =(org-beamer-export-to-pdf nil t)= | beamer               subtree  | org  | y      |
| =oxP=    | =(org-latex-export-to-pdf nil t)=  | pdf latex            subtree  | org  | y      |
| =oxr=    | =org-reveal-export-to-html=        | reveal js                     | org  |        |
| =oxo=    | =gry/org-open-pdf=                 | pdf open                      | org  |        |
| =oxO=    | =gry/org-open-html=                | html open                     | org  |        |
| =op=     | =org-latex-preview=                | preview                       | org  |        |

**** org-link related
#+attr_latex: :placement [H]
#+caption: org-link related
#+name: tbl-orgmode-general-keybindings-link
| key(s) | function                                | short description            | mode | lambda |
|--------+-----------------------------------------+------------------------------+------+--------|
| =ol=     | =:ignore t=                               | link........................ | org  |        |
| =old=    | =garid-custom/org-toggle-link-n-emphasis= | description-toggle           | org  |        |
| =oli=    | =org-insert-link=                         | insert                       | org  |        |
| =oln=    | =hydra-org-link-jumper/body=              | next-link                    | org  |        |
| =olp=    | =hydra-org-link-jumper/body=              | prev-link                    | org  |        |
| =olo=    | =org-open-at-point=                       | open (same as SPC o o)       | org  |        |
| =olf=    | =org-footnote-new=                        | footnote-new                 | org  |        |
| =olF=    | =org-footnote-action=                     | Footnote-action              | org  |        |
| =olc=    | =org-cite-insert=                         | citation                     | org  |        |
| =oll=    | =org-lint=                                | lint                         | org  |        |

**** org-image related
#+attr_latex: :placement [H]
#+caption: handing images in org-file
#+name: tbl-orgmode-general-keybindings-img
| key(s) | function                                       | short description            | mode | lambda |
|--------+------------------------------------------------+------------------------------+------+--------|
| =oi=     | =:ignore t=                                      | image....................... | org  |        |
| =oii=    | =(insert "[[edraw:]]")=                          | inline edraw                 | org  | y      |
| =oic=    | =garid/put-emtpy-svg-img-at-point=               | create svg                   | org  |        |
| =oip=    | =org-download-clipboard=                         | paste clipboard              | org  |        |
| =oiP=    | =org-download-image=                             | Paste from-path              | org  |        |
| =oid=    | =org-download-delete=                            | delete file                  | org  |        |
| =oie=    | =edraw-org-edit-regular-file-link=               | edit edraw                   | org  |        |
| =oiE=    | =org-download-edit=                              | Edit externally              | org  |        |
| =oir=    | =org-download-rename-at-point=                   | rename file                  | org  |        |
| =oit=    | =garid-custom/org-toggle-display-images-n-edraw= | toggle shot/hide image       | org  |        |
|--------+------------------------------------------------+------------------------------+------+--------|
| =ois=    | =:ignore t=                                      | size........................ | org  |        |
| =oisn=   | =(setq org-image-actual-width '(800))=           | normal 800px                 | org  | y      |
| =oisb=   | =(setq org-image-actual-width '(1500))=          | big    1500px                | org  | y      |
| =oiss=   | =(setq org-image-actual-width '(400))=           | small  400px                 | org  | y      |

*** Converting tables actual keybinding
**** General.el config
#+begin_src emacs-lisp
(use-package general
  :config (general-evil-setup t)

  ;; Keybindings for everywhere
  (general-create-definer garids-keybind/for-all-modes
    :keymaps  '(normal visual emacs)
    :prefix         "SPC"
    :global-prefix  "C-SPC")

  ;; Keybindings inside Org-mode-map
  (general-create-definer garids-keybind/in-org-mode
    :states '(normal visual)
    :keymaps '(org-mode-map)
    :prefix        "SPC"
    :global-prefix "C-SPC")
  )
#+end_src
**** Script that converts previous org-tables into actual emacs configuration
:PROPERTIES:
:header-args:  :var tbl_01=tbl-kbinding-file-n-dired
:header-args+: :var tbl_02=tbl-global-general-keybindings-org-mode-related
:header-args+: :var tbl_03=tbl-kbind-zconvenients
:header-args+: :var tbl_04=tbl-kbind-sys-related
:header-args+: :var tbl_05=tbl-global-general-keybindings-denote
:header-args+: :var tbl_06=tbl-kbind-help
:header-args+: :var tbl_07=tbl-global-general-keybindings-project
:header-args+: :var tbl_08=tbl-kbind-bookmarks
:header-args+: :var tbl_09=tbl-global-general-keybindings-consult
:header-args+: :var tbl_10=tbl-kbind-buffer-related
:header-args+: :var tbl_11=tbl-kbind-dev
:header-args+: :var tbl_12=tbl-global-general-keybindings-org-tbl-related
:header-args+: :var tbl_13=tbl-orgmode-general-keybindings-freq
:header-args+: :var tbl_14=tbl-orgmode-general-keybindings-todo
:header-args+: :var tbl_15=tbl-orgmode-general-keybindings-find
:header-args+: :var tbl_16=tbl-orgmode-general-keybindings-export
:header-args+: :var tbl_17=tbl-orgmode-general-keybindings-link
:header-args+: :var tbl_18=tbl-orgmode-general-keybindings-img
:END:
#+caption: converting
#+name: src_that_converts_key_tables
#+begin_src elisp :wrap src emacs-lisp :tangle no
(setq tblall (append tbl_01 tbl_02 tbl_03 tbl_04 tbl_05 tbl_06 tbl_07 tbl_08 tbl_09 tbl_10
                     tbl_11 tbl_12 tbl_13 tbl_14 tbl_15 tbl_16 tbl_17 tbl_18))



(setq tbl_all_kbind (seq-filter (lambda (x) (string= (nth 3 x) "-"))   tblall))
(setq tbl_org_kbind (seq-filter (lambda (x) (string= (nth 3 x) "org")) tblall))



(defun remove-equal-from-both-sides (str)
  "Remove the tilde (~) character from the beginning and end of STR."
  (if (string-match "\\`=\\(.*?\\)=\\'" str)  ;;
      ;; \\`~ front
      ;; \\(.*?\\) capture group
      ;; ~\\'  end?
      (match-string 1 str)
    str))


(concat
 "(garids-keybind/for-all-modes\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (remove-equal-from-both-sides (nth 0 row))
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )"
                                  (remove-equal-from-both-sides (nth 1 row))) ;; for anon functions
                        (remove-equal-from-both-sides (nth 1 row)))           ;; for normal functions
                      (nth 2 row)))
            tbl_all_kbind "\n"
            )
 "\n)\n\n"
 "(garids-keybind/in-org-mode\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (remove-equal-from-both-sides (nth 0 row))
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )"
                                  (remove-equal-from-both-sides (nth 1 row))) ;; for anon functions
                        (remove-equal-from-both-sides (nth 1 row)))           ;; for normal functions
                      (nth 2 row)))
            tbl_org_kbind "\n"
            )
 "\n)\n"
 )
#+end_src

**** Converted config from tables

#+RESULTS: src_that_converts_key_tables
#+begin_src emacs-lisp
(garids-keybind/for-all-modes
  "SPC" '(execute-extended-command :which-key "M-x")
  "f" '(find-file :which-key "find-file")
  "d" '(dired-jump :which-key "directory")
  "D" '(:ignore t :which-key "Dired..............")
  "Ds" '(dired :which-key "simple")
  "Dp" '(dired-preview-mode :which-key "preview")
  "o" '(:ignore t :which-key "org............................")
  "z" '(:ignore t :which-key "conveniences....................")
  "za" '(garid-custom/align-regexp-and-untabify :which-key "align")
  "zr" '(replace-regexp :which-key "replace")
  "zh" '(highlight-symbol-at-point :which-key "highlight-on")
  "zH" '(unhighlight-regexp :which-key "highlight-off")
  "zs" '(:ignore t :which-key "spell............................")
  "zsw" '(ispell-word :which-key "word")
  "zsr" '(ispell-region :which-key "region")
  "zsC" '(ispell-comments-and-strings :which-key "comment-full")
  "zsc" '(ispell-comment-or-string-at-point :which-key "comment-here")
  "zsb" '(ispell-buffer :which-key "buffer")
  "zsm" '(ispell-message :which-key "message")
  "zsq" '(ispell-kill-ispell :which-key "quit")
  "zsl" '(ispell-change-dictionary :which-key "language en/mn")
  "zst" '(mw-thesaurus-lookup-at-point :which-key "thesaurus current word")
  "zsT" '(mw-thesaurus-lookup :which-key "thesaurus")
  "ZQ" '(kill-emacs :which-key "kill Emacs")
  "s" '(:ignore t :which-key "system.......................")
  "srf" '(recentf-open-files :which-key "recent-f.iles")
  "sl" '(:ignore t :which-key "line.........................")
  "sl5" '((lambda () (interactive) (setq display-line-numbers-width 5) ) :which-key "digit number")
  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4) ) :which-key "digit number")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3) ) :which-key "digit number")
  "slm" '(scroll-lock-mode :which-key "scroll-lock-mode")
  "slv" '(global-display-fill-column-indicator-mode :which-key "vertical-line")
  "sln" '(display-line-numbers-mode :which-key "number toggle")
  "slr" '(ruler-mode :which-key "ruler mode")
  "scl" '((lambda () (interactive) (global-command-log-mode) (clm/open-command-log-buffer) ) :which-key "command log mode")
  "sw" '(whitespace-mode :which-key "whitespace")
  "sg" '(:ignore t :which-key "garid")
  "sgf" '(gry/distraction-free-on :which-key "focus")
  "sgr" '(gry/distraction-free-off :which-key "reset")
  "O" '(:ignore t :which-key "open........................")
  "Oe" '((lambda () (interactive) (find-file "~/.config/emacs/init.org") ) :which-key "emacs init.org")
  "OE" '((lambda () (interactive) (find-file "~/.config/emacs/init.el") ) :which-key "emacs init.el")
  "Ob" '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)) ) :which-key "bibliography")
  "Op" '((lambda () (interactive) (find-file "~/BrainDump/bookshelf/") ) :which-key "pdf")
  "Oc" '(citar-open :which-key "citaiton")
  "OO" '((lambda () (interactive) (find-file org-default-notes-file) ) :which-key "org capture")
  "Oi" '((lambda () (interactive) (find-file "~/BrainDump/gtd/inbox.org") ) :which-key "inbox")
  "Om" '((lambda () (interactive) (find-file "~/BrainDump/gtd/main.org") ) :which-key "main")
  "Or" '((lambda () (interactive) (find-file (concat denote-directory "/phd/20240814T113502--00-garids-phd-index__phd.org")) ) :which-key "research index")
  "t" '(:ignore t :which-key "terminal.....................")
  "te" '(eshell :which-key "eshell emacs-shell")
  "tv" '(vterm :which-key "vterm  vterm")
  "tx" '(garid-custom/open-external-term-here :which-key "xternal terminal")
  "tm" '(tmr-with-description :which-key "timer")
  "u" '(:ignore :which-key "undo ........................")
  "ut" '(undo-tree-visualize :which-key "tree")
  "n" '(:ignore t :which-key "note........................")
  "nr" '(denote-rename-file :which-key "rename")
  "nf" '(denote-open-or-create :which-key "find")
  "nd" '((lambda () (interactive) (dired denote-directory) ) :which-key "dired")
  "nj" '(denote-journal-extras-new-entry :which-key "journal")
  "nJ" '(denote-journal-extras-new-or-existing-entry :which-key "Journal-find")
  "nil" '(denote-insert-link :which-key "insert-link")
  "nij" '(denote-journal-extras-link-or-create-entry :which-key "insert-journal-link")
  "nt" '(denote-template :which-key "template")
  "nI" '(garid-custom/denote-node-insert-immediate :which-key "Insert-note")
  "ns" '(consult-denote-grep :which-key "live-grep")
  "nF" '(consult-denote-find :which-key "consult-denote-find")
  "nl" '(:ignore t :which-key "denote link.................")
  "nli" '(denote-insert-link :which-key "link insert")
  "nlb" '(denote-find-backlink :which-key "find-backlink")
  "nlf" '(denote-find-link :which-key "find-forward-link")
  "nlB" '(denote-backlinks :which-key "backlink")
  "nlF" '(denote-link :which-key "forward-link")
  "nla" '(denote-add-links :which-key "add-links regex")
  "h" '(:ignore t :which-key "help...........................")
  "hh" '(describe-symbol :which-key "help symbol (elisp)")
  "hH" '(describe-key :which-key "help keybinding")
  "ho" '(org-info :which-key "org-info")
  "hw" '(which-key-show-top-level :which-key "which-key")
  "hm" '(consult-man :which-key "man")
  "hi" '(Info-goto-node :which-key "read docs")
  "p" '(:ignore t :which-key "project.....................")
  "pr" '(xref-find-references :which-key "references")
  "pR" '(consult-eglot-symbols :which-key "references consult")
  "pd" '(consult-flymake :which-key "diagnostic")
  "pf" '(project-find-file :which-key "find-file")
  "pz" '(project-switch-project :which-key "jump-to-other-proj")
  "ps" '(consult-git-grep :which-key "search git files")
  "pS" '(project-find-regexp :which-key "search-in-proj")
  "pk" '(project-kill-buffers :which-key "kill-buf-proj")
  "pl" '(consult-project-buffer :which-key "list-buf-proj")
  "pv" '(consult-imenu :which-key "variables")
  "v" '(:ignore t :which-key "variables....................")
  "vq" '(format-all-buffer :which-key "format-buffer")
  "vr" '(eglot-rename :which-key "rename variable")
  "b" '(harpoon-quick-menu-hydra :which-key "bookmark-harpoon")
  "B" '(:ignore t :which-key "bookmark......................")
  "B1" '(harpoon-go-to-1 :which-key "")
  "B2" '(harpoon-go-to-2 :which-key "")
  "B3" '(harpoon-go-to-3 :which-key "")
  "B4" '(harpoon-go-to-4 :which-key "")
  "B5" '(harpoon-go-to-5 :which-key "")
  "Ba" '(harpoon-add-file :which-key "add-file")
  "c" '(:ignore t :which-key "consult.......................")
  "co" '(consult-org-heading :which-key "consult-org-heading    [ ofh ]")
  "ci" '(consult-imenu :which-key "consult-imenu")
  "cm" '(consult-man :which-key "consult-man")
  "cr" '(consult-ripgrep :which-key "consult-ripgrep         [ ps ]")
  "cR" '(consult-recent-file :which-key "consult-recent-files")
  "cf" '(consult-flymake :which-key "consult-flymake")
  "cp" '(consult-project-buffer :which-key "consult-project-buffer  [ pl ]")
  "cd" '(consult-dir :which-key "consult-dir")
  "cF" '(consult-fd :which-key "consult-fd               [ F ]")
  "F" '(consult-fd :which-key "consult-fd              [ cF ]")
  "ca" '(consult-org-agenda :which-key "consult-org-agenda")
  "cg" '(consult-git-grep :which-key "consult-git-grep        [ ps ]")
  "l" '(consult-buffer :which-key "list-buffer")
  "L" '(:ignore t :which-key "buffer.....................")
  "Lr" '(revert-buffer-quick :which-key "revert (reload)")
  "Le" '(eval-buffer :which-key "evaluate buffer")
  "Li" '(ibuffer :which-key "ibuffer")
  "Ln" '(rename-buffer :which-key "rename")
  "L<" '(switch-to-prev-buffer :which-key "<prev")
  "L>" '(switch-to-next-buffer :which-key ">next")
  "Ld" '(crux-delete-file-and-buffer :which-key "delete")
  "Lc" '(clone-indirect-buffer :which-key "clone")
  "Ls" '(crux-create-scratch-buffer :which-key "scratch-buffer")
  "Lh" '(buf-move-left :which-key "move left")
  "Lj" '(buf-move-down :which-key "move down")
  "Lk" '(buf-move-up :which-key "move up")
  "Ll" '(buf-move-right :which-key "move right")
  "LL" '(tear-off-window :which-key "tear window to frame")
  "mg" '(magit-status :which-key "magit")
  "<" '(recompile :which-key "recompile")
  "sco" '(corfu-mode :which-key "corfu-mode")
  "se" '(eglot :which-key "eglot")
  "rg" '(rg :which-key "ripgrep")
  "g" '(:ignore t :which-key "git............................")
  "gS" '(git-gutter:stage-hunk :which-key "stage hunkk")
  "gs" '(git-gutter:popup-hunk :which-key "popup hunk")
  "gr" '(git-gutter:update-all-windows :which-key "refresh")
  "gg" '(git-gutter-mode :which-key "gutter-mode")
  "gn" '(git-gutter:next-hunk :which-key "jump-next")
  "gp" '(git-gutter:previous-hunk :which-key "jump-prev")
  "gd" '(magit-ediff-compare :which-key "magit-ediff-compare")
  "P" '(:ignore :which-key "python (inferior)...............")
  "Pr" '(python-shell-restart :which-key "restart")
  "PP" '(run-python :which-key "run-python")
  "Pk" '(comint-send-eof :which-key "kill  (also C-c C-d)")
  "oT" '(:ignore t :which-key "table.......................")
  "oTm" '(orgtbl-mode :which-key "mode")
  "oTc" '(orgtbl-create-or-convert-from-region :which-key "create")
  "oTT" '(org-table-toggle-column-width :which-key "toggle-hide-column")
  "oTC" '(org-table-toggle-coordinate-overlays :which-key "coordinate")
  "oc" '(org-capture :which-key "capture")
  "oa" '(:ignore t :which-key "agenda......................")
  "oag" '(org-agenda :which-key "agenda")
  "oab" '(org-timeblock :which-key "block")
)

(garids-keybind/in-org-mode
  "oo" '(org-open-at-point :which-key "open")
  "oO" '(garid/jump-label-def-of-ref-at-point-word :which-key "open ref def")
  "od" '(code-from-internet/org-link-open-parent-with-dired-at-point :which-key "directory-open")
  "," '(org-ctrl-c-ctrl-c :which-key "C-c C-c")
  "oTx" '(org-table-export :which-key "export as csv file")
  "oTs" '(org-table-sum :which-key "sum")
  "oTi" '(:ignore t :which-key "insert......................")
  "oTic" '(org-table-insert-column :which-key "column")
  "oTir" '(org-table-insert-row :which-key "row")
  "os" '(:ignore t :which-key "subtree.....................")
  "osy" '(org-copy-subtree :which-key "yank (verbatim copy)")
  "osa" '((lambda () (interactive) (org-archive-subtree-default-with-confirmation) ) :which-key "archive")
  "osY" '(org-id-copy :which-key "yank (ID)")
  "osv" '(org-mark-element :which-key "visually select element")
  "osm" '(org-refile :which-key "move/refile")
  "osd" '(org-cut-subtree :which-key "delete (aka cut)")
  "ost" '(org-toggle-narrow-to-subtree :which-key "toggle narrow")
  "osT" '(org-set-tags-command :which-key "tags")
  "osn" '(org-num-mode :which-key "num-mode")
  "oss" '(org-sort :which-key "sort")
  "osp" '(org-set-property :which-key "property")
  "osI" '(org-indent-mode :which-key "indent-mode")
  "osi" '(:ignore t :which-key "insert heading..............")
  "osia" '(org-insert-heading-after-current :which-key "after                  C-RET")
  "osih" '(org-insert-heading :which-key "heading                M-RET")
  "osis" '(org-insert-subheading :which-key "subheading")
  "osiH" '(org-insert-todo-heading :which-key "heading         todo M-S-RET")
  "osiA" '(org-insert-todo-heading-respect-content :which-key "After           todo C-S-RET")
  "osiS" '(org-insert-todo-subheading :which-key "subheading      todo")
  "ot" '(org-todo :which-key "todo")
  "oas" '(org-schedule :which-key "schedule")
  "oad" '(org-deadline :which-key "deadline")
  "oac" '(org-clock-in :which-key "clock in")
  "oaC" '(org-clock-out :which-key "clock in")
  "of" '(:ignore t :which-key "find.....................")
  "ofh" '((lambda () (interactive) (consult-org-heading) ) :which-key "heading")
  "ofn" '((lambda () (interactive) (consult-line "^#+name"   ) ) :which-key "named table/eq/src")
  "ofr" '((lambda () (interactive) (consult-line "^#+result" ) ) :which-key "result        /src")
  "ofs" '((lambda () (interactive) (consult-line "^#+begin_" ) ) :which-key "source src-block")
  "ofl" '((lambda () (interactive) (consult-line "\\\\label{.*}" ) ) :which-key "label")
  "ofr" '((lambda () (interactive) (consult-line "\\\\ref{.*}" ) ) :which-key "ref")
  "j" '(org-next-block :which-key "jump to next src-block")
  "k" '(org-previous-block :which-key "jump to prev src-block")
  "ox" '(:ignore t :which-key "export.......................")
  "oxh" '(org-html-export-to-html :which-key "html")
  "oxb" '(org-beamer-export-to-pdf :which-key "beamer")
  "oxp" '(org-latex-export-to-pdf :which-key "pdf latex")
  "oxH" '((lambda () (interactive) (org-html-export-to-html nil t) ) :which-key "Html                 subtree")
  "oxB" '((lambda () (interactive) (org-beamer-export-to-pdf nil t) ) :which-key "beamer               subtree")
  "oxP" '((lambda () (interactive) (org-latex-export-to-pdf nil t) ) :which-key "pdf latex            subtree")
  "oxr" '(org-reveal-export-to-html :which-key "reveal js")
  "oxo" '(gry/org-open-pdf :which-key "pdf open")
  "oxO" '(gry/org-open-html :which-key "html open")
  "op" '(org-latex-preview :which-key "preview")
  "ol" '(:ignore t :which-key "link........................")
  "old" '(garid-custom/org-toggle-link-n-emphasis :which-key "description-toggle")
  "oli" '(org-insert-link :which-key "insert")
  "oln" '(hydra-org-link-jumper/body :which-key "next-link")
  "olp" '(hydra-org-link-jumper/body :which-key "prev-link")
  "olo" '(org-open-at-point :which-key "open (same as SPC o o)")
  "olf" '(org-footnote-new :which-key "footnote-new")
  "olF" '(org-footnote-action :which-key "Footnote-action")
  "olc" '(org-cite-insert :which-key "citation")
  "oll" '(org-lint :which-key "lint")
  "oi" '(:ignore t :which-key "image.......................")
  "oii" '((lambda () (interactive) (insert "[[edraw:]]") ) :which-key "inline edraw")
  "oic" '(garid/put-emtpy-svg-img-at-point :which-key "create svg")
  "oip" '(org-download-clipboard :which-key "paste clipboard")
  "oiP" '(org-download-image :which-key "Paste from-path")
  "oid" '(org-download-delete :which-key "delete file")
  "oie" '(edraw-org-edit-regular-file-link :which-key "edit edraw")
  "oiE" '(org-download-edit :which-key "Edit externally")
  "oir" '(org-download-rename-at-point :which-key "rename file")
  "oit" '(garid-custom/org-toggle-display-images-n-edraw :which-key "toggle shot/hide image")
  "ois" '(:ignore t :which-key "size........................")
  "oisn" '((lambda () (interactive) (setq org-image-actual-width '(800)) ) :which-key "normal 800px")
  "oisb" '((lambda () (interactive) (setq org-image-actual-width '(1500)) ) :which-key "big    1500px")
  "oiss" '((lambda () (interactive) (setq org-image-actual-width '(400)) ) :which-key "small  400px")
)
#+end_src

* System:
** =dired= - Directory
#+begin_src emacs-lisp
(use-package dired
  :ensure   nil
  :demand   t
  :commands (dired dired-jump)
  :custom   ((dired-listing-switches "-agho --group-directories-first"))
  :hook     ((dired-mode . denote-dired-mode)
             (dired-mode . dired-omit-mode  ))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h"          'dired-single-up-directory
    "l"          'dired-single-buffer
    (kbd "C-s")  'dired-omit-mode      ;; same keybinding with my lf config
    " "          'nil
    (kbd "N")    'mkdir
    (kbd "C-n")  'mkdir)

  (when (eq system-type 'berkeley-unix)   ;; change the main ls with gnu ls in bsd
    (setq insert-directory-program "gls"))
  )
#+end_src
** =dired= - Additionals
I don't use these not much  
#+begin_src emacs-lisp
(use-package dired-single)
(use-package dired-preview :ensure t)
#+end_src
** =saveplace= - Save (last) cursor position
This mode saves the last cursor point when you close a file,
and later sets cursor at that point when you open that file.

#+begin_src emacs-lisp
(use-package saveplace
  :ensure nil
  :config (save-place-mode 1))
#+end_src
** =recentf= - Recent files
#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :demand t
  :custom
  (recentf-max-menu-items   30)
  (recentf-max-saved-items  30)
  :config
  (recentf-mode 1))
#+end_src
** shell script to open terminal                                            :shell_script:
#+begin_src bash :tangle garid/open_external_term.sh :shebang "#!/bin/bash"
# Open System termianl $TERMINAL at $1:
# nohup for exitting terminal that executed this script
# other wise terminal that executed this script just hangs there

# if $1 is directory; -> cd to this dir
if [[ -d $1 ]]; then             
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n at: $1"
	cd "$1" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is file; -> cd to parent dir
elif [[ -f $1 ]]; then
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n near: $1"
	cd "$(dirname "$1")" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is neither directory nor file -> fail
else
	notify-send "Emacs external terminal" "$1\nwas not found\nOpening at Home"
	nohup "$TERMINAL" > /dev/null &
	return 0
fi
#+end_src
** Make long file faster
[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][this article]]

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right )
(setq         bidi-inhibit-bpa          t             )
#+end_src

* Misc Packages
** =crux=
#+begin_src emacs-lisp
(use-package crux :ensure t)
#+end_src
** =command-log-mode=
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
** =format-all=
#+begin_src emacs-lisp
(use-package format-all)
#+end_src
** =popper=
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle      )
         ("M-`"   . popper-cycle       )
         ("C-M-`" . popper-toggle-type ))
  :init
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "\\*eldoc\\*"
                                   "\\*eldoc.*\\*" ;;regex
                                   "\\*Outline.*\\*" ;;regex
                                   "\\*xref\\*"
                                   "\\*Help\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   "\\*devdocs\\*"
                                   "\\*lsp-bridge-doc\\*"
                                   "\\*git-gutter:diff\\*"
                                   "\\*Org Select\\*"
                                   "\\*Org Lint\\*"
                                   "\\* Merriam-Webster Thesaurus \\*"
                                   "CAPTURE-inbox.org"
                                   "CAPTURE-20230926T010607--todo__todo.org"
                                   help-mode
                                   compilation-mode))
  :config
  (popper-mode      +1)
  (popper-echo-mode +1))
#+end_src
** =hydra=
#+begin_src emacs-lisp
(use-package hydra
  :config
  (defhydra hydra-org-link-jumper ()
    "zoom"
    ("n" org-next-link     "next")
    ("p" org-previous-link "prev"))
  )
#+end_src

** =exercism=
#+begin_src emacs-lisp
(use-package exercism)
#+end_src
** =zoom-window=
#+begin_src emacs-lisp
(use-package zoom-window
  :custom
  (zoom-window-mode-line-color "dark slate gray")
  )
#+end_src
** COMMENT =auto-revert-mode=
#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :delight " arev")
#+end_src
** test karthinks consult reftex                                                    :test:
#+begin_src emacs-lisp
(use-package consult-reftex
  :straight (consult-reftex
             :type git
             :host github
             :branch "master"
             :repo "karthink/consult-reftex"))


(use-package reftex-xref
  :straight (reftex-xref
             :type git
             :host github
             :branch "master"
             :repo "karthink/reftex-xref"))
#+end_src
* Custom set variable:
[[https://www.youtube.com/watch?v=tw2-rI2bxSg&t=1s][Initial idea from Systems crafter]], [[https://emacs.stackexchange.com/a/18785/38482][and code structure from this answer on emacs stackexchange]], and need to set ~enble-local-eval~ to ~t~.

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   '((eval setq org-download-image-dir
           (file-relative-name
            (concat "./data/"
                    (file-name-as-directory
                     (car
                      (split-string
                       (file-name-base
                        (buffer-file-name))
                       "--"))))))
     (dired-omit-files . "\\`[.]?#\\|\\`[.][.]?\\'\\|\\.html\\'\\|\\.tex\\'")))) ;
#+end_src
* Finish Notifier
#+begin_src emacs-lisp
(call-process-shell-command "notify-send \"Emacs\" \"Emacs has initialized\" &") 
#+end_src

