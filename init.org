#+startup:      show2levels
#+title:        Garids Emacs Configuration
#+author:       Garid Z.
#+creator:      Garid Z.
#+email:        garidzorigoo@gmail.com
#+auto_tangle:  t
#+property:     header-args :tangle init.el
#+setupfile:    ~/.config/emacs/org-templates/level-0-xelatex-fonts-conf.org
#+options:      toc:t tags:nil  todo:t  tasks:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://orgmode.org/worg/style/worg.css"/>


* From shell you can run make run:
#+begin_src makefile :noeval :tangle Makefile
# make run to extract init.el from init.org from shell
run:
	emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "init.org")'
	chmod +x 'garid/edit_img.sh'
	chmod +x 'garid/open_external_term.sh'
	git submodule foreach git pull origin master

refresh-packages:
	emacs --batch --eval "(setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\") (\"elpa\" . \"https://elpa.gnu.org/packages/\") (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")))" --eval "(package-refresh-contents)"
#+end_src

* Package Manager:
** Package Repositories 
I'm pulling packages from following 3 places (not sure that I need all three): 

1. [[https://melpa.org/packages/]]
2. [[https://elpa.gnu.org/packages/]]
3. [[https://elpa.nongnu.org/nongnu/]]

#+begin_src emacs-lisp
;; Package repos
(setq package-archives
      '(("melpa"   . "https://melpa.org/packages/"     )
        ("elpa"    . "https://elpa.gnu.org/packages/"  )
        ("nongnu"  . "https://elpa.nongnu.org/nongnu/" )))
#+end_src

** Initialize use-package manager
#+begin_src emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)
#+end_src

** Straight.el initialization
:PROPERTIES:
:ID:       2bc28375-3cf3-4784-8a34-ecb1a2b0c24a
:END:
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Vi Movement and other movement related
** vim-undo
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src
** evil

[[https://github.com/emacs-evil/evil][Evil]] stands for Extendable-Vi-Layer for Emacs.
It emulates vi motion inside Emacs. 

#+begin_src emacs-lisp
;; Vim Bindings
(use-package evil
  :demand t
  :bind (;; ("<escape>" . keyboard-escape-quit  )  commented on nov21
         ;; ("M-j"      . evil-scroll-line-down )  C-e
         ;; ("M-k"      . evil-scroll-line-up   )  C-y
         ;; ("M-d"      . evil-scroll-page-down )  G
         ;; ("M-u"      . evil-scroll-page-up   )  g g
         )
  :init (setq evil-want-keybinding      nil
              evil-undo-system         'undo-fu )

  ;; evil-want-C-i-jump     nil       ;; test I may need jumpy back and forth
  ;; for org-cycle (tab) working for terminal
  :config
  (evil-define-key 'normal  org-mode-map   (kbd "TAB") #'org-cycle)
  ;;(evil-define-key 'normal 'prog-mode-map  (kbd "K")   'eldoc-box-help-at-point)
  (evil-define-key 'normal 'prog-mode-map  (kbd "K")   'eldoc)
  ;; cuz https://emacs.stackexchange.com/a/73457/38482
  (evil-mode 1))
#+end_src
** evil-collection
[[https://github.com/emacs-evil/evil-collection][Evil-collection]] is sets of evil keybindings for various modes in Emacs.
Most notably I like to use magit, sometimes email.

- I may need to reconside using this. and do my own keybindings for the major modes.

#+begin_src emacs-lisp
;;; Vim Bindings Everywhere else
(use-package evil-collection
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src
** evil-surround
I sometimes use. It can wrap (visually) selected region with quotation mark or parenthesis.

#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode))
#+end_src
** evil testing (not used that much)
#+begin_src emacs-lisp
(use-package evil-textobj-tree-sitter :ensure t)
(define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
(define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
(define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer")))
#+end_src
** vim-like scroll (1 by 1)
#+begin_src emacs-lisp
(setq scroll-step 1)
(setq scroll-margin 7)
(setq scroll-conservatively 9999)
#+end_src
* Theme & Colors
** Font
#+begin_src emacs-lisp :results none
;; if my main machine use following fonts
;; On arch, I installed with =yay -s ttf-iosevka-term-ss06=
(when (eq system-type 'gnu/linux)
  (set-face-attribute       'default nil :font "Iosevka Term SS06" :height 120)
  (setq default-frame-alist '((font . "Iosevka Term SS06")))
  (set-fontset-font "fontset-default"
                    'japanese-jisx0208
                    '("DejaVu Sans" . "iso10646-1"))
  (message "hello from linux"))

;; for my openbsd machine use this font
;; On openbsd, I installed with =pkg_add iosevka=
(when (eq system-type 'berkeley-unix)
  (set-face-attribute       'default nil :font "Iosevka Term" :height 80)
  (setq default-frame-alist '((font . "Iosevka Term")))
  (set-fontset-font "fontset-default"
                    'japanese-jisx0208
                    '("DejaVu Sans" . "iso10646-1"))
  (message "hello from bsd"))
#+end_src

** Theme
#+begin_src emacs-lisp :results none
;; (setq modus-themes-mode-line '(accented borderless)
;;       modus-themes-bold-constructs t
;;       modus-themes-italic-constructs t
;;       modus-themes-fringes 'subtle
;;       modus-themes-tabs-accented t
;;       modus-themes-paren-match '(bold intense)
;;       modus-themes-prompts '(bold intense)
;;       ;; modus-themes-completions 'opinionated
;;       modus-themes-org-blocks 'tinted-background
;;       modus-themes-scale-headings t
;;       modus-themes-region '(bg-only)
;;       modus-themes-headings
;;       '((1 . (rainbow overline background 1.0))
;;         (2 . (rainbow background 1.0))
;;         (3 . (rainbow bold 1.0))
;;         (t . (semilight 1.0))))

;; ;; Load the dark theme by default
;; (load-theme 'modus-vivendi t)
;; (enable-theme 'modus-vivendi)           ;

(use-package uwu-theme
  :config
  (enable-theme 'uwu)

  (set-face-background 'mode-line "#2B3260")
  (set-face-background 'mode-line-inactive "#2B3244")
  )
#+end_src

** Terminal cursor
#+begin_src emacs-lisp :results none
(use-package evil-terminal-cursor-changer
  :config (evil-terminal-cursor-changer-activate))

#+end_src
** Emacs Interface config
#+begin_src emacs-lisp
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode   -1)        ; Disable the toolbar
(tooltip-mode    -1)        ; Disable tooltips
;; (set-fringe-mode 15)        ; Give some breathing room
(menu-bar-mode   -1)        ; Disable the menu bar
#+end_src
** Delight
#+begin_src emacs-lisp
(use-package delight
  :config
  (delight
   '(
     ;; ----------  major modes  ----------------------------------
     (sh-mode               "shl "                              )
     (org-mode              "org "                              )
     (python-mode           "pyt "                              )
     (python-ts-mode        "pyt "                              )
     (dired-mode            "dir "                              )
     (help-mode             "hlp "                              )
     ;; ----------  minor modes  ----------------------------------
     (dired-omit-mode       "dro "    dired                     )
     (org-roam-mode         "orm "    org-roam                  )
     (which-key-mode        "wky "    which-key                 )
     (git-gutter-mode       "ggt "    git-gutter                )
     (org-auto-tangle-mode  "tng "    org-auto-tangle           )
     (auto-revert-mode      "arv "    autorevert                )
     ;;(org-indent-mode     "ind "    org-indent                )
     (org-indent-mode        nil      org-indent                )
     (org-num-mode          "onm "    org-indent                )
     (org-src-mode          "src "    org                       )
     (yas-minor-mode        "yas "    yasnippet                 )
     (eldoc-mode            "eld "    eldoc                     )
     (magit-status-mode     "mgt "    magit                     )
     (lisp-interaction-mode "eli "    elisp-mode                )
     (emacs-lisp-mode       "eli "    elisp-mode                )
     (command-log-mode      "clm "    command-log-mode          )
     (flymake-mode          "flm "    flymake                   )
     (lsp-bridge-mode       "lsp "    lsp-bridge                )
     (evil-collection-unimpaired-mode "evc "  evil-collection   )
     (all-the-icons-dired-mode     nil   all-the-icons-dired.el )
     (visual-line-mode             nil   simple                 ))))
#+end_src
** COMMENT Display Number & cursor-line highlightnig
#+begin_src emacs-lisp
;; setting line
(use-package display-line-numbers
  :config
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
  )

(global-hl-line-mode 1)
#+end_src
** COMMENT Tokyo theme
#+begin_src emacs-lisp
(require 'color)

(use-package tokyo-theme
  :straight (tokyo-theme :type git :host github :repo "rawleyfowler/tokyo-theme.el")
  :config (enable-theme 'tokyo)
  )
#+end_src

** COMMENT Transparency
#+begin_src emacs-lisp :results none
;;  ;;transparent emacs
;;  (add-to-list 'default-frame-alist '(alpha 95 95))
;;  
;;  (defun toggle-transparency ()
;;    (interactive)
;;    (let ((alpha (frame-parameter nil 'alpha)))
;;      (if (eq
;;       (if (numberp alpha)
;;           alpha
;;         (cdr alpha)) ; may also be nil
;;       100)
;;      (set-frame-parameter nil 'alpha '(95 . 95))
;;        (set-frame-parameter nil 'alpha '(100 . 100)))))
#+end_src
* M-x completion-selection-suggestion
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ("C-j"   . vertico-next        ) ("M-j"   . vertico-next        )
              ("C-k"   . vertico-previous    ) ("M-k"   . vertico-previous    )
              ("C-f"   . vertico-exit        ) ("M-f"   . vertico-exit        )
              ("C-u"   . vertico-scroll-up   ) ("M-u"   . vertico-scroll-up   )
              ("C-d"   . vertico-scroll-down ) ("M-d"   . vertico-scroll-down )
              ;; ("M-p"   . vertico-next        ) ("M-n"   . vertico-previous    )
              ("M-h"   . vertico-exit  ))
  :custom
  (vertico-cycle t)
  (vertico-count 20)
  ;; (vertico-resize t)
  (vertico-resize nil)
  :init (vertico-mode)
  ;;:config
  ;; (eval-when-compile (require 'cl-lib))
  ;; (defvar-keymap vertico-reverse-map
  ;;   :doc "Additional keymap activated in reverse mode."
  ;;   "<remap> <beginning-of-buffer>" #'vertico-last
  ;;   "<remap> <minibuffer-beginning-of-buffer>" #'vertico-last
  ;;   "<remap> <end-of-buffer>" #'vertico-first
  ;;   "<remap> <scroll-down-command>" #'vertico-scroll-up
  ;;   "<remap> <scroll-up-command>" #'vertico-scroll-down
  ;;   "<remap> <next-line>" #'vertico-previous
  ;;   "<remap> <previous-line>" #'vertico-next
  ;;   "<remap> <next-line-or-history-element>" #'vertico-previous
  ;;   "<remap> <previous-line-or-history-element>" #'vertico-next
  ;;   "<remap> <backward-paragraph>" #'vertico-next-group
  ;;   "<remap> <forward-paragraph>" #'vertico-previous-group)

  ;; (define-minor-mode vertico-reverse-mode
  ;;   "Reverse the Vertico display."
  ;;   :global t :group 'vertico
  ;;   ;; Reset overlays
  ;;   (dolist (buf (buffer-list))
  ;;     (when-let ((ov (buffer-local-value 'vertico--candidates-ov buf)))
  ;;       (overlay-put ov 'before-string nil)))
  ;;   (cl-callf2 rassq-delete-all vertico-reverse-map minor-mode-map-alist)
  ;;   (when vertico-reverse-mode
  ;;     (push `(vertico--input . ,vertico-reverse-map) minor-mode-map-alist)))

  ;; (cl-defmethod vertico--display-candidates (lines &context (vertico-reverse-mode (eql t)))
  ;;   (move-overlay vertico--candidates-ov (point-min) (point-min))
  ;;   (setq lines (nreverse lines))
  ;;   (unless (eq vertico-resize t)
  ;;     (setq lines (nconc (make-list (max 0 (- vertico-count (length lines))) "\n") lines)))
  ;;   (let ((string (apply #'concat lines)))
  ;;     (add-face-text-property 0 (length string) 'default 'append string)
  ;;     (overlay-put vertico--candidates-ov 'before-string string)
  ;;     (overlay-put vertico--candidates-ov 'after-string nil))
  ;;   (vertico--resize-window (length lines)))

  ;; (provide 'vertico-reverse)

  ;; (vertico-reverse-mode 1)
  ;;
  )
#+end_src
*** COMMENT Posframe
#+begin_src emacs-lisp
(use-package vertico-posframe
  :ensure t
  :config
  (vertico-posframe-mode)
  (set-face-background 'vertico-posframe "#3c3836")
  (setq vertico-count 30)
  )
#+end_src
** margin
#+begin_src emacs-lisp
;; brief explanations on M-x entries
(use-package marginalia
  :after vertico
  :ensure t
  :custom (marginalia-annotators
           '(marginalia-annotators-heavy
             marginalia-annotators-light nil))
  :init (marginalia-mode))
#+end_src
** consult
#+begin_src emacs-lisp
(use-package consult)
;;  :bind (("M-f"  . consult-line))
#+end_src
*** consult-org-roam
#+begin_src emacs-lisp
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize consult-org-roam-forward-links :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search)
   )
#+end_src
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  ;;(completion-styles '(orderless basic))
  (completion-styles '(orderless flex))
  ;; (completion-category-overrides
  '((file (styles basic partial-completion))))
#+end_src
** savehist
#+begin_src emacs-lisp
(use-package savehist
  :init (savehist-mode))
#+end_src
* Org
** Org mode configuration
#+caption: org config
#+name: lst_org
#+begin_src emacs-lisp :noeval
(use-package org
  ;; :requires (org-tempo org-indent)
  ;; (require 'org-tempo)
  ;; (require 'org-indent)
  :bind (:map org-mode-map
              ("C-S-j" . org-next-visible-heading     )
              ("C-S-k" . org-previous-visible-heading ))

  :hook (org-mode . garid-custom/org-mode-hooked-func)
  :custom
  (org-ellipsis                      " ▼"            );; folded subtree symbol
  (org-hide-emphasis-markers         t               )
  (org-log-done                      t               )
  (org-image-actual-width            '(800)          );; sets images size TODO for different size
  (org-src-tab-acts-natively         t               )
  (org-src-preserve-indentation      nil             );; scr-blk
  (org-src-fontify-natively t)
  (org-edit-src-content-indentation  0               );; scr-blk
  (org-startup-folded                "fold"          );; folds property drawers, good for roam nodes
  (org-plantuml-jar-path             "/usr/share/java/plantuml/plantuml.jar" );; this may differ on different machines
  (org-file-apps '((auto-mode                  . emacs                     )
                   ("\\.gif\\'"                . "mpv     \"%s\""          )
                   ("\\.mp4\\'"                . "mpv     \"%s\""          )
                   ("\\.png\\'"                . "sxiv    \"%s\""          )
                   ("\\.svg\\'"                . "inkview \"%s\""          ) ;; inkscape's viewer
                   ("\\.jpeg\\'"               . "sxiv    \"%s\""          )
                   ("\\.jpg\\'"                . "sxiv    \"%s\""          )
                   ;; ("\\.html\\'"               . "brave   \"%s\""          )
                   ("\\.html\\'"               . "thorium-browser   \"%s\""          )
                   ("\\.pdf\\'"                . "sioyek  \"%s\""          )
                   ("\\.pdf::\\([0-9]+\\)?\\'" . "sioyek  \"%s\" --page %1")
                   ("\\.mkv\\'"                . "mpv     \"%s\""          )
                   ("\\.xopp\\'"               . "xournalpp \"%s\""        )))


  (org-todo-keywords      '((sequence
                             "TODO(t)" "NEXT(n)" "WAIT(w)"
                             "|"       "DONE(d)" "CNCL(c)")))

  (org-todo-keyword-faces '(("TODO"  . org-warning )
                            ("NEXT"  . "orange"    )
                            ("WAIT"  . "yellow"    )
                            ("DONE"  . "dim gray"  )
                            ("CNCL"  . (:foreground "gray30" :weight bold))))

  ;; (org-latex-listings               t)  apparently this was obsolete thus swaped with below
  (org-latex-src-block-backend          t                                      )
  (org-latex-format-headline-function   'garid-custom/latex-formattig-headings )
  (org-latex-active-timestamp-format     "\\textcolor{orange}{%s}"             )
  (org-latex-inactive-timestamp-format   "\\textcolor{Brown}{%s}"              )
  (org-latex-pdf-process                '("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))

  ;; org-highlight-latex-and-related     '(latex script entities) -- lets try this for performance
  (org-highlight-latex-and-related        '(latex entities native)) ;; -- lets try this for performance
  ;; (org-highlight-latex-and-related        nil) ;; -- lets try this for performance

  ;;:init
  :config
  (plist-put    org-format-latex-options   :scale 1.7      )    ;; latex equation previewing
  (add-to-list 'org-latex-packages-alist   '("" "listings" ))
  (add-to-list 'org-latex-packages-alist   '("" "color"    ))

  (require 'org-tempo)
  ;; org tempo should I make it yassnippet?
  (add-to-list 'org-structure-template-alist '("el"   .  "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("go"   .  "src go"))
  (add-to-list 'org-structure-template-alist '("sh"   .  "src sh"))
  (add-to-list 'org-structure-template-alist '("te"   .  "src text" ))
  (add-to-list 'org-structure-template-alist '("do"   .  "src dot" ))
  (add-to-list 'org-structure-template-alist '("do1"  .  "src dot :file /home/garid/orgfiles/... :exports results :tangle no :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("tm"   .  "src tmux" ))
  (add-to-list 'org-structure-template-alist '("tm1"  .  "src tmux :session tmuxSess1 :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("tm2"  .  "src tmux :session tmuxSess2 :eval never-export" ))
  (add-to-list 'org-structure-template-alist '("py"   .  "src python"))
  (add-to-list 'org-structure-template-alist '("py1"  .  "src python :session pySess1 :results output :exports both :cache yes :eval never-export"))
  (add-to-list 'org-structure-template-alist '("py2"  .  "src python :session pySess2 :results output :exports both :cache yes :eval never-export"))
  (add-to-list 'org-structure-template-alist '("sq"   .  "sqlite"))
  (add-to-list 'org-structure-template-alist '("mk"   .  "src makefile :tangle no"))
  (add-to-list 'org-structure-template-alist '("ba"   .  "abstract"))
  (require 'org-indent)


  ;;   (if (string= "unspecified-bg" (face-attribute 'default :background))
  ;;       (progn
  ;;        (set-face-attribute 'org-block nil            :background "#020223")
  ;;        (set-face-attribute 'org-block-begin-line nil :background "#020223") ;; :extend t)
  ;;        (set-face-attribute 'org-block-end-line nil   :background "#020223") ;; :extend t)
  ;;        )
  ;;
  ;;     (progn
  ;;        (set-face-attribute 'org-block nil            :background "#020223")
  ;;        (set-face-attribute 'org-block-begin-line nil :background "#020223") ;;   :extend t)
  ;;        (set-face-attribute 'org-block-end-line nil   :background "#020223") ;;   :extend t)
  ;;      ;; (set-face-attribute 'org-block nil :background (color-darken-name (face-attribute 'default :background) 30))
  ;;      ;; (set-face-attribute 'org-block-begin-line nil :background (color-darken-name (face-attribute 'default :background) 30))
  ;;      ;; (set-face-attribute 'org-block-end-line nil :background (color-darken-name (face-attribute 'default :background) 30))
  ;;      )
  ;;     )

  (defun my/org-num-format (numbering)
    "My own numbering function uses two-digit numbers (0-padded on the left) for everything but the first number. It replaces the built-in `org-num-default-format` function. `NUMBERING' is a list of numbers."
    (concat
     (number-to-string (car numbering)) "." (mapconcat (lambda (x) (format "%02d" x)) (cdr numbering) ".") " "))


  (setq org-num-format-function #'my/org-num-format)


  )
#+end_src

** Org-babel languages related
#+begin_src emacs-lisp
(use-package ob-nim)
(use-package ob-go)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python     . t) (emacs-lisp . t)
   (latex      . t) (shell      . t)
   (dot        . t) (makefile   . t)
   (sqlite     . t) (gnuplot    . t)
   (nim        . t) (plantuml   . t)
   (maxima     . t) (calc       . t)
   (awk        . t) (go         . t)
   ))
#+end_src

#+RESULTS:

** Org-bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :after  org
  :hook   (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list
           '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org inline transparent image background                      :customFunc:
#+begin_src emacs-lisp
(defcustom org-inline-image-background nil
  "The color used as the default background for inline images.
When nil, use the default face background."
  :group 'org
  :type '(choice color (const nil)))

(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; Get this return result style from `create-image'.
    (append (list file type data-p)
            (list :background (or org-inline-image-background (face-background 'default)))
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)

(setq org-inline-image-background "white")
#+end_src

#+RESULTS:
: white

** Org toggle hide/shot hyperlink                               :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-toggle-link-n-emphasis ()
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (org-toggle-link-display)
    (font-lock-update))
#+end_src

** Org hooked function                                          :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-mode-hooked-func ()
  (org-indent-mode)
  (org-num-mode)
  ;; (auto-fill-mode 0)
  ;; (visual-line-mode 1)
  ;; (display-line-numbers-mode -1)
  ;; (add-to-list 'completion-at-point-functions #'yasnippet-capf)
  ;; (add-to-list 'completion-at-point-functions #'tags-completion-at-point-function)

  (when buffer-file-name ;; had to check buffer had file. (i.e. sometimes buffer don't have file yet, e.g. org-captures)
    ;; (message (concat buffer-file-name " -- " (vc-find-root buffer-file-name ".git")))
    (if (vc-find-root buffer-file-name ".git") ;; (vc-root-dir)    ;; check if org file is in git directory
        (setq org-download-image-dir   (concat (vc-find-root buffer-file-name ".git")
                                               "/od-imgs/"
                                               (file-name-base buffer-file-name))
              org-download-heading-lvl nil) ;; nil == orgdownload not mkdir images in each corresponding directory

      (setq org-download-image-dir      (concat "./shiod-imgs/"
                                                (file-name-base buffer-file-name))
            org-download-heading-lvl     nil)
      ) ;; nil == orgdownload not mkdir images in each corresponding directory
    )
  )
#+end_src

* Org Zettelkasten like (roam & denote)
** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  ;; :requires org-roam-dailies ??
  :ensure t
  :custom
  (org-roam-node-display-template (concat "${title:*} "
                                          (propertize "${tags:30}"
                                                      'face 'org-tag)))
  (org-roam-v2-ack t)
  (org-roam-directory "~/Pensieve/")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
   `(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org"
                         ,(concat
                           "#+filetags: :nohtmlexport:\n"
                           "#+title: %<%Y-%m-%d>\n"
                           "#+auto_tangle: nil\n"
                           "#+startup: show2levels\n"
                           "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                           )))))

  (org-roam-capture-templates
   `(("d" "Default" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :notag:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("r" "Research" plain "* %?"
      :if-new (file+head "g_research/%<%Y%m%d%H%M%S>-${slug}__research.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :research:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)

     ("k" "Kanji" plain "* %?"
      :if-new (file+head "g_kanji/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :kanji:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("p" "Programming language" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :plang:\n"
                                  "#+author: Garid Zorigoo\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("m" "Meta (meaning access nodes)" plain "* %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}__meta.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :meta:\n"
                                  "#+date: %U\n"
                                  "#+setupfile: ~/.config/emacs/org-templates/level-0-website-export-template.org"
                                  ))
      :unnarrowed t)


     ("P" "Project" plain
      "* Goals\n\n%?* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "g_project/%<%Y%m%d%H%M%S>-${slug}.org"
                         ,(concat "#+title: ${title}\n"
                                  "#+filetags: :Project:\n"
                                  "#+auto_tangle: nil"))
      :unnarrowed t)

     ))

  :config
  (require 'org-roam-dailies)
  (org-roam-setup)
  (org-roam-db-autosync-mode))
#+end_src

** Org-Roam (custom) function for inserting node                :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates
	 (list (append (car org-roam-capture-templates)
		       '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
** Org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src
** Denote
#+begin_src emacs-lisp
(use-package denote
  :custom
  (denote-directory       (expand-file-name "~/Documents/Personal"))
  (denote-known-keywords '(  "finance"  "failures"  "philosophy"  )))
#+end_src
** Bibliography
#+begin_src emacs-lisp
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography (list (concat (file-name-as-directory denote-directory)
                                              "20220101T010101--references__study.bib")))
  ;; (org-cite-global-bibliography '("~/Documents/Personal/20220101T010101--references__study.bib"))
  (org-cite-insert-processor    'citar                        )
  (org-cite-follow-processor    'citar                        )
  (org-cite-activate-processor  'citar                        )
  (citar-bibliography            org-cite-global-bibliography )
  (bibtex-dialect               'biblatex                     )
  ;; https://lucidmanager.org/productivity/emacs-bibtex-mode/
  (citar-library-paths           (list (concat (file-name-as-directory denote-directory) "lit/")) )
  ;; ("~/Documents/papers")
  )

(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir              "citar-notes")
  (citar-org-roam-note-title-template (concat "=${=key=}= - ${title}\n"
                                              "#+subtitle: Garid's notes on this article\n"
                                              "#+author: paper authors: ${author}\n"
                                              "#+filetags: :literature:\n\n"
                                              "*Ideas\n\n* Notes\n\n"))
  :config
  (citar-org-roam-mode)
  )

;;(citar-org-roam-note-title-template "=${=key=}= - ${title}\n#+subtitle: Garid's notes on this article\n#+author: paper authors: ${author}\n#+filetags: :literature:\n\n* Ideas\n\n* Notes\n\n")
#+end_src

** Some used functions
#+begin_src emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-exclude-by-tag (tag-name)
  (lambda (node)
    (null (member tag-name (org-roam-node-tags node)) )
    ))

(defun my/org-roam-find-node-exclude-kanji ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find nil nil (lambda (node)
                                (null (member "kanji" (org-roam-node-tags node)) )
                                ))
  )

(defun my/org-roam-find-node-using-tag ()
  (interactive)
  ;;(org-roam-node-find nil nil (my/org-roam-exclude-by-tag "kanji"))
  (org-roam-node-find
   nil nil (lambda (node)
             (null (member
                    (completing-read "Select tag to search: " (org-roam-tag-completions) nil t "")
                    (org-roam-node-tags node)) )
             ))
  )
#+end_src
* Org Time managements
** Org gtd
#+begin_src emacs-lisp
(use-package org-gtd
  :after org
  :init
  (setq org-gtd-update-ack "3.0.0")
  (setq org-gtd-directory (concat (denote-directory) "/gtd"))
  (org-gtd-mode 1)
  )
#+end_src

#+RESULTS:

** Org agenda files
#+begin_src emacs-lisp :results none
;; (setq org-agenda-files (directory-files-recursively denote-directory "\\.org$"))
;; (setq org-agenda-files (directory-files denote-directory t "\\.org$"))
;; (setq org-agenda-files (directory-files-recursively "/home/garid/gtd" "^[a-z].*\\.org$"))
;; (setq org-agenda-files (directory-files-recursively "/home/garid/gtd" "^[a-z].*\\.org$"))
;; (setq org-agenda-files (directory-files-recursively (concat (denote-directory) "gtd") "^[a-z].*\\.org$"))
(setq org-agenda-files nil)


(define-key org-agenda-mode-map "j" 'evil-next-line)
(define-key org-agenda-mode-map "k" 'evil-previous-line)


(defun garid/write-agenda-to-file()
  (interactive)
  (org-agenda-write "/tmp/current-agenda-text")
  )

(add-hook 'org-agenda-finalize-hook 'garid/write-agenda-to-file)
#+end_src
** Org capturing related
#+begin_src emacs-lisp :results none
(require 'org-protocol)
(setq org-agenda-start-with-log-mode t
      org-default-notes-file (concat (file-name-as-directory denote-directory)
                                     "20230926T010607--todo__todo.org")
      ;; org-capture-templates '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
      ;;                          "* TODO %?\n  %i\n  %a")

      ;;                         ("s" "Scheduled Todo" entry (file+headline org-default-notes-file "Scheduled")
      ;;                          "* TODO %?\n SCHEDULED: %t\n %i\n  %a")

      ;;                         ("r" "random" entry (file+headline org-default-notes-file "Random")
      ;;                          "* Later %?\n  %i\n  %a")

      ;;                         ("T" "Todo (xclip)" entry (file+headline org-default-notes-file "Tasks")
      ;;                          "* TODO [[%x]]\n  %i\n  %a")

      ;;                         ("p" "Protocol" entry (file+headline org-default-notes-file      "Inbox")
      ;;                          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
      ;;                         ("L" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
      ;;                          "* %? [[%:link][%:description]] \nCaptured On: %U")

      ;;                         ;;("j" "Journal" entry (file+datetree "~/org/journal.org")
      ;;                         ;; "* %?\nEntered on %U\n  %i\n  %a")

      ;;                         ("R" "Random (xclip)" entry (file+headline org-default-notes-file "Random")
      ;;                          "* Later [[%x]]\n  %i\n  %a"))
      )
#+end_src
** Org timeblock
#+begin_src emacs-lisp
(use-package org-timeblock)
#+end_src
** org timeline
#+begin_src emacs-lisp
(use-package org-timeline
  :init
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
  )
#+end_src
* Org Exports
** Org \LaTeX{} export heading format (e.g. Todo color)         :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/latex-formattig-headings
    (todo todo-type priority text tags _info)
  "Default format function for a headline.
  See `org-latex-format-headline-function' for details."
  (concat
   (and todo
        ;; (format "{\\framebox{\\bfseries\\rfamily\\color{%s} %s}} "
        ;; (format "{\\bfseries\\rfamily\\color{%s} %s} "
        ;; (format "{\\rfamily\\color{%s} %s} "
        ;; (format "{\\color{%s} %s} "
        (format "{\\framebox{\\bfseries\\color{%s} %s}} "
                (pcase todo-type
                  ('todo "olive") ('done "teal")
                  ;;('todo "Black") ('done "Brown")
                  )
                todo))
   (and priority (format "\\framebox{\\#%c} " priority)) text
   (and tags
        (format "\\hfill{}\\textsc{%s}"
                (mapconcat #'org-latex--protect-text tags ":")))))
#+end_src

** XeLaTeX equation preview fix                                 :customFunc:
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-preview-latex-default-process 'imagemagick)
  (setf (plist-get (cdr (assq 'imagemagick org-preview-latex-process-alist)) :latex-compiler)
        '("xelatex -interaction nonstopmode -output-directory %o %f")))
#+end_src
** Ox-hugo 
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure nil 
  :after ox)
#+end_src
** Org export directory                                         :customFunc:
ref: [[https://emacs.stackexchange.com/a/7989/38482][this answer on emacs-stackexchange]]

#+begin_src emacs-lisp
(defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
#+end_src
** Ox-reveal
#+begin_src emacs-lisp
(use-package ox-reveal)
#+end_src
** Website from org-roam directory
[[id:e7ee081e-a02b-4ab9-bccc-327a92bf2b09][create website from org-roam]]

#+begin_src emacs-lisp
(setq org-html-validation-link            nil ;; Don't show validation link
      org-html-head-include-scripts       nil ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      ;;org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
      org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg7.css\"/>"
      ;; org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg-zenburn.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/worg-classic.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://orgmode.org/worg/style/zenburn-emacs.css\"/>"
      ;;org-html-head "<link rel=\"stylesheet\" href=\"https://orgmode.org/worg/style/worg.css\" />"
      ;;org-html-head "<link rel=\"stylesheet\" href=\"https://gongzhitaao.org/orgcss/org.css\" />"
      )
#+end_src

#+RESULTS:
: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />

#+begin_src emacs-lisp :exports code :results verbatim
(setq
 org-publish-project-alist
 `(("Pensieve: org -> html"
    :base-directory ,org-roam-directory
    ;; :base-directory "~/Pensieve/"
    :recursive t
    :publishing-function org-html-publish-to-html
    :publishing-directory ,(concat org-roam-directory "website")
    :exclude ".*daily/.*org"  ;;; for excluding -daily
    ;; :publishing-directory "/tmp/asdf"
    ;;:publishing-directory (concat org-roam-directory "website")
    ;; :section-numbers nil
    :section-numbers  org-export-with-section-numbers
    :with-toc         t
    :html_link_home  "index.html"
    ;; :html-preamble "This is just a test"
    :html-preamble "<div id=\"navbar\"> <ul>
  <div class=\"stork-wrapper\">
    <a href=\"/~zgarid/index.html\">Home</a>             &nbsp;
    <a href=\"..\">Up/Back</a>                           &nbsp;
    <a href=\"/~zgarid/meta-research.html\">Research</a> &nbsp;
    <a href=\"/~zgarid/meta-python.html\">Python</a>     &nbsp;
    <a href=\"/~zgarid/meta-cli.html\">CLI</a>           &nbsp;
    <a href=\"/~zgarid/meta-org.html\">Org-Mode</a>      &nbsp;
    <a href=\"/~zgarid/search.html\">Search</a>          &nbsp;
    <input data-stork=\"federalist\" class=\"stork-input\" />
    <div data-stork=\"federalist-output\" class=\"stork-output\"></div>
  </div>
</ul>
<hr>
</div>
<script src=\"https://files.stork-search.net/releases/v1.6.0/stork.js\"></script>
<script>
stork.register(
    'federalist', 'https://www.ep.sci.hokudai.ac.jp/~zgarid/garid_stork.st'
)
</script>
"
    ;; 
    ;; 'https://github.com/garid3000/testy/raw/master/garid_stork.st'
    ;; :html-divs ((preamble "header"  "preamble")
    ;;             (content   "main"   "content")
    ;;             (postamble "footer" "postamble"))

    )
   ;;:html_head "<link rel=\"stylesheet\" href=\"/home/garid/org.css\">"
   ;; not sure why above line doesn't change css of thml output
   ;; that's why I copied from
   ;;https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/
   ;; above


   ("Pensieve: od-imgs change position"
    :base-directory ,(concat org-roam-directory "od-imgs/")
    :base-extension "jpg\\|gif\\|png\\|svg"
    :recursive t
    ;;:publishing-directory "/ssh:user@host:~/html/images/"
    :publishing-directory ,(concat org-roam-directory "website/od-imgs")
    ;; :publishing-directory "/tmp/asdf/img"
    :publishing-function org-publish-attachment)

   ;; ("Pensieve: org -> txt"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  ;; :with-toc         t
   ;;  )

   ;; ("Pensieve: org -> txt 2"
   ;;  :base-directory ,org-roam-directory
   ;;  ;; :base-directory "~/Pensieve/"
   ;;  :recursive t
   ;;  :publishing-function org-ascii-export-to-ascii
   ;;  :publishing-directory ,(concat org-roam-directory "txt_for_stork")
   ;;  :exclude ".*daily/.*org"  ;;; for excluding -daily
   ;;  ;; :publishing-directory "/tmp/asdf"
   ;;  ;;:publishing-directory (concat org-roam-directory "website")
   ;;  ;; :section-numbers nil
   ;;  :section-numbers  nil
   ;;  :with-toc         nil
   ;;  ;;:html_link_home  "index.html"
   ;;  )

   )
 )
#+end_src

#+RESULTS:
: (("Pensieve org -> html00" :base-directory "~/Pensieve" :publishing-function org-html-publish-to-html :publishing-directory "/tmp/garids_pensieve" :section-numbers nil :with-toc nil) ("Pensieve export imgs" :base-directory "~/Pensieve/od-imgs/" :base-extension "jpg\\|gif\\|png\\|svg" :recursive t :publishing-directory "/tmp/garids_pensieve/od-imgs" :publishing-function org-publish-attachment))

** COMMENT latex
#+begin_src emacs-lisp
(use-package auctex)
#+end_src

* Org Misc:
** Org-download for handling images 
*** Org-download package itself
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :custom
  (org-download-display-inline-images  nil                                 )
  ;;(org-download-edit-cmd             "/home/garid/.garid/edit_img.sh %s" )
  (org-download-edit-cmd               (concat user-emacs-directory
                                               "garid/edit_img.sh %s"))

  :config
  ;; (defun my-org-download-set-dir ()     ;
  ;;   "Set `org-download-image-dir` to the directory of the current
  ;;       buffer's file."
  ;;   (setq-local
  ;;    org-download-image-dir (concat (file-name-directory (buffer-file-name))
  ;;                                   "/images/" (file-name-base buffer-file-name) "/")
  ;;    org-download-heading-lvl nil))  ;; suggestion by https://emacs.stackexchange.com/a/79298/38482

  (org-download-enable)
  ;;:hook ((org-mode . my-org-download-set-dir))
  )
#+end_src

*** Editing image software                                    :shell_script:
#+begin_src shell :tangle garid/edit_img.sh
#!/bin/sh

file=$(readlink -f "$1")
ext="${file##*.}"

# create empty file if the file doesn't exist
if [ ! -f "$file" ]; then
    convert -size 480x320 xc:white "$file";
    echo "created new $file"
fi

# open image-editor based on the file's extension
case "$ext" in
	jpeg) gimp      "$file" ;;
	jpg)  gimp      "$file" ;;
	png)  gimp      "$file" ;;
	svg)  inkscape  "$file" ;;
	xopp) xournalpp "$file" ;;
esac
#+end_src

** Org-auto-tangle for handling tangled source blocks
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook   (org-mode   .   org-auto-tangle-mode)
  :custom (org-auto-tangle-default    nil))
#+end_src

** Org-transclusion for documentation
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure nil
  :bind (:map org-mode-map
              ("<f12>"   . org-transclusion-add     )
              ("M-<f12>" . org-transclusion-add-all )
              ("<f11>"   . org-transclusion-mode    )))
#+end_src
** COMMENT org contacts
#+begin_src emacs-lisp
;; (global-display-fill-column-indicator-mode)
(use-package org-contacts
  :ensure t
  :custom (org-contacts-files
           '("~/roamnotes/20230417200051-org_contacs.org")))
#+end_src
** COMMENT org tmux babel
#+begin_src emacs-lisp
(use-package ob-tmux
  ;; Install package automatically (optional)
  :ensure t
  :custom
  (org-babel-default-header-args:tmux
   '((:results  .  "silent"  )
     (:session  .  "default" )
     (:socket   .  nil       )))
  ;; The tmux sessions are prefixed with the following string.
  ;; You can customize this if you like.
  (org-babel-tmux-session-prefix "ob-")
  ;; The terminal that will be used.
  ;; You can also customize the options passed to the terminal.
  ;; The default terminal is "gnome-terminal" with options "--".
  (org-babel-tmux-terminal "st")
  (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e"))
  ;; Finally, if your tmux is not in your $PATH for whatever reason, you
  ;; may set the path to the tmux binary as follows:
  (org-babel-tmux-location "/usr/bin/tmux"))
#+end_src
** COMMENT org-tree-slide
#+begin_src emacs-lisp
(use-package org-tree-slide)
#+end_src

* Development Environment / Programming
** rg
#+begin_src emacs-lisp
(use-package rg)
#+end_src
** Save place mode
This mode saves the last cursor point when you close a file,
and later sets cursor at that point when you open that file.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src
** Yassnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :custom
  (yas/triggers-in-field t) ;; Do I need this?
  ;; (setq yas-key-syntaxes (append yas-key-syntaxes '(yas-try-key-from-dot)))
  ;;(yas-snippet-dirs (list (concat user-emacs-directory "snippet" "snippets")))
  :config
  (yas-global-mode 1)

  (defcustom yas-new-snippet-default "\
  # -*- mode: snippet -*-
  # contributor: Garid Zorigoo <garidzorigoo@gmail.com>
  # name: $1
  # key: ${2:${1:$(yas--key-from-desc yas-text)}}
  # --
  $0`(yas-escape-text yas-selected-text)`"
    "Default snippet to use when creating a new snippet.
  If nil, don't use any snippet."
    :type 'string)
  )

(use-package consult-yasnippet)
#+end_src
** Parenthesis: (electric-pair-mode)
#+begin_src emacs-lisp
;; enable electric pair
(electric-pair-mode 1)

;; disables <> (cuz I use < for most of my snippets)
(setq electric-pair-inhibit-predicate
      (lambda (c)
        (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))
#+end_src
** Git related
#+begin_src emacs-lisp
(use-package magit)
(use-package git-gutter
  :config (global-git-gutter-mode))
#+end_src

** Treesitter
from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][mastering emacs article]].
#+begin_src emacs-lisp
(setq major-mode-remap-alist
      '((bash-mode   . bash-ts-mode)
        (python-mode . python-ts-mode)))

;; below is fork of   https://github.com/emacs-tree-sitter/ts-fold
;; reason I don't use (ts-fold)  <--- isn't good with builtin treesit

;; (use-package treesit-fold
;;   :straight (treesit-fold :type git :host github :repo "abougouffa/treesit-fold"))
#+end_src
** COMMENT Corfu
#+begin_src emacs-lisp
;; from https://github.com/Gavinok/emacs.d/blob/3ccc6e35feb2903442c9f7625fba081d93a2fa36/init.el#L614
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle            t          ) ;; Allows cycling through candidates
  (corfu-auto             t          ) ;; Enable auto completion nov23 C-M-i?
  (corfu-auto-prefix      2          )
  (corfu-auto-delay       0.1        )
  (corfu-popupinfo-delay '(0.1 . 0.1))
  (corfu-preview-current   nil       )
  (corfu-on-exact-match    nil       ) ;; Don't auto expand tempel snippets

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator )
              ("TAB"        . nil                    ); corfu-next)
              ([tab]        . nil                    ); corfu-next)
              ;;("S-TAB"     . corfu-previous        )
              ("M-k"        . corfu-previous         )
              ("M-j"        . corfu-next             )
              ("S-<return>" . corfu-insert           )
              ("M-h"        . corfu-insert           )
              ("RET"        . nil                    ))

  :init
  ;; (global-corfu-mode    )
  (corfu-history-mode   )
  ;; (corfu-popupinfo-mode ) ; Popup completion info
  :config
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
				   corfu-quit-no-match t
				   corfu-auto nil)
              (corfu-mode))))

(straight-use-package
 '(corfu-terminal
   :type git
   :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"))

(straight-use-package
 '(corfu-doc-terminal
   :type git
   :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git"))
#+end_src
** completion in region
#+begin_src emacs-lisp
;; (setq completions-format 'one-column)
;; (setq completions-header-format nil)
;; (setq completions-max-height 20)
;; (setq completion-auto-select nil)       ;

;; ;; (define-key minibuffer-mode-map (kbd "C-n") 'minibuffer-next-completion)
;; ;; (define-key minibuffer-mode-map (kbd "C-p") 'minibuffer-previous-completion)
;; ;; 
;; ;; (define-key completion-in-region-mode-map (kbd "C-n") 'minibuffer-next-completion)
;; ;; (define-key completion-in-region-mode-map (kbd "C-p") 'minibuffer-previous-completion)



(setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))
#+end_src
** hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
** COMMENT python run on buffer
#+begin_src emacs-lisp
(defun garid-custom/run-python-on-this-file ()
        (interactive)
        (async-shell-command (concat "python " (buffer-file-name)) ))
#+end_src
** COMMENT cape yassnippets
Following makes yassnippet available for corfu (or other completers)
#+begin_src emacs-lisp
(use-package cape)
(use-package yasnippet-capf
  :after cape
  :config (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src

** COMMENT devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :config ;; taken initially from  https://alhassy.com/emacs.d/#devdocs
  (when nil ;; need to toggle nil->t and the first time installign
    (cl-loop
     for lang in '("python~3.11" "numpy~1.21" "matplotlib~3.6" "pandas~1"
                   c "r" "nim" "gnu_make" "bash" "fish~3.6" "qt~6.1")
     do (devdocs-install (list (cons 'slug (format "%s" lang)))))))
#+end_src
** COMMENT LSP-bridge
This requires [[id:2bc28375-3cf3-4784-8a34-ecb1a2b0c24a][Straight.el]] to install.

#+begin_src emacs-lisp
(use-package lsp-bridge
  :straight '(lsp-bridge
              :type git
              :host github
              :repo "manateelazycat/lsp-bridge"
              :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
              :build (:not compile))
  :init
  ;; (global-lsp-bridge-mode)
  (evil-define-key 'normal 'python-mode-map  (kbd "g d") 'lsp-bridge-find-def)
  (evil-define-key 'normal 'python-mode-map  (kbd "K")   'lsp-bridge-popup-documentation)
  (evil-define-key 'insert 'acm-mode-map     (kbd "C-n") 'acm-select-next)
  (evil-define-key 'insert 'acm-mode-map     (kbd "C-p") 'acm-select-prev)
  (evil-define-key 'insert 'acm-mode-map     (kbd "C-h") 'acm-complete)
  :custom
  (acm-backend-codeium-candidate-min-length           0)
  (acm-backend-search-file-words-candidate-min-length 2)
  (acm-backend-yas-candidates-number                 10)
  (acm-backend-lsp-candidate-min-length               2)
  (acm-enable-codeium                                 t)
  ;; (acm-enable-preview                                 t)
  (acm-enable-icon                                  nil)
  (lsp-bridge-python-multi-lsp-server    "pyright_ruff")
  (lsp-bridge-enable-org-babel                        t)
  (lsp-bridge-diagnostic-fetch-idle                   1)
  ;; need lsp-bridge-codeium-auth & lsp-bridge-codeium-input-auth-token
  ;; (acm-backend-elisp-candidate-min-length           2)
  :bind (:map acm-mode-map
              ("<tab>" . nil )
              ("TAB"   . nil ))

  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; :bind ( :map acm-mode-map                                      ;;
;;         ("M-j" . acm-select-next ) ("C-n" . acm-select-next )  ;;
;;         ("M-k" . acm-select-prev ) ("C-p" . acm-select-prev )  ;;
;;         ("M-n" . acm-select-next ) ("C-j" . acm-select-next )  ;;
;;         ("M-p" . acm-select-prev ) ("C-k" . acm-select-prev )  ;;
;;         ("M-d" . acm-doc-toggle  ) ("C-d" . acm-doc-toggle  )  ;;
;;         ("M-f" . acm-filter      ) ("C-f" . acm-filter      )  ;;
;;         ("M-H" . acm-hide        ) ("C-H" . acm-hide        )  ;;
;;         ("M-G" . acm-select-last ) ("C-G" . acm-hide        )) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
** COMMENT Eglot for the LSPs
#+begin_src emacs-lisp
(use-package eglot
  :config
  (setq eldoc-echo-area-use-multiline-p 0)
  (setq eglot-ignored-server-capabilities '(:documentHighlightProvider)))

(straight-use-package
 '(corfu-terminal
   :type git
   :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"))


(straight-use-package
 '(corfu-doc-terminal
   :type git
   :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git"))
#+end_src
** COMMENT Python
#+begin_src emacs-lisp
(use-package python
  :config
  (evil-define-key 'normal 'python-mode-map  (kbd "SPC ,") 'garid-custom/run-python-on-this-file)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; :bind (                                                 ;;
  ;;        :map python-ts-mode-map                          ;;
  ;;        ("SPC ," . garid-custom/run-python-on-this-file) ;;
  ;;        :map python-mode-map                             ;;
  ;;        ("SPC ," . garid-custom/run-python-on-this-file) ;;
  ;;        )                                                ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;  :hook
  ;;  (python-ts-mode
  ;;   . (lambda ()
  ;;       ;;(add-to-list 'completion-at-point-functions #'yasnippet-capf)
  ;;       (add-to-list 'completion-at-point-functions #'python-completion-at-point)
  ;;       (add-to-list 'completion-at-point-functions #'tags-completion-at-point-function)
  ;;       (display-fill-column-indicator-mode 1)
  ;;       (setq fill-column 79)
  ;;       (message "Python mode started" )
  ;;       ))
  ;;  (inferior-python-mode
  ;;   . (lambda ()
  ;;       (add-to-list 'completion-at-point-functions #'yasnippet-capf)
  ;;       (add-to-list 'completion-at-point-functions #'python-completion-at-point)
  ;;       (add-to-list 'completion-at-point-functions #'tags-completion-at-point-function)
  ;;       (display-fill-column-indicator-mode 1)
  ;;       (setq fill-column 79)
  ;;       (message "Python mode started" )
  ;;       ))

  )

;;(use-package elpy
;;  :ensure t
;;  :defer t
;;  :init
;;  (advice-add 'python-ts-mode :before 'elpy-enable)
;;
;;  :hook
;;  (python-ts-mode . (lambda ()
;;                      (define-key evil-normal-state-map (kbd "K") 'elpy-doc)
;;                      (define-key evil-normal-state-map (kbd "K") 'elpy-doc)
;;                      ))
;;  )

;; :bind (:map python-ts-mode-map ("K" . elpy-doc ))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    ;;;;;;;;;;
;; (use-package python-cell                                                               ;;
;;   :hook (python-mode .
;;         (lambda () (setq python-cell-cellbreak-regexp "^[[:space:]]*#[[:space:]]=="))) ;;
;;                                                                                        ;;
;;   ;;                                                                                   ;;
;;   ;; (define-key python-cell-mode-map (kbd "M-J") nil)                                 ;;
;;   ;; (define-key python-cell-mode-map (kbd "M-K") nil)                                 ;;
;;   )                                                                                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
** COMMENT Indent bars
#+begin_src emacs-lisp
;; (use-package indent-bars
;;   :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
;;   :hook ((python-ts-mode) . indent-bars-mode)) 
#+end_src

#+begin_src emacs-lisp
(use-package indent-bars
  ;;:load-path "~/code/emacs/indent-bars"
  :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :custom
  (indent-bars-treesit-support t)
  (indent-bars-no-descend-string nil)
  (indent-bars-prefer-character "|")
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
				      list list_comprehension
				      dictionary dictionary_comprehension
				      parenthesized_expression subscript)))
  :hook ((python-base-mode yaml-mode) . indent-bars-mode))
#+end_src

#+RESULTS:
| indent-bars-mode |

** COMMENT Dump jump
#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  )
#+end_src
** COMMENT scad
#+begin_src emacs-lisp
(use-package scad-mode)
#+end_src
* Garid
** Open PDF exported by LaTeX externally                        :customFunc:
#+begin_src emacs-lisp
(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

;; (defun gry/org-open-pdf ()        ;; old version that served me for very long time
;;   (interactive)
;;   (call-process-shell-command
;;    (concat "zathura "
;; 	   (replace-in-string ".org" ".pdf &" buffer-file-name))))

(defun gry/org-open-pdf ()
  (interactive)
  (call-process-shell-command
   (concat "xdg-open "                                  ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file (buffer)
           "/export_tex/"                               ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".pdf &"                                     ;; adds extension
           )))

(defun gry/org-open-html ()
  (interactive)
  (call-process-shell-command
   (concat "thorium-browser "                           ;; try to open default PDF viewer
           (file-name-directory buffer-file-name)       ;; directory of current file (buffer)
           "/export_html/"                              ;; adds export directory name
           (file-name-base)                             ;; filaname (of current file/buffer) without extension
           ".html &"                                    ;; adds extension
           )))
#+end_src

** My Custom LaTeX writting system (aka TeQ)                    :customFunc:
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.config/emacs/Emacs-TeQ"))

(register-input-method
 "TeQ-Math" "Emacs-Teq-Latex" 'quail-use-package
 "TeQ-"     "TeQ-Math input"
 "Emacs-TeQ.el")

(fset 'gry-calc-horizontal-concat
      (kmacro-lambda-form [?v ?t tab ?v ?t ?| ?v ?t] 0 "%d"))

;;(load "~/.config/emacs/garid/garids-abbrev-typos.el")	;; garid typos
;; (setq path-to-ctags "/usr/bin/ctags")
#+end_src

** Custom Aligner function (with untabify)                      :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/align-regexp-and-untabify (beg end)
  (interactive "r")
  (align-regexp beg end
                (concat "\\(\\s-*\\)" (read-string "Align regexp: ")))
  (untabify beg end))
#+end_src
** noTabs:                                                      :customFunc:
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
;; Align with spaces only
(defadvice align-regexp (around align-regexp-with-spaces)
  "Never use tabs for alignment."
  (let ((indent-tabs-mode nil)) ad-do-it))
(ad-activate 'align-regexp)
#+end_src

#+RESULTS:
: align-regexp
** Toggling between 3 inputs (eng, mon, teq)                    :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/toggle-eng-mon-teq-input-methods ()
  (interactive)
  (if (string= default-input-method nil )
      (set-input-method "cyrillic-mongolian")
    (if (string= default-input-method "TeQ-Math")
	(set-input-method "cyrillic-mongolian")
      (if (string= default-input-method "cyrillic-mongolian")
	  (set-input-method "TeQ-Math")))))
#+end_src
** copy to xclip without turning on the xclip mode
#+begin_src emacs-lisp
(defun gry-copy-to-x-clip()
  (interactive)
  (if (and (boundp 'xclip-mode) xclip-mode);; check if the xclip has turned on
      (clipboard-kill-ring-save ( mark ) ( point ) )
    (progn
      (xclip-mode +1)
      (clipboard-kill-ring-save ( mark ) ( point ) )
      (xclip-mode -1)
      )
    )
  )
#+end_src
** copy link in org at point
#+begin_src emacs-lisp
(defun code-from-internet/org-link-open-parent-with-dired-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         ;;(url (concat type ":" url))
         )
    ;; (kill-new url)
    (message (concat "Copied URL: " url))
    (dired-jump t (file-name-directory url))
    )
  )


(defun code-from-internet/org-link-copy-at-point (&optional arg)
  "Extract URL from org-mode link and add it to kill ring." ;;;https://emacs.stackexchange.com/a/60555/38482
  (interactive "P")
  (let* (
         (link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url)))
  )
#+end_src
** org next prev
#+begin_src emacs-lisp
(defhydra hydra-org-link-jumper ()
  "zoom"
  ("n" org-next-link     "next")
  ("p" org-previous-link "prev"))
#+end_src
** COMMENT Distraction
#+begin_src emacs-lisp
(defun gry/distraction-free-on ()
  (interactive)
  (writeroom-mode 1)
  (turn-off-evil-mode)
  (display-line-numbers-mode -1)
  (set-face-attribute 'default nil :font "Iosevka Etoile" :height 140))
;; (set-face-attribute 'default nil :font "Terminus" :height 140)

(defun gry/distraction-free-off ()
  (interactive)
  (writeroom-mode -1)
  (turn-on-evil-mode)
  (display-line-numbers-mode 1)
  (set-face-attribute 'default nil :font "Iosevka Gry" :height 120))
#+end_src
* Keybinding
** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :custom
  (which-key-popup-type            'side-window               )
  (which-key-side-window-location  'left                      )
  (which-key-idle-delay             0.5                       )
  (which-key-idle-secondary-delay   0.01                      )
  (which-key-side-window-max-width  0.5                       )
  (which-key-sort-order            'which-key-key-order-alpha )
  ;; (which-key-popup-type 'frame)
  ;; (which-key-side-window-max-height 0.5)
  :config (which-key-mode))
#+end_src

** Non sequential keybindings
*** Global keybinding table
#+caption: Global (aka from anywhere) non-sequential keybinding
#+name: tbl-global-keybindings
| key     | function                                      | description                          |
|---------+-----------------------------------------------+--------------------------------------|
| M-q     | delete-window                                 | delete window                        |
| M-Q     | kill-current-buffer                           | delete buffer                        |
| M-J     | other-window                                  | jump to other window                 |
| M-W     | evil-window-vnew                              | divide window veritically (on right) |
| M-E     | evil-window-vsplit                            | divide window veritically (on left)  |
| M-]     | comint-dynamic-complete-filename              | complete file path                   |
| M-s     | avy-goto-char                                 | jump to character                    |
| M-S     | avy-goto-char-2                               | jump to character (with 2 char)      |
| M-f     | consult-line                                  | search line in buffer                |
| M-y     | consult-yank-from-kill-ring                   | consult yank from kill ring          |
| C-/     | comment-line                                  | set selected lines comment           |
| C-\vert | garid-custom/toggle-eng-mon-teq-input-methods | change toggle input (Eng-Mon-Teq)    |
| <f9>    | org-gtd-capture                               | capture                              |
| <f8>    | org-gtd-organize                              | gtd org                              |
| C-<f8>  | org-gtd-clarify-item                          | gtd org                              |
| C-<f9>  | org-gtd-process-inbox                         | process inbox                        |
| <f7>    | org-gtd-engage                                | gtd engage                           |

Note to myself: after changing Table-[[tbl-global-keybindings]], I need to update [[convert-global-keybindings]]

*** Convert global keybinding table into elisp
#+caption: adsf
#+name: convert-global-keybindings
#+begin_src elisp :var tab=tbl-global-keybindings :wrap src emacs-lisp :tangle no
(concat
 (mapconcat
  (lambda (row)
    (format
     "(global-set-key (kbd \"%s\") '%s)"
     ;; needed to use regexp cuz | (as \vert) used in the table
     (replace-regexp-in-string (regexp-quote "\\vert") "|" (nth 0 row) nil 'literal)
     (nth 1 row)
     ))
  tab "\n"))
#+end_src

#+RESULTS: convert-global-keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-q") 'delete-window)
(global-set-key (kbd "M-Q") 'kill-current-buffer)
(global-set-key (kbd "M-J") 'other-window)
(global-set-key (kbd "M-W") 'evil-window-vnew)
(global-set-key (kbd "M-E") 'evil-window-vsplit)
(global-set-key (kbd "M-]") 'comint-dynamic-complete-filename)
(global-set-key (kbd "M-s") 'avy-goto-char)
(global-set-key (kbd "M-S") 'avy-goto-char-2)
(global-set-key (kbd "M-f") 'consult-line)
(global-set-key (kbd "M-y") 'consult-yank-from-kill-ring)
(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-|") 'garid-custom/toggle-eng-mon-teq-input-methods)
(global-set-key (kbd "<f9>") 'org-gtd-capture)
(global-set-key (kbd "<f8>") 'org-gtd-organize)
(global-set-key (kbd "C-<f8>") 'org-gtd-clarify-item)
(global-set-key (kbd "C-<f9>") 'org-gtd-process-inbox)
(global-set-key (kbd "<f7>") 'org-gtd-engage)
#+end_src

#+RESULTS:
: org-gtd-engage

** Sequential keybindings (General.el keybinding config)
*** Sequential global keybindings
**** File and directory surfing
#+attr_latex: :placement [H]
#+caption: File and directory related commands
#+name: tbl-kbinding-file-n-dired
| key(s) | function                      | short description    | mode | lambda |
|--------+-------------------------------+----------------------+------+--------|
| SPC    | execute-extended-command      | M-x                  | -    |        |
| f      | find-file                     | (f)ind-file          | -    |        |
| d      | dired-jump                    | (d)irectory          | -    |        |
| D      | :ignore t                     | (D)ired              | -    |        |
| Ds     | dired                         | D-(s)imple           | -    |        |
| Dn     | dired-sidebar-jump-to-sidebar | D-(n) side-tree show | -    |        |
| DN     | dired-sidebar-hide-sidebar    | D-(N) side-tree hide | -    |        |
| Dp     | dired-preview-mode            | D-(p) side-tree hide | -    |        |

**** Buffer and operations on buffer
#+attr_latex: :placement [H]
#+caption: buffer related commands
#+name: tbl-kbind-buffer-related
| key(s) | function                    | short description             | mode | lambda |
|--------+-----------------------------+-------------------------------+------+--------|
| l      | consult-buffer              | (l)ist-buffer                 | -    |        |
| L      | :ignore t                   | (L)buffer.................... | -    |        |
| Lr     | revert-buffer-quick         | L-(r)eread                    | -    |        |
| Le     | eval-buffer                 | L-(e)val                      | -    |        |
| Li     | ibuffer                     | L-(i)buffer                   | -    |        |
| Ln     | rename-buffer               | L-(r)ename                    | -    |        |
| L<     | switch-to-prev-buffer       | L-(<)prev                     | -    |        |
| L>     | switch-to-next-buffer       | L-(>)next                     | -    |        |
| Ld     | crux-delete-file-and-buffer | L-(d)elete                    | -    |        |
| Lc     | clone-indirect-buffer       | L-(c)lone                     | -    |        |
| Ls     | crux-create-scratch-buffer  | L-(s)cratch-buffer            | -    |        |
| Lh     | buf-move-left               | L-(h) move left               | -    |        |
| Lj     | buf-move-down               | L-(j) move down               | -    |        |
| Lk     | buf-move-up                 | L-(k) move up                 | -    |        |
| Ll     | buf-move-right              | L-(l) move right              | -    |        |
| LL     | tear-off-window             | L-(L) tear window to frame    | -    |        |

**** Convenient
#+attr_latex: :placement [H]
#+caption: Convenient commands
#+name: tbl-kbind-zconvenients
| key(s) | function                               | short description           | mode | lambda |
|--------+----------------------------------------+-----------------------------+------+--------|
| z      | :ignore t                              | (z)conveniences............ | -    |        |
| za     | garid-custom/align-regexp-and-untabify | z-(a)lign                   | -    |        |
| zr     | replace-regexp                         | z-(r)eplace word in buf     | -    |        |
| zh     | highlight-symbol-at-point              | z-(h)ighlight word          | -    |        |
| zH     | unhighlight-regexp                     | z-(H)ighlight word off      | -    |        |
| zs     | :ignore t                              | z-(s)pell.................. | -    |        |
| zsw    | ispell-word                            | zs-(w)ord                   | -    |        |
| zsr    | ispell-region                          | zs-(r)egion                 | -    |        |
| zsC    | ispell-comments-and-strings            | zs-(C)omment-full           | -    |        |
| zsc    | ispell-comment-or-string-at-point      | zs-(c)omment-here           | -    |        |
| zsb    | ispell-buffer                          | zs-(b)uffer                 | -    |        |
| zsm    | ispell-message                         | zs-(m)essage                | -    |        |
| zsq    | ispell-kill-ispell                     | zs-(q)uit                   | -    |        |
| zsl    | ispell-change-dictionary               | zs-(l)anguage en-mn         | -    |        |
| ZQ     | kill-emacs                             | kill emacs                  | -    |        |

**** System
#+attr_latex: :placement [H]
#+caption: system commmands
#+name: tbl-kbind-sys-related
| key(s) | function                                                 | short description              | mode | lambda |
|--------+----------------------------------------------------------+--------------------------------+------+--------|
| s      | :ignore t                                                | (s)ystem.....................  | -    |        |
| srf    | (recentf-open-files)                                     | s-(r)ecent-(f)iles             | -    | y      |
| sl     | :ignore t                                                | s-(l)ine.....................  | -    |        |
| sl5    | (setq display-line-numbers-width 5)                      | sl-(5) digit number            | -    | y      |
| sl4    | (setq display-line-numbers-width 4)                      | sl-(4) digit number            | -    | y      |
| sl3    | (setq display-line-numbers-width 3)                      | sl-(3) digit number            | -    | y      |
| slm    | scroll-lock-mode                                         | sl-(m)ode scroll-lock-mode     | -    |        |
| slv    | global-display-fill-column-indicator-mode                | sl-(v)ertical-line             | -    |        |
| sln    | display-line-numbers-mode                                | sl-(n)umber toggle             | -    |        |
| slr    | ruler-mode                                               | sl-(r)uler mode                | -    |        |
| st     | toggle-transparency                                      | s-(t)oggle-transparency        | -    |        |
| scl    | (global-command-log-mode) (clm/open-command-log-buffer)  | s-(c)md-(l)og                  | -    | y      |
| sw     | whitespace-mode                                          | s-(w)hitespace                 | -    |        |
| O      | :ignore t                                                | (O)pen........................ | -    |        |
| Oe     | (find-file "~/.config/emacs/init.org")                   | O-(e)macs confg org            | -    | y      |
| OE     | (find-file "~/.config/emacs/init.el")                    | O-(E)macs confg el             | -    | y      |
| Ob     | (find-file (nth 0 org-cite-global-bibliography))         | O-(b)ibliography               | -    | y      |
| OO     | (find-file org-default-notes-file)                       | O-(O)rg capture                | -    | y      |
| Oa     | (find-file "~/Documents/Personal/gtd/gtd_archive_2024")  | O-(a)rchive                    | -    | y      |
| Ot     | (find-file "~/Documents/Personal/gtd/org-gtd-tasks.org") | O-(t)asks                      | -    | y      |
| Oi     | (find-file "~/Documents/Personal/gtd/inbox.org")         | O-(i)nbox                      | -    | y      |
| t      | :ignore t                                                | (t)erminal.................... | -    |        |
| te     | eshell                                                   | t-(e)shell emacs-shell         | -    |        |
| tv     | vterm                                                    | t-(v)term  vterm               | -    |        |
| tx     | garid-custom/open-external-term-here                     | t-(x)ternal terminal           | -    |        |
| tt     | eat                                                      | t-ea(t) terminal               | -    |        |
| Y      | gry-copy-to-x-clip                                       | (Y)ank to xclip                | -    |        |

**** Bookmark
#+attr_latex: :placement [H]
#+caption: bookmark
#+name: tbl-kbind-bookmarks
| key(s) | function         | short description                | mode | lambda |
|--------+------------------+----------------------------------+------+--------|
| b      | :ignore t        | (b)ookmark...................... | -    |        |
| bm     | consult-bookmark | b-(m)ark-consult                 | -    |        |
| bs     | bookmark-set     | b-(s)et                          | -    |        |
| bd     | bookmark-delete  | b-(d)elete                       | -    |        |
| br     | bookmark-rename  | b-(r)ename                       | -    |        |

**** Help related
#+attr_latex: :placement [H]
#+caption: Help for emacs/elisp related
#+name: tbl-kbind-help
| key(s) | function                 | short description                | mode | lambda |
|--------+--------------------------+----------------------------------+------+--------|
| h      | :ignore t                | (h)elp.......................... | -    |        |
| hh     | describe-symbol          | h-(h)elp symbol (elisp)          | -    |        |
| hH     | describe-key             | h-(H)elp keybinding              | -    |        |
| ho     | org-info                 | h-(o)rg info                     | -    |        |
| hw     | which-key-show-top-level | h-(w)hich key                    | -    |        |
| hd     | devdocs-lookup           | h-(d)evdocs lookup               | -    |        |
| hm     | consult-man              | h-(m)an                          | -    |        |

**** Development commands
#+attr_latex: :placement [H]
#+caption: misc. development related
#+name: tbl-kbind-dev
| key(s) | function              | short description          | mode | lambda |
|--------+-----------------------+----------------------------+------+--------|
| mg     | magit-status          | (m)a(g)it                  | -    |        |
| <      | recompile             | recompile                  | -    |        |
| sco    | corfu-mode            | s-(c)orfu-(m)ode           | -    |        |
| se     | eglot                 | s-(e)glot                  | -    |        |
| rg     | rg                    | (r)ip-(g)rep  ~cr          | -    |        |
| gs     | git-gutter:popup-hunk | (g)it-(s) popup hunk  ~cr  | -    |        |
| gd     | magit-ediff-compare   | ma(g)it-e(d) hunk  ~cr     | -    |        |
| P      | :ignore               | Python (inferior)   ...... | -    |        |
| Pr     | python-shell-restart  | P-(R)estart                | -    |        |
| PP     | run-python            | P-(P) run-python           | -    |        |
| Pk     | comint-send-eof       | P-(k) kill  (also C-c C-d) | -    |        |

**** Consult related (picking & choosing stuff)
#+attr_latex: :placement [H]
#+caption: consult
#+name: tbl-global-general-keybindings-consult
| key(s) | function               | short description                | mode | lambda |
|--------+------------------------+----------------------------------+------+--------|
| c      | :ignore t              | (c)onsult....................... | -    |        |
| co     | consult-org-heading    | c-(o)rg   == ofh                 | -    |        |
| ci     | consult-imenu          | c-(i)menu                        | -    |        |
| cm     | consult-man            | c-(m)an                          | -    |        |
| cr     | consult-ripgrep        | c-(r)ipgrep                      | -    |        |
| cR     | consult-recent-file    | c-(R)ecent files                 | -    |        |
| cf     | consult-flymake        | c-(f)lymake                      | -    |        |
| cp     | consult-project-buffer | c-(p)roject                      | -    |        |
| cd     | consult-dir            | c-(d)ir                          | -    |        |
| cF     | consult-fd             | c-(F)d   == $find                | -    |        |
| ca     | consult-org-agenda     | c-(a)genda headings              | -    |        |
| cg     | consult-git-grep       | c-(g)it grep  == ps              | -    |        |

**** Project related
#+attr_latex: :placement [H]
#+caption: Project (more like git-repo)
#+name: tbl-global-general-keybindings-project
| key(s) | function                          | short description              | mode | lambda |
|--------+-----------------------------------+--------------------------------+------+--------|
| p      | :ignore t                         | (p)rojectl.................... | -    |        |
| pr     | xref-find-references              | p-(r)eferences                 | -    |        |
| pd     | consult-flymake                   | p-(d)iagnostic                 | -    |        |
| pf     | project-find-file                 | p-(f)ind-file                  | -    |        |
| pz     | project-switch-project            | p-(z)ump-to-other-proj         | -    |        |
| ps     | consult-git-grep                  | p-(s)earch git files           | -    |        |
| pS     | project-find-regexp               | p-(s)earch-in-proj             | -    |        |
| pk     | project-kill-buffers              | p-(k)ill-buf-proj              | -    |        |
| pl     | consult-project-buffer            | p-(l)ist-buf-proj              | -    |        |
| pv     | consult-imenu                     | p-(v)ariables                  | -    |        |
| v      | :ignore t                         | (v)-project................... | -    |        |
| vq     | format-all-buffer                 | v-(q)-format-buffer            | -    |        |
| vr     | eglot-rename                      | v-(r)ename                     | -    |        |

***** COMMENT old lsp
#+caption: this is version
#+name:    tbl-old
| pr | lsp-bridge-find-references        | p-(r)eferences | - |   |
| pr | xref-find-references              | p-(r)eferences | - |   |
| pd | consult-flymake                   | p-(d)iagnostic | - |   |
| pd | lsp-bridge-diagnostic-list        | p-(d)iagnostic | - |   |
| vr | project-query-replace-regexp      | v-(r)eplace    | - |   |
| vr | lsp-bridge-rename                 | v-(r)eplace    | - |   |
| pv | lsp-bridge-workspace-list-symbols | p-(v)ariables  | - |   |

**** Denote related
#+attr_latex: :placement [H]
#+caption: Denote
#+name: tbl-global-general-keybindings-denote
| key(s) | function                 | short description              | mode | lambda |
|--------+--------------------------+--------------------------------+------+--------|
| R      | :ignore t                | (R)denote..................... | -    |        |
| Rr     | denote-rename-file       | R-(r)ename                     | -    |        |
| Rf     | denote-open-or-create    | R-(f)ind                       | -    |        |
| RD     | (dired denote-directory) | R-(D)ired                      | -    | y      |

**** Yas-snippet
#+attr_latex: :placement [H]
#+caption: yassnippet creation/browsing
#+name: tbl-global-general-keybindings-yassnippet
| key(s) | function               | short description             | mode | lambda |
|--------+------------------------+-------------------------------+------+--------|
| y      | :ignore t              | (y)assnippet................. | -    |        |
| yn     | yas-new-snippet        | y-(n)ew                       | -    |        |
| yd     | yas-describe-tables    | y-(d)esc-table                | -    |        |
| yv     | yas-visit-snippet-file | y-(v)isit                     | -    |        |
| yi     | consult-yasnippet      | y-(i)nsert                    | -    |        |

**** Calc related
#+caption: gnu-calc related
#+name: tbl-global-general-keybindings-calc
| key(s) | function      | short description                | mode | lambda |
|--------+---------------+----------------------------------+------+--------|
| C      | :ignore t     | (C)alc related.................. | -    |        |
| Ca     | calc          | C-(a) calc                       | -    |        |
| Ce     | calc-embedded | C-(e) embedded                   | -    |        |
| Cf     | full-calc     | C-(f) full                       | -    |        |

**** org related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-mode-related
| key(s) | function                                                    | short description                | mode | lambda |
|--------+-------------------------------------------------------------+----------------------------------+------+--------|
| o      | :ignore t                                                   | (o)rg........................... | -    |        |
| oo     | org-open-at-point                                           | o-(o)pen                         | org  |        |
| od     | code-from-internet/org-link-open-parent-with-dired-at-point | o-(d)irectory open               | org  |        |
| ,      | org-ctrl-c-ctrl-c                                           | C-c C-c                          | org  |        |

**** org table related
#+attr_latex: :placement [H]
#+caption: Org related stuffs
#+name: tbl-global-general-keybindings-org-tbl-related
| key(s) | function                             | short description             | mode | lambda |
|--------+--------------------------------------+-------------------------------+------+--------|
| oT     | :ignore t                            | o-(T)able.................... | -    |        |
| oTm    | orgtbl-mode                          | oT-(m)ode                     | -    |        |
| oTc    | orgtbl-create-or-convert-from-region | oT-(c)reate                   | -    |        |
| oTT    | org-table-toggle-column-width        | oT-(T)oggle-hide-column       | -    |        |
| oTC    | org-table-toggle-coordinate-overlays | oT-(C)oordinate               | -    |        |
| oTx    | org-table-export                     | oT-(x)port as csv file        | org  |        |
| oTs    | org-table-sum                        | oT-(s)um                      | org  |        |
| oTi    | :ignore t                            | oT-(i)nsert.................. | org  |        |
| oTic   | org-table-insert-column              | oTi-(c)olumn                  | org  |        |
| oTir   | org-table-insert-row                 | oTi-(r)ow                     | org  |        |

**** org-roam keybindings
#+attr_latex: :placement [H]
#+caption: Org-Roam
#+name: tbl-global-general-keybindings-org-roam-related
| key(s) | function                                    | short description                | mode | lambda |
|--------+---------------------------------------------+----------------------------------+------+--------|
| r      | :ignore t                                   | (r)oam.......................... | -    |        |
| ruim   | org-roam-ui-mode                            | rui-(m)ode ui-in-browser         | -    |        |
| rf     | my/org-roam-find-node-exclude-kanji         | r-(f)ind no kanji                | -    |        |
| rF     | org-roam-node-find                          | r-(f)ind full find               | -    |        |
| rl     | org-roam-buffer-toggle                      | r-(l)toggle                      | -    |        |
| rL     | org-roam-buffer-display-dedicated           | r-(L)dedicated                   | -    |        |
| ri     | org-roam-node-insert                        | r-(i)nsert                       | -    |        |
| rI     | garid-custom/org-roam-node-insert-immediate | r-(I)nsert-immediate             | -    |        |
| rt     | :ignore t                                   | r-(t)ag......................    | -    |        |
| rta    | org-roam-tag-add                            | rt-(a)dd                         | -    |        |
| rtd    | org-roam-tag-remove                         | rt-(r)emove                      | -    |        |
| rd     | :ignore t                                   | r-(d)aily....................    | -    |        |
| rdc    | org-roam-dailies-capture-today              | rd-(c)apture                     | -    |        |
| rdr    | org-roam-dailies-goto-today                 | rd-(t)oday                       | -    |        |
| rdt    | org-roam-dailies-goto-tomorrow              | rd-(T)omorrow                    | -    |        |
| rdy    | org-roam-dailies-goto-yesterday             | rd-(y)esterday                   | -    |        |
| rdd    | org-roam-dailies-goto-date                  | rd-(d)ate  goto date             | -    |        |
| rd>    | org-roam-dailies-goto-next-note             | rd-(>)next                       | -    |        |
| rd<    | org-roam-dailies-goto-previous-note         | rd-(<)prev                       | -    |        |

**** (in-org) subtree operations
#+attr_latex: :placement [H]
#+caption: in org-file, frequent commands
#+name: tbl-orgmode-general-keybindings-freq
| key(s) | function                                | short description             | mode | lambda |
|--------+-----------------------------------------+-------------------------------+------+--------|
| os     | :ignore t                               | o-(s)ubtree.................. | org  |        |
| osy    | org-copy-subtree                        | os-(y)ank (aka copy)          | org  |        |
| osY    | org-id-copy                             | os-(Y)ank (ID)                | org  |        |
| osv    | org-mark-element                        | os-(v)isually select element  | org  |        |
| osm    | org-refile                              | os-(m)ove                     | org  |        |
| osd    | org-cut-subtree                         | os-(d)elete (aka cut)         | org  |        |
| ost    | org-toggle-narrow-to-subtree            | os-(t)oggle narrow            | org  |        |
| osn    | org-num-mode                            | os-(n)um mode                 | org  |        |
| oss    | org-sort                                | os-(s)ort                     | org  |        |
| osp    | org-set-property                        | os-(p)roperty                 | org  |        |
| osI    | org-indent-mode                         | os-(I)ndent mode              | org  |        |
| osi    | :ignore t                               | os-(i)nsert heading.......... | org  |        |
| osia   | org-insert-heading-after-current        | osi-(a)fter           C-RET   | org  |        |
| osiA   | org-insert-todo-heading-respect-content | osi-(A)fter    todo C-S-RET   | org  |        |
| osih   | org-insert-heading                      | osi-(h)eading         M-RET   | org  |        |
| osiH   | org-insert-todo-heading                 | osi-(H)eading  todo M-S-RET   | org  |        |
| osis   | org-insert-subheading                   | osi-(s)ubheading              | org  |        |
| osiS   | org-insert-todo-subheading              | osi-(S)ubheading todo         | org  |        |

**** (in/out org) agenda/calendar/todo related
#+attr_latex: :placement [H]
#+caption: agenda-todo-schedule
#+name: tbl-orgmode-general-keybindings-todo
| key(s) | function                                        | short description             | mode | lambda |
|--------+-------------------------------------------------+-------------------------------+------+--------|
| oc     | org-capture                                     | o-(c)apture                   | -    |        |
| ot     | :ignore t                                       | o-(t)odo..................... | org  |        |
| otT    | org-todo                                        | ot-(T)odo                     | org  |        |
| otn    | (org-todo "NEXT" )                              | ot-(n)ext                     | org  | y      |
| ott    | (org-todo "TODO" )                              | ot-(t)odo                     | org  | y      |
| otw    | (org-todo "WAIT" )                              | ot-(w)ait                     | org  | y      |
| otd    | (org-todo "DONE" )                              | ot-(d)one                     | org  | y      |
| otc    | (org-todo "CNCL" )                              | ot-(c)ancel                   | org  | y      |
| otr    | (org-todo "" )                                  | ot-(r)emove                   | org  | y      |
| ota    | (org-archive-subtree-default-with-confirmation) | ot-(a)rchive TOOD             | org  | y      |
| oA     | org-agenda                                      | o-(A)genda                    | -    |        |
| oa     | :ignore t                                       | o-(a)genda................... | -    |        |
| oab    | org-timeblock                                   | o-a-(b)lock                   | -    |        |
| oas    | org-schedule                                    | oa-(s)chedule                 | org  |        |
| oad    | org-deadline                                    | oa-(d)eadline                 | org  |        |

**** (in-org) jumping around inside org-file
#+attr_latex: :placement [H]
#+caption: jumping or finding stuff in org file
#+name: tbl-orgmode-general-keybindings-find
| key(s) | function                   | short description             | mode | lambda |
|--------+----------------------------+-------------------------------+------+--------|
| of     | :ignore t                  | o-(f)ind..................... | org  |        |
| ofh    | (consult-org-heading)      | of-(h)eading                  | org  | y      |
| ofn    | (consult-line "#+name"   ) | of-(n)amed table/eq/src       | org  | y      |
| ofr    | (consult-line "#+result" ) | of-(r)esult        /src       | org  | y      |
| ofs    | (consult-line "#+begin_" ) | of-(s)ource src-block         | org  | y      |
| j      | org-next-block             | (j) jump to next src-block    | org  |        |
| k      | org-previous-block         | (k) jump to prev src-block    | org  |        |

**** (in-org) exporting (latex) related
#+attr_latex: :placement [H]
#+caption: exporting org
#+name: tbl-orgmode-general-keybindings-export
| key(s) | function                         | short description             | mode | lambda |
|--------+----------------------------------+-------------------------------+------+--------|
| ox     | :ignore t                        | o-(x)port.................... | org  |        |
| oxb    | org-beamer-export-to-pdf         | ox-(b)eamer                   | org  |        |
| oxB    | (org-beamer-export-to-pdf nil t) | ox-(B)eamer subtree           | org  | y      |
| oxp    | org-latex-export-to-pdf          | ox-(p)df latex                | org  |        |
| oxr    | org-reveal-export-to-html        | ox-(r)eveal js                | org  |        |
| oxh    | org-html-export-to-html          | ox-(h)tml                     | org  |        |
| oxP    | (org-latex-export-to-pdf nil t)  | ox-(P)df latex subtree        | org  | y      |
| oxo    | gry/org-open-pdf                 | ox-(o)pen exported pdf        | org  |        |
| oxO    | gry/org-open-html                | ox-(O)pen exported html       | org  |        |
| op     | org-latex-preview                | o-(p)review                   | org  |        |

**** (in org) org link 
#+attr_latex: :placement [H]
#+caption: org-link related
#+name: tbl-orgmode-general-keybindings-link
| key(s) | function                                | short description             | mode | lambda |
|--------+-----------------------------------------+-------------------------------+------+--------|
| ol     | :ignore t                               | o-(l)ink..................... | org  |        |
| old    | garid-custom/org-toggle-link-n-emphasis | ol-(d)escription show/hide    | org  |        |
| oli    | (org-insert-link)                       | ol-(i)nsert                   | org  | y      |
| oln    | hydra-org-link-jumper/body              | ol-(n)ext link                | org  |        |
| olp    | hydra-org-link-jumper/body              | ol-(p)rev link                | org  |        |
| olo    | org-open-at-point                       | ol-(o)pen (same as SPC o o)   | org  |        |

**** (in org) org image
#+attr_latex: :placement [H]
#+caption: handing images in org-file
#+name: tbl-orgmode-general-keybindings-img
| key(s) | function                              | short description             | mode | lambda |
|--------+---------------------------------------+-------------------------------+------+--------|
| oi     | :ignore t                             | o-(i)mg...................... | org  |        |
| oip    | org-download-clipboard                | oi-(p)aste-clipboard          | org  |        |
| oiP    | org-download-image                    | oi-(P)aste from path          | org  |        |
| oid    | org-download-delete                   | oi-(d)elete file              | org  |        |
| oie    | org-download-edit                     | oi-(e)dit externally          | org  |        |
| oir    | org-download-rename-at-point          | oi-(r)ename file              | org  |        |
| oit    | org-toggle-inline-images              | oi-(t)oggle shot/hide image   | org  |        |
| ois    | :ignore t                             | oi-(s)ize.................... | org  |        |
| oisn   | (setq org-image-actual-width '(800))  | ois-(n)ormal 800px            | org  | y      |
| oisb   | (setq org-image-actual-width '(1500)) | ois-(b)ig    1500px           | org  | y      |
| oiss   | (setq org-image-actual-width '(400))  | ois-(s)mall  400px            | org  | y      |

**** (in org) org citation & footnotes
#+attr_latex: :placement [H]
#+caption: Insertings citations/footnote in org-file
#+name: tbl-orgmode-general-keybindings-cite
| key(s) | function                                         | short description             | mode | lambda |
|--------+--------------------------------------------------+-------------------------------+------+--------|
| oI     | :ignore t                                        | o-(I)nsert................... | org  |        |
| oIb    | org-cite-insert                                  | oI-(c)itation                 | org  |        |
| oIf    | org-footnote-new                                 | oI-(f)ootnote                 | org  |        |
| oIF    | org-footnote-action                              | oI-(F)ootnote-action          | org  |        |
| oIo    | (find-file (nth 0 org-cite-global-bibliography)) | oI-(o)pen bibliography        | -    | y      |
*** Converting tables actual keybinding
**** General.el config
#+begin_src emacs-lisp
(use-package general
  :config (general-evil-setup t)

  ;; Keybindings for everywhere
  (general-create-definer garids-keybind/for-all-modes
    :keymaps  '(normal visual emacs)
    :prefix         "SPC"
    :global-prefix  "C-SPC")

  ;; Keybindings inside Org-mode-map
  (general-create-definer garids-keybind/in-org-mode
    :states '(normal visual)
    :keymaps '(org-mode-map)
    :prefix        "SPC"
    :global-prefix "C-SPC")
  )
#+end_src
**** Script that converts previous org-tables into actual emacs configuration
:PROPERTIES:
:header-args:  :var tbl_00=tbl-kbinding-file-n-dired
:header-args+: :var tbl_01=tbl-global-general-keybindings-org-mode-related
:header-args+: :var tbl_02=tbl-global-general-keybindings-org-roam-related
:header-args+: :var tbl_03=tbl-kbind-zconvenients
:header-args+: :var tbl_04=tbl-global-general-keybindings-yassnippet
:header-args+: :var tbl_05=tbl-kbind-sys-related
:header-args+: :var tbl_06=tbl-global-general-keybindings-denote
:header-args+: :var tbl_07=tbl-kbind-help
:header-args+: :var tbl_08=tbl-global-general-keybindings-project
:header-args+: :var tbl_09=tbl-kbind-bookmarks
:header-args+: :var tbl_10=tbl-global-general-keybindings-consult
:header-args+: :var tbl_11=tbl-global-general-keybindings-calc
:header-args+: :var tbl_12=tbl-kbind-buffer-related
:header-args+: :var tbl_13=tbl-kbind-dev
:header-args+: :var tbl_14=tbl-global-general-keybindings-org-tbl-related
:header-args+: :var tbl_15=tbl-orgmode-general-keybindings-freq
:header-args+: :var tbl_16=tbl-orgmode-general-keybindings-todo
:header-args+: :var tbl_17=tbl-orgmode-general-keybindings-find
:header-args+: :var tbl_18=tbl-orgmode-general-keybindings-export
:header-args+: :var tbl_19=tbl-orgmode-general-keybindings-link
:header-args+: :var tbl_20=tbl-orgmode-general-keybindings-cite
:header-args+: :var tbl_21=tbl-orgmode-general-keybindings-img
:END:
#+caption: converting
#+name: src_that_converts_key_tables
#+begin_src elisp :wrap src emacs-lisp :tangle no
(setq tblall (append tbl_00 tbl_01 tbl_02 tbl_03 tbl_04 tbl_05 tbl_06 tbl_07 tbl_08 tbl_09
                     tbl_10 tbl_11 tbl_12 tbl_13 tbl_14 tbl_15 tbl_16 tbl_17 tbl_18 tbl_19
                     tbl_20 tbl_21
                     ))



(setq tbl_all_kbind (seq-filter (lambda (x) (string= (nth 3 x) "-"))   tblall))
(setq tbl_org_kbind (seq-filter (lambda (x) (string= (nth 3 x) "org")) tblall))





(concat
 "(garids-keybind/for-all-modes\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (nth 0 row)
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )" (nth 1 row)) ;; for anon functions
                        (nth 1 row))                                           ;; for normal functions
                      (nth 2 row)))
            tbl_all_kbind "\n"
            )
 "\n)\n\n"
 "(garids-keybind/in-org-mode\n"
 (mapconcat (lambda (row)
              (format "  \"%s\" '(%s :which-key \"%s\")"
                      (nth 0 row)
                      (if (string= (nth 4 row) "y")
                          (format "(lambda () (interactive) %s )" (nth 1 row)) ;; for anon functions
                        (nth 1 row))                                           ;; for normal functions
                      (nth 2 row)))
            tbl_org_kbind "\n"
            )
 "\n)\n"
 )
#+end_src

**** Converted config from tables

#+RESULTS: src_that_converts_key_tables
#+begin_src emacs-lisp
(garids-keybind/for-all-modes
  "SPC" '(execute-extended-command :which-key "M-x")
  "f" '(find-file :which-key "(f)ind-file")
  "d" '(dired-jump :which-key "(d)irectory")
  "D" '(:ignore t :which-key "(D)ired")
  "Ds" '(dired :which-key "D-(s)imple")
  "Dn" '(dired-sidebar-jump-to-sidebar :which-key "D-(n) side-tree show")
  "DN" '(dired-sidebar-hide-sidebar :which-key "D-(N) side-tree hide")
  "Dp" '(dired-preview-mode :which-key "D-(p) side-tree hide")
  "o" '(:ignore t :which-key "(o)rg...........................")
  "r" '(:ignore t :which-key "(r)oam..........................")
  "ruim" '(org-roam-ui-mode :which-key "rui-(m)ode ui-in-browser")
  "rf" '(my/org-roam-find-node-exclude-kanji :which-key "r-(f)ind no kanji")
  "rF" '(org-roam-node-find :which-key "r-(f)ind full find")
  "rl" '(org-roam-buffer-toggle :which-key "r-(l)toggle")
  "rL" '(org-roam-buffer-display-dedicated :which-key "r-(L)dedicated")
  "ri" '(org-roam-node-insert :which-key "r-(i)nsert")
  "rI" '(garid-custom/org-roam-node-insert-immediate :which-key "r-(I)nsert-immediate")
  "rt" '(:ignore t :which-key "r-(t)ag......................")
  "rta" '(org-roam-tag-add :which-key "rt-(a)dd")
  "rtd" '(org-roam-tag-remove :which-key "rt-(r)emove")
  "rd" '(:ignore t :which-key "r-(d)aily....................")
  "rdc" '(org-roam-dailies-capture-today :which-key "rd-(c)apture")
  "rdr" '(org-roam-dailies-goto-today :which-key "rd-(t)oday")
  "rdt" '(org-roam-dailies-goto-tomorrow :which-key "rd-(T)omorrow")
  "rdy" '(org-roam-dailies-goto-yesterday :which-key "rd-(y)esterday")
  "rdd" '(org-roam-dailies-goto-date :which-key "rd-(d)ate  goto date")
  "rd>" '(org-roam-dailies-goto-next-note :which-key "rd-(>)next")
  "rd<" '(org-roam-dailies-goto-previous-note :which-key "rd-(<)prev")
  "z" '(:ignore t :which-key "(z)conveniences............")
  "za" '(garid-custom/align-regexp-and-untabify :which-key "z-(a)lign")
  "zr" '(replace-regexp :which-key "z-(r)eplace word in buf")
  "zh" '(highlight-symbol-at-point :which-key "z-(h)ighlight word")
  "zH" '(unhighlight-regexp :which-key "z-(H)ighlight word off")
  "zs" '(:ignore t :which-key "z-(s)pell..................")
  "zsw" '(ispell-word :which-key "zs-(w)ord")
  "zsr" '(ispell-region :which-key "zs-(r)egion")
  "zsC" '(ispell-comments-and-strings :which-key "zs-(C)omment-full")
  "zsc" '(ispell-comment-or-string-at-point :which-key "zs-(c)omment-here")
  "zsb" '(ispell-buffer :which-key "zs-(b)uffer")
  "zsm" '(ispell-message :which-key "zs-(m)essage")
  "zsq" '(ispell-kill-ispell :which-key "zs-(q)uit")
  "zsl" '(ispell-change-dictionary :which-key "zs-(l)anguage en-mn")
  "ZQ" '(kill-emacs :which-key "kill emacs")
  "y" '(:ignore t :which-key "(y)assnippet.................")
  "yn" '(yas-new-snippet :which-key "y-(n)ew")
  "yd" '(yas-describe-tables :which-key "y-(d)esc-table")
  "yv" '(yas-visit-snippet-file :which-key "y-(v)isit")
  "yi" '(consult-yasnippet :which-key "y-(i)nsert")
  "s" '(:ignore t :which-key "(s)ystem.....................")
  "srf" '((lambda () (interactive) (recentf-open-files) ) :which-key "s-(r)ecent-(f)iles")
  "sl" '(:ignore t :which-key "s-(l)ine.....................")
  "sl5" '((lambda () (interactive) (setq display-line-numbers-width 5) ) :which-key "sl-(5) digit number")
  "sl4" '((lambda () (interactive) (setq display-line-numbers-width 4) ) :which-key "sl-(4) digit number")
  "sl3" '((lambda () (interactive) (setq display-line-numbers-width 3) ) :which-key "sl-(3) digit number")
  "slm" '(scroll-lock-mode :which-key "sl-(m)ode scroll-lock-mode")
  "slv" '(global-display-fill-column-indicator-mode :which-key "sl-(v)ertical-line")
  "sln" '(display-line-numbers-mode :which-key "sl-(n)umber toggle")
  "slr" '(ruler-mode :which-key "sl-(r)uler mode")
  "st" '(toggle-transparency :which-key "s-(t)oggle-transparency")
  "scl" '((lambda () (interactive) (global-command-log-mode) (clm/open-command-log-buffer) ) :which-key "s-(c)md-(l)og")
  "sw" '(whitespace-mode :which-key "s-(w)hitespace")
  "O" '(:ignore t :which-key "(O)pen........................")
  "Oe" '((lambda () (interactive) (find-file "~/.config/emacs/init.org") ) :which-key "O-(e)macs confg org")
  "OE" '((lambda () (interactive) (find-file "~/.config/emacs/init.el") ) :which-key "O-(E)macs confg el")
  "Ob" '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)) ) :which-key "O-(b)ibliography")
  "OO" '((lambda () (interactive) (find-file org-default-notes-file) ) :which-key "O-(O)rg capture")
  "Oa" '((lambda () (interactive) (find-file "~/Documents/Personal/gtd/gtd_archive_2024") ) :which-key "O-(a)rchive")
  "Ot" '((lambda () (interactive) (find-file "~/Documents/Personal/gtd/org-gtd-tasks.org") ) :which-key "O-(t)asks")
  "Oi" '((lambda () (interactive) (find-file "~/Documents/Personal/gtd/inbox.org") ) :which-key "O-(i)nbox")
  "t" '(:ignore t :which-key "(t)erminal....................")
  "te" '(eshell :which-key "t-(e)shell emacs-shell")
  "tv" '(vterm :which-key "t-(v)term  vterm")
  "tx" '(garid-custom/open-external-term-here :which-key "t-(x)ternal terminal")
  "tt" '(eat :which-key "t-ea(t) terminal")
  "Y" '(gry-copy-to-x-clip :which-key "(Y)ank to xclip")
  "R" '(:ignore t :which-key "(R)denote.....................")
  "Rr" '(denote-rename-file :which-key "R-(r)ename")
  "Rf" '(denote-open-or-create :which-key "R-(f)ind")
  "RD" '((lambda () (interactive) (dired denote-directory) ) :which-key "R-(D)ired")
  "h" '(:ignore t :which-key "(h)elp..........................")
  "hh" '(describe-symbol :which-key "h-(h)elp symbol (elisp)")
  "hH" '(describe-key :which-key "h-(H)elp keybinding")
  "ho" '(org-info :which-key "h-(o)rg info")
  "hw" '(which-key-show-top-level :which-key "h-(w)hich key")
  "hd" '(devdocs-lookup :which-key "h-(d)evdocs lookup")
  "hm" '(consult-man :which-key "h-(m)an")
  "p" '(:ignore t :which-key "(p)rojectl....................")
  "pr" '(xref-find-references :which-key "p-(r)eferences")
  "pd" '(consult-flymake :which-key "p-(d)iagnostic")
  "pf" '(project-find-file :which-key "p-(f)ind-file")
  "pz" '(project-switch-project :which-key "p-(z)ump-to-other-proj")
  "ps" '(consult-git-grep :which-key "p-(s)earch git files")
  "pS" '(project-find-regexp :which-key "p-(s)earch-in-proj")
  "pk" '(project-kill-buffers :which-key "p-(k)ill-buf-proj")
  "pl" '(consult-project-buffer :which-key "p-(l)ist-buf-proj")
  "pv" '(consult-imenu :which-key "p-(v)ariables")
  "v" '(:ignore t :which-key "(v)-project...................")
  "vq" '(format-all-buffer :which-key "v-(q)-format-buffer")
  "vr" '(eglot-rename :which-key "v-(r)ename")
  "b" '(:ignore t :which-key "(b)ookmark......................")
  "bm" '(consult-bookmark :which-key "b-(m)ark-consult")
  "bs" '(bookmark-set :which-key "b-(s)et")
  "bd" '(bookmark-delete :which-key "b-(d)elete")
  "br" '(bookmark-rename :which-key "b-(r)ename")
  "c" '(:ignore t :which-key "(c)onsult.......................")
  "co" '(consult-org-heading :which-key "c-(o)rg   == ofh")
  "ci" '(consult-imenu :which-key "c-(i)menu")
  "cm" '(consult-man :which-key "c-(m)an")
  "cr" '(consult-ripgrep :which-key "c-(r)ipgrep")
  "cR" '(consult-recent-file :which-key "c-(R)ecent files")
  "cf" '(consult-flymake :which-key "c-(f)lymake")
  "cp" '(consult-project-buffer :which-key "c-(p)roject")
  "cd" '(consult-dir :which-key "c-(d)ir")
  "cF" '(consult-fd :which-key "c-(F)d   == $find")
  "ca" '(consult-org-agenda :which-key "c-(a)genda headings")
  "cg" '(consult-git-grep :which-key "c-(g)it grep  == ps")
  "C" '(:ignore t :which-key "(C)alc related..................")
  "Ca" '(calc :which-key "C-(a) calc")
  "Ce" '(calc-embedded :which-key "C-(e) embedded")
  "Cf" '(full-calc :which-key "C-(f) full")
  "l" '(consult-buffer :which-key "(l)ist-buffer")
  "L" '(:ignore t :which-key "(L)buffer....................")
  "Lr" '(revert-buffer-quick :which-key "L-(r)eread")
  "Le" '(eval-buffer :which-key "L-(e)val")
  "Li" '(ibuffer :which-key "L-(i)buffer")
  "Ln" '(rename-buffer :which-key "L-(r)ename")
  "L<" '(switch-to-prev-buffer :which-key "L-(<)prev")
  "L>" '(switch-to-next-buffer :which-key "L-(>)next")
  "Ld" '(crux-delete-file-and-buffer :which-key "L-(d)elete")
  "Lc" '(clone-indirect-buffer :which-key "L-(c)lone")
  "Ls" '(crux-create-scratch-buffer :which-key "L-(s)cratch-buffer")
  "Lh" '(buf-move-left :which-key "L-(h) move left")
  "Lj" '(buf-move-down :which-key "L-(j) move down")
  "Lk" '(buf-move-up :which-key "L-(k) move up")
  "Ll" '(buf-move-right :which-key "L-(l) move right")
  "LL" '(tear-off-window :which-key "L-(L) tear window to frame")
  "mg" '(magit-status :which-key "(m)a(g)it")
  "<" '(recompile :which-key "recompile")
  "sco" '(corfu-mode :which-key "s-(c)orfu-(m)ode")
  "se" '(eglot :which-key "s-(e)glot")
  "rg" '(rg :which-key "(r)ip-(g)rep  ~cr")
  "gs" '(git-gutter:popup-hunk :which-key "(g)it-(s) popup hunk  ~cr")
  "gd" '(magit-ediff-compare :which-key "ma(g)it-e(d) hunk  ~cr")
  "P" '(:ignore :which-key "Python (inferior)   ......")
  "Pr" '(python-shell-restart :which-key "P-(R)estart")
  "PP" '(run-python :which-key "P-(P) run-python")
  "Pk" '(comint-send-eof :which-key "P-(k) kill  (also C-c C-d)")
  "oT" '(:ignore t :which-key "o-(T)able....................")
  "oTm" '(orgtbl-mode :which-key "oT-(m)ode")
  "oTc" '(orgtbl-create-or-convert-from-region :which-key "oT-(c)reate")
  "oTT" '(org-table-toggle-column-width :which-key "oT-(T)oggle-hide-column")
  "oTC" '(org-table-toggle-coordinate-overlays :which-key "oT-(C)oordinate")
  "oc" '(org-capture :which-key "o-(c)apture")
  "oA" '(org-agenda :which-key "o-(A)genda")
  "oa" '(:ignore t :which-key "o-(a)genda...................")
  "oab" '(org-timeblock :which-key "o-a-(b)lock")
  "oIo" '((lambda () (interactive) (find-file (nth 0 org-cite-global-bibliography)) ) :which-key "oI-(o)pen bibliography")
)

(garids-keybind/in-org-mode
  "oo" '(org-open-at-point :which-key "o-(o)pen")
  "od" '(code-from-internet/org-link-open-parent-with-dired-at-point :which-key "o-(d)irectory open")
  "," '(org-ctrl-c-ctrl-c :which-key "C-c C-c")
  "oTx" '(org-table-export :which-key "oT-(x)port as csv file")
  "oTs" '(org-table-sum :which-key "oT-(s)um")
  "oTi" '(:ignore t :which-key "oT-(i)nsert..................")
  "oTic" '(org-table-insert-column :which-key "oTi-(c)olumn")
  "oTir" '(org-table-insert-row :which-key "oTi-(r)ow")
  "os" '(:ignore t :which-key "o-(s)ubtree..................")
  "osy" '(org-copy-subtree :which-key "os-(y)ank (aka copy)")
  "osY" '(org-id-copy :which-key "os-(Y)ank (ID)")
  "osv" '(org-mark-element :which-key "os-(v)isually select element")
  "osm" '(org-refile :which-key "os-(m)ove")
  "osd" '(org-cut-subtree :which-key "os-(d)elete (aka cut)")
  "ost" '(org-toggle-narrow-to-subtree :which-key "os-(t)oggle narrow")
  "osn" '(org-num-mode :which-key "os-(n)um mode")
  "oss" '(org-sort :which-key "os-(s)ort")
  "osp" '(org-set-property :which-key "os-(p)roperty")
  "osI" '(org-indent-mode :which-key "os-(I)ndent mode")
  "osi" '(:ignore t :which-key "os-(i)nsert heading..........")
  "osia" '(org-insert-heading-after-current :which-key "osi-(a)fter           C-RET")
  "osiA" '(org-insert-todo-heading-respect-content :which-key "osi-(A)fter    todo C-S-RET")
  "osih" '(org-insert-heading :which-key "osi-(h)eading         M-RET")
  "osiH" '(org-insert-todo-heading :which-key "osi-(H)eading  todo M-S-RET")
  "osis" '(org-insert-subheading :which-key "osi-(s)ubheading")
  "osiS" '(org-insert-todo-subheading :which-key "osi-(S)ubheading todo")
  "ot" '(:ignore t :which-key "o-(t)odo.....................")
  "otT" '(org-todo :which-key "ot-(T)odo")
  "otn" '((lambda () (interactive) (org-todo "NEXT" ) ) :which-key "ot-(n)ext")
  "ott" '((lambda () (interactive) (org-todo "TODO" ) ) :which-key "ot-(t)odo")
  "otw" '((lambda () (interactive) (org-todo "WAIT" ) ) :which-key "ot-(w)ait")
  "otd" '((lambda () (interactive) (org-todo "DONE" ) ) :which-key "ot-(d)one")
  "otc" '((lambda () (interactive) (org-todo "CNCL" ) ) :which-key "ot-(c)ancel")
  "otr" '((lambda () (interactive) (org-todo "" ) ) :which-key "ot-(r)emove")
  "ota" '((lambda () (interactive) (org-archive-subtree-default-with-confirmation) ) :which-key "ot-(a)rchive TOOD")
  "oas" '(org-schedule :which-key "oa-(s)chedule")
  "oad" '(org-deadline :which-key "oa-(d)eadline")
  "of" '(:ignore t :which-key "o-(f)ind.....................")
  "ofh" '((lambda () (interactive) (consult-org-heading) ) :which-key "of-(h)eading")
  "ofn" '((lambda () (interactive) (consult-line "#+name"   ) ) :which-key "of-(n)amed table/eq/src")
  "ofr" '((lambda () (interactive) (consult-line "#+result" ) ) :which-key "of-(r)esult        /src")
  "ofs" '((lambda () (interactive) (consult-line "#+begin_" ) ) :which-key "of-(s)ource src-block")
  "j" '(org-next-block :which-key "(j) jump to next src-block")
  "k" '(org-previous-block :which-key "(k) jump to prev src-block")
  "ox" '(:ignore t :which-key "o-(x)port....................")
  "oxb" '(org-beamer-export-to-pdf :which-key "ox-(b)eamer")
  "oxB" '((lambda () (interactive) (org-beamer-export-to-pdf nil t) ) :which-key "ox-(B)eamer subtree")
  "oxp" '(org-latex-export-to-pdf :which-key "ox-(p)df latex")
  "oxr" '(org-reveal-export-to-html :which-key "ox-(r)eveal js")
  "oxh" '(org-html-export-to-html :which-key "ox-(h)tml")
  "oxP" '((lambda () (interactive) (org-latex-export-to-pdf nil t) ) :which-key "ox-(P)df latex subtree")
  "oxo" '(gry/org-open-pdf :which-key "ox-(o)pen exported pdf")
  "oxO" '(gry/org-open-html :which-key "ox-(O)pen exported html")
  "op" '(org-latex-preview :which-key "o-(p)review")
  "ol" '(:ignore t :which-key "o-(l)ink.....................")
  "old" '(garid-custom/org-toggle-link-n-emphasis :which-key "ol-(d)escription show/hide")
  "oli" '((lambda () (interactive) (org-insert-link) ) :which-key "ol-(i)nsert")
  "oln" '(hydra-org-link-jumper/body :which-key "ol-(n)ext link")
  "olp" '(hydra-org-link-jumper/body :which-key "ol-(p)rev link")
  "olo" '(org-open-at-point :which-key "ol-(o)pen (same as SPC o o)")
  "oI" '(:ignore t :which-key "o-(I)nsert...................")
  "oIb" '(org-cite-insert :which-key "oI-(c)itation")
  "oIf" '(org-footnote-new :which-key "oI-(f)ootnote")
  "oIF" '(org-footnote-action :which-key "oI-(F)ootnote-action")
  "oi" '(:ignore t :which-key "o-(i)mg......................")
  "oip" '(org-download-clipboard :which-key "oi-(p)aste-clipboard")
  "oiP" '(org-download-image :which-key "oi-(P)aste from path")
  "oid" '(org-download-delete :which-key "oi-(d)elete file")
  "oie" '(org-download-edit :which-key "oi-(e)dit externally")
  "oir" '(org-download-rename-at-point :which-key "oi-(r)ename file")
  "oit" '(org-toggle-inline-images :which-key "oi-(t)oggle shot/hide image")
  "ois" '(:ignore t :which-key "oi-(s)ize....................")
  "oisn" '((lambda () (interactive) (setq org-image-actual-width '(800)) ) :which-key "ois-(n)ormal 800px")
  "oisb" '((lambda () (interactive) (setq org-image-actual-width '(1500)) ) :which-key "ois-(b)ig    1500px")
  "oiss" '((lambda () (interactive) (setq org-image-actual-width '(400)) ) :which-key "ois-(s)mall  400px")
)
#+end_src

* System:
** Recent files
#+begin_src emacs-lisp
;; recent files configuration
(recentf-mode 1)
(setq
 recentf-max-menu-items  30
 recentf-max-saved-items 30)
#+end_src
** Custom opening external terminal at current buffer           :customFunc:
#+begin_src emacs-lisp
(defun garid-custom/open-external-term-here ()
  (interactive)
  (call-process-shell-command
   (concat
    user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
;;(shell-command (concat user-emacs-directory "garid/open_external_term.sh" " " buffer-file-name)))
#+end_src
*** shell script to open terminal                             :shell_script:
#+begin_src shell :tangle garid/open_external_term.sh
#!/bin/bash

# Open System termianl $TERMINAL at $1:
# nohup for exitting terminal that executed this script
# other wise terminal that executed this script just hangs there

# if $1 is directory; -> cd to this dir
if [[ -d $1 ]]; then             
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n at: $1"
	cd "$1" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is file; -> cd to parent dir
elif [[ -f $1 ]]; then
	notify-send "Emacs external terminal" "Emacs is openning external terminal\n near: $1"
	cd "$(dirname "$1")" || return 1
	nohup "$TERMINAL" > /dev/null &
	return 0

# if $1 is neither directory nor file -> fail
else
	notify-send "Emacs external terminal" "$1\nwas not found\nOpening at Home"
	nohup "$TERMINAL" > /dev/null &
	return 0
fi
#+end_src
** Make long file faster?
[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][this article]]

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right )
(setq bidi-inhibit-bpa t                              )
#+end_src

* Dired
** Change ls in bsd:
#+begin_src emacs-lisp
(when (eq system-type 'berkeley-unix)
  (setq insert-directory-program "gls"))
;; can be include ~:if .....~ in usepackage below
#+end_src
** Core dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :hook ((dired-mode . denote-dired-mode)
         (dired-mode . dired-omit-mode  ))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h"          'dired-single-up-directory
    "l"          'dired-single-buffer
    (kbd "C-s")  'dired-omit-mode      ;; same keybinding with my lf config
    " "          'nil
    (kbd "N")    'mkdir)
  )
#+end_src
** COMMENT Icons - Dired
#+begin_src emacs-lisp
(use-package all-the-icons
  ;; :if (display-graphic-p)
  :config
  (all-the-icons-install-fonts 'install-without-asking)
  (add-to-list
   'all-the-icons-extension-icon-alist
   '("m"  all-the-icons-fileicon "matlab"  :face all-the-icons-orange)))

(use-package all-the-icons-dired
  ;; :if (display-graphic-p)
  :config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  )


(use-package all-the-icons-completion
  ;; :if (display-graphic-p)
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src
** Dired additionals
I don't use these not much  
#+begin_src emacs-lisp
(use-package dired-single)
(use-package dired-sidebar)
(use-package dired-preview)
#+end_src
* Misc Packages
** buffer move
#+begin_src emacs-lisp
(use-package buffer-move)
#+end_src
** crux
#+begin_src emacs-lisp
(use-package crux)
#+end_src
** command-log-mode
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
** format-all
#+begin_src emacs-lisp
(use-package format-all)
#+end_src
** popper
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle      )
         ("M-`"   . popper-cycle       )
         ("C-M-`" . popper-toggle-type )
         ;; :map popper-mode-map
         ;; ("TAB"   . forward-button     ) ;; mostly for terminal mode
         ;; :map help-mode-map
         ;; ("TAB"   . forward-button     ) ;; mostly for terminal mode

         )
  :init
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "\\*eldoc\\*"
                                   "\\*eldoc.*\\*" ;;regex
                                   "\\*xref\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   "\\*devdocs\\*"
                                   "\\*lsp-bridge-doc\\*"
                                   "\\*git-gutter:diff\\*"
                                   "\\*Org Select\\*"
                                   "CAPTURE-20230926T010607--todo__todo.org"
                                   help-mode
                                   compilation-mode))
  (popper-mode      +1)
  (popper-echo-mode +1))
#+end_src

** COMMENT emacs-everywhere
#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src
** graphviz
#+begin_src emacs-lisp
(use-package graphviz-dot-mode)
#+end_src
* COMMENT Unused
** COMMENT Mail & contacts:
*** COMMENT mu4e
#+begin_src emacs-lisp
;; (delete 'mu4e evil-collection-mode-list)
;; (delete 'mu4e-conversation evil-collection-mode-list)

(require 'mu4e)

;; default
(setq mu4e-maildir
      "/home/garid/.local/share/mail/garidzorigoo@gmail.com")

(setq mu4e-get-mail-command "mailsync")
(setq mu4e-drafts-folder "/[Gmail]/Drafts")
(setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
(setq mu4e-trash-folder  "/[Gmail]/Trash")

;; dont save message to Sent msg, GMail/IMAP will take care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
(setq mu4e-maildir-shortcuts
      '(("/INBOX"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; something about ourselves
;; I don't use a signature...
(setq
 user-mail-address "garidzorigoo@gmail.com"
 user-full-name    "Garid Z."
 message-signature "Garid Z."
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type  'ssl)
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
*** COMMENT notmuch
#+begin_src emacs-lisp
(use-package notmuch)
#+end_src
*** COMMENT org-contacts
#+begin_src emacs-lisp
(setq mu4e-org-contacts-file "/home/garid/roamnotes/20230417200051-org_contacs.org")
(add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
(add-to-list 'mu4e-view-actions    '("org-contact-add" . mu4e-action-add-org-contact) t)
#+end_src
** COMMENT eww web browser
#+begin_src emacs-lisp
(setq
  browse-url-browser-function 'eww-browse-url ; Use eww as the default browser
  shr-use-fonts  nil                          ; No special fonts
  shr-use-colors nil                          ; No colours
  shr-indentation 2                           ; Left-side margin
  shr-width 85                                ; Fold text to 85 columns
  eww-search-prefix "https://lite.duckduckgo.com/lite/?q=")    ; Use another engine for searching
#+end_src
** COMMENT translate
#+begin_src emacs-lisp
(use-package go-translate)
(setq gts-translate-list '(("en" "ja")))
(setq gts-default-translator
      (gts-translator
       :picker	(gts-prompt-picker)
       :engines (list (gts-bing-engine) (gts-google-engine))
       :render	(gts-buffer-render)))
#+end_src
** COMMENT writeroom
#+begin_src emacs-lisp
(use-package writeroom-mode
  :ensure t
  :bind (:map writeroom-mode-map
              ("<backspace>" . ignore) ("<deletechar>"   . ignore)
              ("<delete>"    . ignore) ("<M-backspace>"  . ignore)
              ("<M-DEL>"     . ignore) ("<up>"           . ignore)
              ("<down>"      . ignore) ("<left>"         . ignore)
              ("<right>"     . ignore)))


(use-package writeroom-mode
  :ensure t
  :custom ((setq org-hyperscheduler-readonly-mode nil)))
#+end_src
** COMMENT spray
#+begin_src emacs-lisp
(use-package spray
    :ensure t
    :bind (("<f6>"  . spray-mode)))
#+end_src
** COMMENT write good
#+begin_src emacs-lisp
(add-to-list 'load-path "/home/garid/.config/emacs/writegood-mode")
(use-package writegood-mode)
#+end_src
** COMMENT academic
#+begin_src emacs-lisp
(use-package academic-phrases)
#+end_src
** COMMENT emacs restart
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src
* Finish Notifier
#+begin_src emacs-lisp
(call-process-shell-command "notify-send \"Emacs\" \"Emacs server has inialized\" &") 
#+end_src

* COMMENT Custom set variable:
#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ignored-local-variable-values
   '((eval setq org-download-image-dir
	   (concat "./od-imgs/"
		   (file-name-base buffer-file-name)))))
 '(package-selected-packages
   '(consult-eglot laas zoom zig-mode xelb writeroom-mode which-key vterm vertico-posframe use-package undo-fu typescript-mode tree-sitter-langs toc-org tmr svg-tag-mode sudo-utils sr-speedbar sqlite spray shrink-path selectric-mode scad-mode rust-mode ripgrep rg restart-emacs rainbow-delimiters pyvenv python-x python-mode prescient ppp popup-kill-ring popper pfuture ox-hugo org-web-tools org-tree-slide org-tanglesync org-sidebar org-present org-pomodoro org-noter-pdftools org-hyperscheduler org-fragtog org-edna org-download org-contrib org-contacts org-bullets org-auto-tangle org-agenda-property orderless olivetti ob-tmux ob-rust notmuch nord-theme no-littering multi-term mew matlab-mode mastodon marginalia macrostep latex-math-preview kind-icon keyfreq jupyter ivy-posframe ibuffer-sidebar hydra highlight-indentation hide-lines helpful gtags-mode gruvbox-theme graphviz-dot-mode grammarly go-translate go-mode gnuplot ggtags general geiser-mit format-all forge flyspell-lazy flymake-python-pyflakes flycheck-aspell evil-tex evil-terminal-cursor-changer evil-org evil-nerd-commenter evil-collection eterm-256color eshell-git-prompt eradio emms-player-simple-mpv embark-consult emacsql-sqlite emacs-everywhere elfeed-score eglot edwina dumb-jump dracula-theme dired-single dired-sidebar dired-open dired-hide-dotfiles desktop-environment deft darkroom csv-mode crux corfu-terminal corfu-doc consult-yasnippet consult-org-roam company-ctags company-box command-log-mode citar-org-roam citar-embark cfrs cdlatex bui browse-kill-ring bibtex-completion auto-package-update async-await arduino-mode all-the-icons-dired all-the-icons-completion agtags ace-window 2048-game))
 '(safe-local-variable-values
   '((eval setq org-download-image-dir
	   (concat "./"
		   (file-name-base buffer-file-name))))))
#+end_src
* Custom set variable:
[[https://www.youtube.com/watch?v=tw2-rI2bxSg&t=1s][Initial idea from Systems crafter]], [[https://emacs.stackexchange.com/a/18785/38482][and code structure from this answer on emacs stackexchange]], and need to set ~enble-local-eval~ to ~t~ ()

#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values '(dired-omit-files         . "\\`[.]?#\\|\\`[.][.]?\\'\\|\\.html\\'\\|\\.tex\\'"    )) ;; <-- wokr
;; (add-to-list 'safe-local-variable-values '(dired-omit-files         . "\\`[.]?#\\|\\`[.][.]?\\'\\|\\.a\\'\\|\\.tex\\'"    )) ;; <-- wokr
;;??(add-to-list 'safe-local-variable-values '(org-download-image-dir   . (concat "./od-imgs/" (file-name-base buffer-file-name))))
;; (add-to-list 'safe-local-variable-values '(org-download-heading-lvl . nil                                                    ))
;;(put 'org-download-image-dir             'safe-local-variable #'stringp)  <--- didn't work 
;;(put 'org-download-image-dir             'safe-local-variable (lambda (_) t)) <--didn' work

;(setq enable-local-eval t)
;;(setq enable-local-eval :safe) ;;https://emacs.stackexchange.com/a/38/38482
#+end_src
